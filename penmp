# 1 "neutron-omp.cu"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 1
# 56 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
#pragma GCC diagnostic push


#pragma GCC diagnostic ignored "-Wunused-function"
# 78 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/host_config.h" 1
# 173 "/usr/local/cuda/bin/../targets/x86_64-linux/include/host_config.h"
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 174 "/usr/local/cuda/bin/../targets/x86_64-linux/include/host_config.h" 2
# 79 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2







# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 56 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_types.h" 1
# 53 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_types.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/host_defines.h" 1
# 54 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_types.h" 2







enum __attribute__((device_builtin)) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 2


# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h" 1
# 71 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 152 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 72 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4

# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 73 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h" 2
# 156 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"

# 156 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
enum __attribute__((device_builtin)) cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 191 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorLaunchFailure = 4,
# 200 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorPriorLaunchFailure = 5,
# 211 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorLaunchTimeout = 6,
# 220 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 235 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 316 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorAddressOfConstant = 22,
# 325 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorTextureFetchFailed = 23,
# 334 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorTextureNotBound = 24,
# 343 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 392 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 427 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 489 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 515 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,






    cudaErrorProfilerDisabled = 55,







    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,






     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,





    cudaErrorPeerAccessUnsupported = 64,






    cudaErrorLaunchMaxDepthExceeded = 65,







    cudaErrorLaunchFileScopedTex = 66,







    cudaErrorLaunchFileScopedSurf = 67,
# 640 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorSyncDepthExceeded = 68,
# 652 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorLaunchPendingCountExceeded = 69,




    cudaErrorNotPermitted = 70,





    cudaErrorNotSupported = 71,
# 672 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorHardwareStackError = 72,







    cudaErrorIllegalInstruction = 73,
# 689 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorMisalignedAddress = 74,
# 700 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorInvalidAddressSpace = 75,







    cudaErrorInvalidPc = 76,







    cudaErrorIllegalAddress = 77,





    cudaErrorInvalidPtx = 78,




    cudaErrorInvalidGraphicsContext = 79,





    cudaErrorNvlinkUncorrectable = 80,




    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum __attribute__((device_builtin)) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct __attribute__((device_builtin)) cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __attribute__((device_builtin)) cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum __attribute__((device_builtin)) cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};






struct __attribute__((device_builtin)) cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};






struct __attribute__((device_builtin)) cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};






struct __attribute__((device_builtin)) cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct __attribute__((device_builtin)) cudaMemcpy3DParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct __attribute__((device_builtin)) cudaMemcpy3DPeerParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum __attribute__((device_builtin)) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum __attribute__((device_builtin)) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum __attribute__((device_builtin)) cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




enum __attribute__((device_builtin)) cudaResourceType
{
    cudaResourceTypeArray = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear = 0x02,
    cudaResourceTypePitch2D = 0x03
};




enum __attribute__((device_builtin)) cudaResourceViewFormat
{
    cudaResViewFormatNone = 0x00,
    cudaResViewFormatUnsignedChar1 = 0x01,
    cudaResViewFormatUnsignedChar2 = 0x02,
    cudaResViewFormatUnsignedChar4 = 0x03,
    cudaResViewFormatSignedChar1 = 0x04,
    cudaResViewFormatSignedChar2 = 0x05,
    cudaResViewFormatSignedChar4 = 0x06,
    cudaResViewFormatUnsignedShort1 = 0x07,
    cudaResViewFormatUnsignedShort2 = 0x08,
    cudaResViewFormatUnsignedShort4 = 0x09,
    cudaResViewFormatSignedShort1 = 0x0a,
    cudaResViewFormatSignedShort2 = 0x0b,
    cudaResViewFormatSignedShort4 = 0x0c,
    cudaResViewFormatUnsignedInt1 = 0x0d,
    cudaResViewFormatUnsignedInt2 = 0x0e,
    cudaResViewFormatUnsignedInt4 = 0x0f,
    cudaResViewFormatSignedInt1 = 0x10,
    cudaResViewFormatSignedInt2 = 0x11,
    cudaResViewFormatSignedInt4 = 0x12,
    cudaResViewFormatHalf1 = 0x13,
    cudaResViewFormatHalf2 = 0x14,
    cudaResViewFormatHalf4 = 0x15,
    cudaResViewFormatFloat1 = 0x16,
    cudaResViewFormatFloat2 = 0x17,
    cudaResViewFormatFloat4 = 0x18,
    cudaResViewFormatUnsignedBlockCompressed1 = 0x19,
    cudaResViewFormatUnsignedBlockCompressed2 = 0x1a,
    cudaResViewFormatUnsignedBlockCompressed3 = 0x1b,
    cudaResViewFormatUnsignedBlockCompressed4 = 0x1c,
    cudaResViewFormatSignedBlockCompressed4 = 0x1d,
    cudaResViewFormatUnsignedBlockCompressed5 = 0x1e,
    cudaResViewFormatSignedBlockCompressed5 = 0x1f,
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20,
    cudaResViewFormatSignedBlockCompressed6H = 0x21,
    cudaResViewFormatUnsignedBlockCompressed7 = 0x22
};




struct __attribute__((device_builtin)) cudaResourceDesc {
 enum cudaResourceType resType;

 union {
  struct {
   cudaArray_t array;
  } array;
        struct {
            cudaMipmappedArray_t mipmap;
        } mipmap;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t sizeInBytes;
  } linear;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t width;
   size_t height;
   size_t pitchInBytes;
  } pitch2D;
 } res;
};




struct __attribute__((device_builtin)) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
};




struct __attribute__((device_builtin)) cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 1045 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
    int device;





    void *devicePointer;





    void *hostPointer;




    int isManaged;
};




struct __attribute__((device_builtin)) cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;





   int cacheModeCA;
};




enum __attribute__((device_builtin)) cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};





enum __attribute__((device_builtin)) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __attribute__((device_builtin)) cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum __attribute__((device_builtin)) cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02,
    cudaLimitDevRuntimeSyncDepth = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04
};




enum __attribute__((device_builtin)) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6
};




enum __attribute__((device_builtin)) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4
};




enum __attribute__((device_builtin)) cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




enum __attribute__((device_builtin)) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91
};





enum __attribute__((device_builtin)) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3
};



struct __attribute__((device_builtin)) cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DMipmap;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DMipmap[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTexture3DAlt[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
    int streamPrioritiesSupported;
    int globalL1CacheSupported;
    int localL1CacheSupported;
    size_t sharedMemPerMultiprocessor;
    int regsPerMultiprocessor;
    int managedMemory;
    int isMultiGpuBoard;
    int multiGpuBoardGroupID;
    int hostNativeAtomicSupported;
    int singleToDoublePrecisionPerfRatio;
    int pageableMemoryAccess;
    int concurrentManagedAccess;
};
# 1456 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcMemHandle_st
{
    char reserved[64];
}cudaIpcMemHandle_t;
# 1478 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_types.h"
typedef __attribute__((device_builtin)) enum cudaError cudaError_t;




typedef __attribute__((device_builtin)) struct CUstream_st *cudaStream_t;




typedef __attribute__((device_builtin)) struct CUevent_st *cudaEvent_t;




typedef __attribute__((device_builtin)) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __attribute__((device_builtin)) struct CUuuid_st cudaUUID_t;




typedef __attribute__((device_builtin)) enum cudaOutputMode cudaOutputMode_t;
# 60 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 2


# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_types.h" 1
# 84 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_types.h"
enum __attribute__((device_builtin)) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum __attribute__((device_builtin)) cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct __attribute__((device_builtin)) surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};




typedef __attribute__((device_builtin)) unsigned long long cudaSurfaceObject_t;
# 63 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_types.h" 1
# 84 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_types.h"
enum __attribute__((device_builtin)) cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum __attribute__((device_builtin)) cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum __attribute__((device_builtin)) cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct __attribute__((device_builtin)) textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
    int __cudaReserved[15];
};




struct __attribute__((device_builtin)) cudaTextureDesc
{



    enum cudaTextureAddressMode addressMode[3];



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureReadMode readMode;



    int sRGB;



    float borderColor[4];



    int normalizedCoords;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
};




typedef __attribute__((device_builtin)) unsigned long long cudaTextureObject_t;
# 64 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_types.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_types.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 64 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_types.h" 1
# 64 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 2
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_types.h" 2
# 98 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_types.h"
struct __attribute__((device_builtin)) char1
{
    signed char x;
};

struct __attribute__((device_builtin)) uchar1
{
    unsigned char x;
};


struct __attribute__((device_builtin)) __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct __attribute__((device_builtin)) char3
{
    signed char x, y, z;
};

struct __attribute__((device_builtin)) uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct __attribute__((device_builtin)) short1
{
    short x;
};

struct __attribute__((device_builtin)) ushort1
{
    unsigned short x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct __attribute__((device_builtin)) short3
{
    short x, y, z;
};

struct __attribute__((device_builtin)) ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __attribute__((device_builtin)) int1
{
    int x;
};

struct __attribute__((device_builtin)) uint1
{
    unsigned int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct __attribute__((device_builtin)) int3
{
    int x, y, z;
};

struct __attribute__((device_builtin)) uint3
{
    unsigned int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct __attribute__((device_builtin)) long1
{
    long int x;
};

struct __attribute__((device_builtin)) ulong1
{
    unsigned long x;
};






struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct __attribute__((device_builtin)) long3
{
    long int x, y, z;
};

struct __attribute__((device_builtin)) ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct __attribute__((device_builtin)) float1
{
    float x;
};
# 274 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_types.h"
struct __attribute__((device_builtin)) __attribute__((aligned(8))) float2 { float x; float y; };




struct __attribute__((device_builtin)) float3
{
    float x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct __attribute__((device_builtin)) longlong1
{
    long long int x;
};

struct __attribute__((device_builtin)) ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct __attribute__((device_builtin)) longlong3
{
    long long int x, y, z;
};

struct __attribute__((device_builtin)) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __attribute__((device_builtin)) double1
{
    double x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double2
{
    double x, y;
};

struct __attribute__((device_builtin)) double3
{
    double x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 362 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_types.h"
typedef __attribute__((device_builtin)) struct char1 char1;
typedef __attribute__((device_builtin)) struct uchar1 uchar1;
typedef __attribute__((device_builtin)) struct char2 char2;
typedef __attribute__((device_builtin)) struct uchar2 uchar2;
typedef __attribute__((device_builtin)) struct char3 char3;
typedef __attribute__((device_builtin)) struct uchar3 uchar3;
typedef __attribute__((device_builtin)) struct char4 char4;
typedef __attribute__((device_builtin)) struct uchar4 uchar4;
typedef __attribute__((device_builtin)) struct short1 short1;
typedef __attribute__((device_builtin)) struct ushort1 ushort1;
typedef __attribute__((device_builtin)) struct short2 short2;
typedef __attribute__((device_builtin)) struct ushort2 ushort2;
typedef __attribute__((device_builtin)) struct short3 short3;
typedef __attribute__((device_builtin)) struct ushort3 ushort3;
typedef __attribute__((device_builtin)) struct short4 short4;
typedef __attribute__((device_builtin)) struct ushort4 ushort4;
typedef __attribute__((device_builtin)) struct int1 int1;
typedef __attribute__((device_builtin)) struct uint1 uint1;
typedef __attribute__((device_builtin)) struct int2 int2;
typedef __attribute__((device_builtin)) struct uint2 uint2;
typedef __attribute__((device_builtin)) struct int3 int3;
typedef __attribute__((device_builtin)) struct uint3 uint3;
typedef __attribute__((device_builtin)) struct int4 int4;
typedef __attribute__((device_builtin)) struct uint4 uint4;
typedef __attribute__((device_builtin)) struct long1 long1;
typedef __attribute__((device_builtin)) struct ulong1 ulong1;
typedef __attribute__((device_builtin)) struct long2 long2;
typedef __attribute__((device_builtin)) struct ulong2 ulong2;
typedef __attribute__((device_builtin)) struct long3 long3;
typedef __attribute__((device_builtin)) struct ulong3 ulong3;
typedef __attribute__((device_builtin)) struct long4 long4;
typedef __attribute__((device_builtin)) struct ulong4 ulong4;
typedef __attribute__((device_builtin)) struct float1 float1;
typedef __attribute__((device_builtin)) struct float2 float2;
typedef __attribute__((device_builtin)) struct float3 float3;
typedef __attribute__((device_builtin)) struct float4 float4;
typedef __attribute__((device_builtin)) struct longlong1 longlong1;
typedef __attribute__((device_builtin)) struct ulonglong1 ulonglong1;
typedef __attribute__((device_builtin)) struct longlong2 longlong2;
typedef __attribute__((device_builtin)) struct ulonglong2 ulonglong2;
typedef __attribute__((device_builtin)) struct longlong3 longlong3;
typedef __attribute__((device_builtin)) struct ulonglong3 ulonglong3;
typedef __attribute__((device_builtin)) struct longlong4 longlong4;
typedef __attribute__((device_builtin)) struct ulonglong4 ulonglong4;
typedef __attribute__((device_builtin)) struct double1 double1;
typedef __attribute__((device_builtin)) struct double2 double2;
typedef __attribute__((device_builtin)) struct double3 double3;
typedef __attribute__((device_builtin)) struct double4 double4;







struct __attribute__((device_builtin)) dim3
{
    unsigned int x, y, z;

    __attribute__((host)) __attribute__((device)) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __attribute__((host)) __attribute__((device)) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __attribute__((host)) __attribute__((device)) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};

typedef __attribute__((device_builtin)) struct dim3 dim3;
# 64 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 2
# 87 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/library_types.h" 1
# 54 "/usr/local/cuda/bin/../targets/x86_64-linux/include/library_types.h"
typedef enum cudaDataType_t
{
 CUDA_R_16F= 2,
 CUDA_C_16F= 6,
 CUDA_R_32F= 0,
 CUDA_C_32F= 4,
 CUDA_R_64F= 1,
 CUDA_C_64F= 5,
 CUDA_R_8I = 3,
 CUDA_C_8I = 7,
 CUDA_R_8U = 8,
 CUDA_C_8U = 9,
 CUDA_R_32I= 10,
 CUDA_C_32I= 11,
 CUDA_R_32U= 12,
 CUDA_C_32U= 13
} cudaDataType;


typedef enum libraryPropertyType_t
{
 MAJOR_VERSION,
 MINOR_VERSION,
 PATCH_LEVEL
} libraryPropertyType;
# 88 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2


# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/channel_descriptor.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/channel_descriptor.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h" 1
# 134 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 135 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h" 2


# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h" 1
# 138 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h" 2
# 219 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern "C" {
# 252 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceReset(void);
# 269 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceSynchronize(void);
# 344 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value);
# 373 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
# 404 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 439 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 481 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);
# 510 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
# 552 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);
# 575 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);
# 602 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);
# 644 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);
# 679 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);
# 717 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);
# 767 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
# 797 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcCloseMemHandle(void *devPtr);
# 837 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadExit(void);
# 861 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSynchronize(void);
# 908 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value);
# 939 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);
# 974 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 1020 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);
# 1074 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetLastError(void);
# 1115 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaPeekAtLastError(void);
# 1130 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorName(cudaError_t error);
# 1145 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorString(cudaError_t error);
# 1175 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceCount(int *count);
# 1421 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
# 1593 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
# 1628 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);
# 1647 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
# 1681 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDevice(int device);
# 1698 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDevice(int *device);
# 1727 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetValidDevices(int *device_arr, int len);
# 1789 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDeviceFlags( unsigned int flags );
# 1830 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetDeviceFlags( unsigned int *flags );
# 1867 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamCreate(cudaStream_t *pStream);
# 1896 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
# 1939 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);
# 1963 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority);
# 1984 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);
# 2005 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 2037 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
# 2051 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
typedef void ( *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
# 2108 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);
# 2128 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 2149 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamQuery(cudaStream_t stream);
# 2220 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);
# 2256 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventCreate(cudaEvent_t *event);
# 2290 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
# 2321 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);
# 2353 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventQuery(cudaEvent_t event);
# 2385 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 2410 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventDestroy(cudaEvent_t event);
# 2451 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
# 2510 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
# 2560 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);
# 2614 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);
# 2648 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
# 2671 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForDevice(double *d);
# 2694 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForHost(double *d);
# 2750 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);
# 2794 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 2845 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);
# 2874 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
# 2912 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunch(const void *func);
# 3030 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);
# 3056 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(void **devPtr, size_t size);
# 3085 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocHost(void **ptr, size_t size);
# 3124 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
# 3166 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);
# 3193 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFree(void *devPtr);
# 3213 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeHost(void *ptr);
# 3235 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeArray(cudaArray_t array);
# 3257 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);
# 3316 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
# 3393 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags);
# 3412 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostUnregister(void *ptr);
# 3454 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
# 3473 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);
# 3508 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
# 3643 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
# 3764 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);
# 3790 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);
# 3890 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
# 3918 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);
# 4029 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);
# 4052 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);
# 4071 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
# 4092 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);
# 4130 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4162 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
# 4200 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4237 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
# 4275 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4320 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4366 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4412 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4455 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4493 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);
# 4531 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
# 4582 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4614 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);
# 4660 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4705 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4765 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4820 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4874 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4920 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4966 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4992 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset(void *devPtr, int value, size_t count);
# 5022 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);
# 5065 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
# 5097 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);
# 5134 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
# 5184 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);
# 5207 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol);
# 5229 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol);
# 5296 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);
# 5382 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);
# 5438 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);
# 5474 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);
# 5627 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);
# 5665 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);
# 5704 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);
# 5723 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 5783 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 5815 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);
# 5851 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5883 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5912 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
# 5946 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
# 5971 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);
# 6011 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);
# 6046 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);
# 6093 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 
# 6093 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h" 3 4
                                                                                                                                                                                      (0x7fffffff * 2U + 1U)
# 6093 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
                                                                                                                                                                                                    );
# 6144 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
# 6172 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 6200 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);
# 6221 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaUnbindTexture(const struct textureReference *texref);
# 6246 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
# 6271 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureReference(const struct textureReference **texref, const void *symbol);
# 6311 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 6330 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);
# 6556 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);
# 6571 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject);
# 6587 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);
# 6603 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
# 6620 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);
# 6659 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);
# 6674 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);
# 6689 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);
# 6716 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDriverGetVersion(int *driverVersion);
# 6733 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);




extern __attribute__((host)) cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);
# 6964 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
}
# 63 "/usr/local/cuda/bin/../targets/x86_64-linux/include/channel_descriptor.h" 2
# 107 "/usr/local/cuda/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template<class T> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;




  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);

}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}
# 379 "/usr/local/cuda/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}
# 91 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2

# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_functions.h" 1
# 53 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 54 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_functions.h" 2
# 79 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
{
  struct cudaPitchedPtr s;

  s.ptr = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
# 106 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z)
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
# 132 "/usr/local/cuda/bin/../targets/x86_64-linux/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
{
  struct cudaExtent e;

  e.width = w;
  e.height = h;
  e.depth = d;

  return e;
}
# 93 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2



# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.h" 1
# 59 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 60 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.h" 2
# 176 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.hpp" 1
# 59 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.hpp"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 60 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.hpp" 2
# 75 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.hpp"
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z)
{
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}
# 177 "/usr/local/cuda/bin/../targets/x86_64-linux/include/vector_functions.h" 2
# 97 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 116 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 2



# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4

# 27 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 160 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 377 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 635 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string3.h" 1 3 4
# 49 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) throw ()
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 77 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) throw ()
{
# 90 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) throw ()
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) throw ()
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) throw ();
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) throw () __asm__ ("" "stpncpy")
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char *__dest, const char *__src, size_t __n) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 636 "/usr/include/string.h" 2 3 4
# 648 "/usr/include/string.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
__mempcpy_inline (void *__restrict __dest,
    const void *__restrict __src, size_t __n)
{
  return (char *) memcpy (__dest, __src, __n) + __n;
}




}
# 66 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 27 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4



struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 88 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 42 "/usr/include/time.h" 2 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };








struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;





typedef __pid_t pid_t;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 2


# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
extern "C"
{

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) clock_t clock(void) 
# 71 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 3 4
                                                                                                    throw ()
# 71 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
                                                                                                           ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memset(void*, int, size_t) 
# 72 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 3 4
                                                                                                                   throw ()
# 72 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
                                                                                                                          ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memcpy(void*, const void*, size_t) 
# 73 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 3 4
                                                                                                                           throw ()
# 73 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
                                                                                                                                  ;

}
# 91 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
# 1 "/usr/include/c++/5/new" 1 3
# 37 "/usr/include/c++/5/new" 3
       
# 38 "/usr/include/c++/5/new" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 1 3
# 194 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3

# 194 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;




}
# 216 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 482 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/os_defines.h" 1 3
# 483 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/cpu_defines.h" 1 3
# 486 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 2 3
# 40 "/usr/include/c++/5/new" 2 3
# 1 "/usr/include/c++/5/exception" 1 3
# 33 "/usr/include/c++/5/exception" 3
       
# 34 "/usr/include/c++/5/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 1 3
# 33 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 3
       
# 34 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 3
# 39 "/usr/include/c++/5/exception" 2 3

extern "C++" {

namespace std
{
# 60 "/usr/include/c++/5/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();
# 102 "/usr/include/c++/5/exception" 3
  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();
# 114 "/usr/include/c++/5/exception" 3
  void unexpected() __attribute__ ((__noreturn__));
# 127 "/usr/include/c++/5/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 152 "/usr/include/c++/5/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 41 "/usr/include/c++/5/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };
# 82 "/usr/include/c++/5/new" 3
  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();





}
# 111 "/usr/include/c++/5/new" 3
void* operator new(std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void operator delete(void*) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*) throw()
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) throw()
{ return __p; }
inline void* operator new[](std::size_t, void* __p) throw()
{ return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 92 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 2
# 105 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"

# 105 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*, void*) throw();







# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4

# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 521 "/usr/include/libio.h" 3 4
}
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) throw () __attribute__ ((__warn_unused_result__));





extern char *tmpnam_r (char *__s) throw () __attribute__ ((__warn_unused_result__));
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 295 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) throw () __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () __attribute__ ((__warn_unused_result__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__warn_unused_result__)) __attribute__ ((__deprecated__));


# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) throw ();
# 933 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 934 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) throw ();
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) throw ()
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) throw ();
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) throw ()

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) throw ()

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 206 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 241 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 937 "/usr/include/stdio.h" 2 3 4





}
# 117 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () __attribute__ ((__warn_unused_result__));




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

# 239 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 136 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;







# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 54 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 129 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


}
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__leaf__)) gnu_dev_major (unsigned long long int __dev) throw ()
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__leaf__)) gnu_dev_minor (unsigned long long int __dev) throw ()
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
__attribute__ ((__leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}

}
# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 629 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 651 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 673 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 683 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 693 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 705 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));









extern int system (const char *__command) __attribute__ ((__warn_unused_result__));






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 760 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}

# 955 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) throw () __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) throw () __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) throw () __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved) throw ()
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {

      if (__builtin_object_size (__resolved, 2 > 1) < 4096)
 return __realpath_chk_warn (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));

      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  throw () __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) throw () __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char *__s, wchar_t __wchar) throw ()
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw () __asm__ ("" "mbstowcs")


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw () __asm__ ("" "wcstombs")


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 959 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4
}
# 118 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 2






# 123 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
extern "C"
{
extern



__attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int printf(const char*, ...);

extern



__attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int fprintf(FILE*, const char*, ...);


extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* malloc(size_t) 
# 138 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 3 4
                                                                                    throw ()
# 138 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
                                                                                           ;
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void free(void*) 
# 139 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 3 4
                                                                                 throw ()
# 139 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
                                                                                        ;

}





# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4

# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 148 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 2



# 150 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
extern "C"
{
# 171 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void __assert_fail(
  const char *, const char *, unsigned int, const char *)
  
# 173 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 3 4
 throw ()
# 173 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
        ;




}
# 222 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t) throw(std:: bad_alloc);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t) throw(std:: bad_alloc);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*) throw();
# 249 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 1
# 83 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 84 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 2
# 93 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern "C"
{
# 164 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int abs(int) 
# 164 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                      throw ()
# 164 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                             ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long int labs(long int) 
# 165 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                            throw ()
# 165 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                   ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long long int llabs(long long int) 
# 166 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                                  throw ()
# 166 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                         ;
# 216 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fabs(double x) 
# 216 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 216 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 257 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fabsf(float x) 
# 257 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 257 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;



extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int min(int, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umin(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmin(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmin(unsigned long long int, unsigned long long int);
# 286 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fminf(float x, float y) 
# 286 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 286 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 306 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmin(double x, double y) 
# 306 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                   throw ()
# 306 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                          ;






extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int max(int, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umax(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmax(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmax(unsigned long long int, unsigned long long int);
# 338 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaxf(float x, float y) 
# 338 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 338 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 358 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmax(double, double) 
# 358 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                               throw ()
# 358 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                      ;
# 402 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sin(double x) 
# 402 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 402 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 435 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cos(double x) 
# 435 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 435 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 454 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincos(double x, double *sptr, double *cptr) 
# 454 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                                       throw ()
# 454 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                              ;
# 470 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincosf(float x, float *sptr, float *cptr) 
# 470 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                                     throw ()
# 470 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                            ;
# 515 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tan(double x) 
# 515 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 515 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sqrt(double x) 
# 584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 656 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rsqrt(double x);
# 726 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rsqrtf(float x);
# 782 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log2(double x) 
# 782 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 782 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 807 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp2(double x) 
# 807 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 807 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 832 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp2f(float x) 
# 832 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 832 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 859 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp10(double x) 
# 859 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 859 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 882 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp10f(float x) 
# 882 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 882 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 928 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double expm1(double x) 
# 928 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 928 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 973 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expm1f(float x) 
# 973 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 973 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1028 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log2f(float x) 
# 1028 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 1028 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 1082 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log10(double x) 
# 1082 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1082 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1153 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log(double x) 
# 1153 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 1153 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 1247 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log1p(double x) 
# 1247 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1247 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1344 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log1pf(float x) 
# 1344 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1344 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1419 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double floor(double x) 
# 1419 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                     throw ()
# 1419 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                            ;
# 1458 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp(double x) 
# 1458 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 1458 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 1489 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cosh(double x) 
# 1489 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 1489 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 1519 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinh(double x) 
# 1519 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 1519 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 1549 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tanh(double x) 
# 1549 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 1549 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 1584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acosh(double x) 
# 1584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1622 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acoshf(float x) 
# 1622 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1622 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1638 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asinh(double x) 
# 1638 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1638 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1654 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinhf(float x) 
# 1654 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1654 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1708 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atanh(double x) 
# 1708 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1708 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1762 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanhf(float x) 
# 1762 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 1762 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 1821 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ldexp(double x, int exp) 
# 1821 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                              throw ()
# 1821 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                     ;
# 1877 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ldexpf(float x, int exp) 
# 1877 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                   throw ()
# 1877 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                          ;
# 1929 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double logb(double x) 
# 1929 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 1929 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 1984 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logbf(float x) 
# 1984 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 1984 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 2014 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogb(double x) 
# 2014 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 2014 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 2044 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogbf(float x) 
# 2044 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 2044 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 2120 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbn(double x, int n) 
# 2120 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 2120 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 2196 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalbnf(float x, int n) 
# 2196 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 2196 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 2272 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbln(double x, long int n) 
# 2272 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                        throw ()
# 2272 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                               ;
# 2348 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalblnf(float x, long int n) 
# 2348 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                        throw ()
# 2348 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                               ;
# 2426 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double frexp(double x, int *nptr) 
# 2426 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                                throw ()
# 2426 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                       ;
# 2501 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float frexpf(float x, int *nptr) 
# 2501 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                     throw ()
# 2501 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                            ;
# 2515 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double round(double x) 
# 2515 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 2515 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 2532 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float roundf(float x) 
# 2532 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 2532 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 2550 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lround(double x) 
# 2550 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 2550 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 2568 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lroundf(float x) 
# 2568 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 2568 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 2586 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llround(double x) 
# 2586 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                            throw ()
# 2586 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                   ;
# 2604 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llroundf(float x) 
# 2604 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                            throw ()
# 2604 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                   ;
# 2640 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rint(double x) 
# 2640 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 2640 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 2656 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rintf(float x) 
# 2656 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 2656 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 2672 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrint(double x) 
# 2672 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 2672 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 2688 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrintf(float x) 
# 2688 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 2688 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 2704 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrint(double x) 
# 2704 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 2704 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 2720 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrintf(float x) 
# 2720 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 2720 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 2773 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nearbyint(double x) 
# 2773 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                              throw ()
# 2773 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                     ;
# 2826 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nearbyintf(float x) 
# 2826 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                              throw ()
# 2826 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                     ;
# 2888 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ceil(double x) 
# 2888 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                    throw ()
# 2888 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                           ;
# 2900 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double trunc(double x) 
# 2900 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 2900 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 2915 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float truncf(float x) 
# 2915 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 2915 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 2941 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fdim(double x, double y) 
# 2941 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                   throw ()
# 2941 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                          ;
# 2967 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fdimf(float x, float y) 
# 2967 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 2967 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 3003 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan2(double y, double x) 
# 3003 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                    throw ()
# 3003 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                           ;
# 3034 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan(double x) 
# 3034 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 3034 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 3057 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acos(double x) 
# 3057 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 3057 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 3089 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asin(double x) 
# 3089 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 3089 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 3135 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double hypot(double x, double y) 
# 3135 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                              throw ()
# 3135 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                     ;
# 3187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rhypot(double x, double y) 
# 3187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                    throw ()
# 3187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                           ;
# 3233 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float hypotf(float x, float y) 
# 3233 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                            throw ()
# 3233 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                   ;
# 3285 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rhypotf(float x, float y) 
# 3285 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                   throw ()
# 3285 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                          ;
# 3332 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm3d(double a, double b, double c) 
# 3332 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                                          throw ()
# 3332 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                                 ;
# 3383 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm3d(double a, double b, double c) 
# 3383 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                               throw ()
# 3383 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                      ;
# 3432 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm4d(double a, double b, double c, double d) 
# 3432 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                                                    throw ()
# 3432 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                                           ;
# 3488 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm4d(double a, double b, double c, double d) 
# 3488 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                          throw ()
# 3488 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                 ;
# 3533 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm(int dim, double const * t) 
# 3533 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 3533 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 3584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm(int dim, double const * t) 
# 3584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 3584 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 3636 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnormf(int dim, float const * a) 
# 3636 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 3636 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 3680 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normf(int dim, float const * a) 
# 3680 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 3680 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 3725 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float norm3df(float a, float b, float c) 
# 3725 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                            throw ()
# 3725 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                   ;
# 3776 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnorm3df(float a, float b, float c) 
# 3776 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                             throw ()
# 3776 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                    ;
# 3825 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float norm4df(float a, float b, float c, float d) 
# 3825 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                     throw ()
# 3825 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                            ;
# 3881 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnorm4df(float a, float b, float c, float d) 
# 3881 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                      throw ()
# 3881 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                             ;
# 3965 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cbrt(double x) 
# 3965 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 3965 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 4051 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cbrtf(float x) 
# 4051 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 4051 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 4106 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rcbrt(double x);
# 4156 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rcbrtf(float x);
# 4216 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinpi(double x);
# 4276 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinpif(float x);
# 4328 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cospi(double x);
# 4380 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cospif(float x);
# 4410 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospi(double x, double *sptr, double *cptr);
# 4440 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospif(float x, float *sptr, float *cptr);
# 4752 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double pow(double x, double y) 
# 4752 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 4752 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 4808 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double modf(double x, double *iptr) 
# 4808 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                                  throw ()
# 4808 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                         ;
# 4867 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmod(double x, double y) 
# 4867 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                   throw ()
# 4867 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                          ;
# 4953 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remainder(double x, double y) 
# 4953 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                        throw ()
# 4953 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                               ;
# 5043 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remainderf(float x, float y) 
# 5043 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                       throw ()
# 5043 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                              ;
# 5097 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remquo(double x, double y, int *quo) 
# 5097 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                               throw ()
# 5097 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                      ;
# 5151 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remquof(float x, float y, int *quo) 
# 5151 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                              throw ()
# 5151 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                     ;
# 5192 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j0(double x) 
# 5192 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5192 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 5234 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j0f(float x) 
# 5234 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                       throw ()
# 5234 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                              ;
# 5295 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j1(double x) 
# 5295 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5295 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 5356 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j1f(float x) 
# 5356 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                       throw ()
# 5356 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                              ;
# 5399 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double jn(int n, double x) 
# 5399 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                         throw ()
# 5399 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                ;
# 5442 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float jnf(int n, float x) 
# 5442 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                              throw ()
# 5442 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                     ;
# 5494 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y0(double x) 
# 5494 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5494 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 5546 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y0f(float x) 
# 5546 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                       throw ()
# 5546 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                              ;
# 5598 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y1(double x) 
# 5598 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5598 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 5650 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y1f(float x) 
# 5650 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                       throw ()
# 5650 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                              ;
# 5703 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double yn(int n, double x) 
# 5703 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                         throw ()
# 5703 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                ;
# 5756 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ynf(int n, float x) 
# 5756 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                              throw ()
# 5756 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                     ;
# 5783 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i0(double x) 
# 5783 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                             throw ()
# 5783 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                    ;
# 5809 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i0f(float x) 
# 5809 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5809 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 5836 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i1(double x) 
# 5836 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                             throw ()
# 5836 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                    ;
# 5862 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i1f(float x) 
# 5862 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5862 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 5945 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erf(double x) 
# 5945 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 5945 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 6027 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erff(float x) 
# 6027 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 6027 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 6091 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfinv(double y);
# 6148 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfinvf(float y);
# 6187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfc(double x) 
# 6187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 6187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 6225 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcf(float x) 
# 6225 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 6225 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 6353 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double lgamma(double x) 
# 6353 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 6353 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 6416 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcinv(double y);
# 6472 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcinvf(float y);
# 6530 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdfinv(double y);
# 6588 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdfinvf(float y);
# 6631 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdf(double y);
# 6674 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdff(float y);
# 6749 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcx(double x);
# 6824 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcxf(float x);
# 6958 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float lgammaf(float x) 
# 6958 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 6958 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 7067 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tgamma(double x) 
# 7067 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 7067 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 7176 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tgammaf(float x) 
# 7176 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 7176 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
# 7189 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double copysign(double x, double y) 
# 7189 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                       throw ()
# 7189 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                              ;
# 7202 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float copysignf(float x, float y) 
# 7202 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                      throw ()
# 7202 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                             ;
# 7239 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nextafter(double x, double y) 
# 7239 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                        throw ()
# 7239 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                               ;
# 7276 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nextafterf(float x, float y) 
# 7276 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                       throw ()
# 7276 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                              ;
# 7292 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nan(const char *tagp) 
# 7292 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                throw ()
# 7292 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                       ;
# 7308 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nanf(const char *tagp) 
# 7308 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                 throw ()
# 7308 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                        ;






extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinff(float) 
# 7315 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 7315 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanf(float) 
# 7316 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 7316 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 7326 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finite(double) 
# 7326 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 7326 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitef(float) 
# 7327 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                           throw ()
# 7327 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                  ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbit(double) 
# 7328 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                            throw ()
# 7328 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                   ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnan(double) 
# 7329 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 7329 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinf(double) 
# 7330 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 7330 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;


extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitf(float) 
# 7333 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                            throw ()
# 7333 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                   ;
# 7492 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fma(double x, double y, double z) 
# 7492 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                            throw ()
# 7492 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                   ;
# 7650 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaf(float x, float y, float z) 
# 7650 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                          throw ()
# 7650 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                                 ;
# 7661 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitl(long double) 
# 7661 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 7661 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;





extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitel(long double) 
# 7667 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                 throw ()
# 7667 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                        ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinfl(long double) 
# 7668 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                throw ()
# 7668 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                       ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanl(long double) 
# 7669 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                throw ()
# 7669 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                       ;
# 7719 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acosf(float x) 
# 7719 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 7719 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 7759 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinf(float x) 
# 7759 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 7759 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 7799 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanf(float x) 
# 7799 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 7799 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 7832 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atan2f(float y, float x) 
# 7832 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                   throw ()
# 7832 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                          ;
# 7856 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cosf(float x) 
# 7856 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 7856 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 7898 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinf(float x) 
# 7898 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 7898 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 7940 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanf(float x) 
# 7940 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 7940 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 7964 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float coshf(float x) 
# 7964 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 7964 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 8005 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinhf(float x) 
# 8005 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 8005 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 8035 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanhf(float x) 
# 8035 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 8035 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 8086 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logf(float x) 
# 8086 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 8086 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 8136 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expf(float x) 
# 8136 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                        throw ()
# 8136 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                               ;
# 8187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log10f(float x) 
# 8187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 8187 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 8242 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float modff(float x, float *iptr) 
# 8242 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                      throw ()
# 8242 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                             ;
# 8550 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float powf(float x, float y) 
# 8550 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                 throw ()
# 8550 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                        ;
# 8619 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sqrtf(float x) 
# 8619 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 8619 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 8678 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ceilf(float x) 
# 8678 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                         throw ()
# 8678 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                ;
# 8750 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float floorf(float x) 
# 8750 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                          throw ()
# 8750 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                 ;
# 8809 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmodf(float x, float y) 
# 8809 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 3 4
                                                                                                  throw ()
# 8809 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
                                                                                                         ;
# 8823 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
}



# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4

# 28 "/usr/include/math.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 32 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 45 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 49 "/usr/include/math.h" 2 3 4
# 83 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                        ;





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));








extern int isinf (double __value) throw () __attribute__ ((__const__));



extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));






extern int isnan (double __value) throw () __attribute__ ((__const__));





extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));






extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 84 "/usr/include/math.h" 2 3 4
# 104 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ()
                                                        ;





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));








extern int isinff (float __value) throw () __attribute__ ((__const__));



extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));






extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));






extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 105 "/usr/include/math.h" 2 3 4
# 151 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                        ;





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));








extern int isinfl (long double __value) throw () __attribute__ ((__const__));



extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));






extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));






extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 152 "/usr/include/math.h" 2 3 4
# 168 "/usr/include/math.h" 3 4
extern int signgam;
# 209 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 347 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 370 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 472 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 1 3 4
# 123 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3 4



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbitf (float __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x8) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbit (double __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x80) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbitl (long double __x) throw ()
{
  __extension__ union { long double __l; int __i[3]; } __u = { __l: __x };
  return (__u.__i[2] & 0x8000) != 0;
}


# 473 "/usr/include/math.h" 2 3 4
# 534 "/usr/include/math.h" 3 4
}
# 8828 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 2



# 1 "/usr/include/c++/5/cmath" 1 3
# 39 "/usr/include/c++/5/cmath" 3
       
# 40 "/usr/include/c++/5/cmath" 3


# 1 "/usr/include/c++/5/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
# 68 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 199 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 270 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 287 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 443 "/usr/include/c++/5/bits/cpp_type_traits.h" 3

}
# 43 "/usr/include/c++/5/cmath" 2 3
# 1 "/usr/include/c++/5/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/5/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/5/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }
# 165 "/usr/include/c++/5/ext/type_traits.h" 3
  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 44 "/usr/include/c++/5/cmath" 2 3
# 75 "/usr/include/c++/5/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }



  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 555 "/usr/include/c++/5/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 831 "/usr/include/c++/5/cmath" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(0, 1, 4,
      3, 2, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return sizeof(__type) == sizeof(float)
 ? __builtin_signbitf(__type(__f))
 : sizeof(__type) == sizeof(double)
 ? __builtin_signbit(__type(__f))
 : __builtin_signbitl(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 8832 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 2
# 1 "/usr/include/c++/5/cstdlib" 1 3
# 39 "/usr/include/c++/5/cstdlib" 3
       
# 40 "/usr/include/c++/5/cstdlib" 3
# 114 "/usr/include/c++/5/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }



  inline __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 195 "/usr/include/c++/5/cstdlib" 3

}
# 209 "/usr/include/c++/5/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 241 "/usr/include/c++/5/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 8833 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 2
# 8925 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"

# 8925 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(double x) throw();

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(double x) throw();

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(long double x);
# 9002 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
namespace std
{
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __pow_helper(T, int);
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __cmath_power(T, unsigned int);
}

using std::abs;
using std::fabs;
using std::ceil;
using std::floor;
using std::sqrt;
using std::pow;
using std::log;
using std::log10;
using std::fmod;
using std::modf;
using std::exp;
using std::frexp;
using std::ldexp;
using std::asin;
using std::sin;
using std::sinh;
using std::acos;
using std::cos;
using std::cosh;
using std::atan;
using std::atan2;
using std::tan;
using std::tanh;
# 9393 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
namespace std {
# 9406 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int abs(long long int);





extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int abs(long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float abs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double abs(double);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fabs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ceil(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float floor(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sqrt(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float pow(float, float);
# 9428 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float pow(float, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double pow(double, int);




extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log10(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fmod(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float modf(float, float*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float exp(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float frexp(float, int*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ldexp(float, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float asin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sinh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float acos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cosh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan2(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tanh(float);
# 9518 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
}
# 9609 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
static inline __attribute__((host)) __attribute__((device)) float logb(float a);

static inline __attribute__((host)) __attribute__((device)) int ilogb(float a);

static inline __attribute__((host)) __attribute__((device)) float scalbn(float a, int b);

static inline __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b);

static inline __attribute__((host)) __attribute__((device)) float exp2(float a);

static inline __attribute__((host)) __attribute__((device)) float expm1(float a);

static inline __attribute__((host)) __attribute__((device)) float log2(float a);

static inline __attribute__((host)) __attribute__((device)) float log1p(float a);

static inline __attribute__((host)) __attribute__((device)) float acosh(float a);

static inline __attribute__((host)) __attribute__((device)) float asinh(float a);

static inline __attribute__((host)) __attribute__((device)) float atanh(float a);

static inline __attribute__((host)) __attribute__((device)) float hypot(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float norm3d(float a, float b, float c);

static inline __attribute__((host)) __attribute__((device)) float norm4d(float a, float b, float c, float d);

static inline __attribute__((host)) __attribute__((device)) float cbrt(float a);

static inline __attribute__((host)) __attribute__((device)) float erf(float a);

static inline __attribute__((host)) __attribute__((device)) float erfc(float a);

static inline __attribute__((host)) __attribute__((device)) float lgamma(float a);

static inline __attribute__((host)) __attribute__((device)) float tgamma(float a);

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float nextafter(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float remainder(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo);

static inline __attribute__((host)) __attribute__((device)) float round(float a);

static inline __attribute__((host)) __attribute__((device)) long int lround(float a);

static inline __attribute__((host)) __attribute__((device)) long long int llround(float a);

static inline __attribute__((host)) __attribute__((device)) float trunc(float a);

static inline __attribute__((host)) __attribute__((device)) float rint(float a);

static inline __attribute__((host)) __attribute__((device)) long int lrint(float a);

static inline __attribute__((host)) __attribute__((device)) long long int llrint(float a);

static inline __attribute__((host)) __attribute__((device)) float nearbyint(float a);

static inline __attribute__((host)) __attribute__((device)) float fdim(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c);

static inline __attribute__((host)) __attribute__((device)) float fmax(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float fmin(float a, float b);
# 9718 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
static inline __attribute__((host)) __attribute__((device)) float exp10(float a);

static inline __attribute__((host)) __attribute__((device)) float rsqrt(float a);

static inline __attribute__((host)) __attribute__((device)) float rcbrt(float a);

static inline __attribute__((host)) __attribute__((device)) float sinpi(float a);

static inline __attribute__((host)) __attribute__((device)) float cospi(float a);

static inline __attribute__((host)) __attribute__((device)) void sincospi(float a, float *sptr, float *cptr);

static inline __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr);

static inline __attribute__((host)) __attribute__((device)) float j0(float a);

static inline __attribute__((host)) __attribute__((device)) float j1(float a);

static inline __attribute__((host)) __attribute__((device)) float jn(int n, float a);

static inline __attribute__((host)) __attribute__((device)) float y0(float a);

static inline __attribute__((host)) __attribute__((device)) float y1(float a);

static inline __attribute__((host)) __attribute__((device)) float yn(int n, float a);

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i0(float a);

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i1(float a);

static inline __attribute__((host)) __attribute__((device)) float erfinv(float a);

static inline __attribute__((host)) __attribute__((device)) float erfcinv(float a);

static inline __attribute__((host)) __attribute__((device)) float normcdfinv(float a);

static inline __attribute__((host)) __attribute__((device)) float normcdf(float a);

static inline __attribute__((host)) __attribute__((device)) float erfcx(float a);

static inline __attribute__((host)) __attribute__((device)) double copysign(double a, float b);

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, double b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b);

static inline __attribute__((host)) __attribute__((device)) long int min(long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) float min(float a, float b);

static inline __attribute__((host)) __attribute__((device)) double min(double a, double b);

static inline __attribute__((host)) __attribute__((device)) double min(float a, double b);

static inline __attribute__((host)) __attribute__((device)) double min(double a, float b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b);

static inline __attribute__((host)) __attribute__((device)) long int max(long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) float max(float a, float b);

static inline __attribute__((host)) __attribute__((device)) double max(double a, double b);

static inline __attribute__((host)) __attribute__((device)) double max(float a, double b);

static inline __attribute__((host)) __attribute__((device)) double max(double a, float b);
# 10327 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.hpp" 1
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.hpp"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.hpp" 2
# 248 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(float x) { return __signbitf(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(double x) { return __signbit(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(long double x) { return __signbitl(x);}
# 265 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(float x) { return __finitef(x); }
# 280 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(double x) { return __finite(x); }
# 293 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(long double x) { return __finitel(x); }


__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(float x) { return __isnanf(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(double x) throw() { return __isnan(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(long double x) { return __isnanl(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(float x) { return __isinff(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(double x) throw() { return __isinf(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(long double x) { return __isinfl(x); }
# 503 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.hpp"
static inline __attribute__((host)) __attribute__((device)) float logb(float a)
{
  return logbf(a);
}

static inline __attribute__((host)) __attribute__((device)) int ilogb(float a)
{
  return ilogbf(a);
}

static inline __attribute__((host)) __attribute__((device)) float scalbn(float a, int b)
{
  return scalbnf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b)
{
  return scalblnf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float exp2(float a)
{
  return exp2f(a);
}

static inline __attribute__((host)) __attribute__((device)) float expm1(float a)
{
  return expm1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float log2(float a)
{
  return log2f(a);
}

static inline __attribute__((host)) __attribute__((device)) float log1p(float a)
{
  return log1pf(a);
}

static inline __attribute__((host)) __attribute__((device)) float acosh(float a)
{
  return acoshf(a);
}

static inline __attribute__((host)) __attribute__((device)) float asinh(float a)
{
  return asinhf(a);
}

static inline __attribute__((host)) __attribute__((device)) float atanh(float a)
{
  return atanhf(a);
}

static inline __attribute__((host)) __attribute__((device)) float hypot(float a, float b)
{
  return hypotf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float norm3d(float a, float b, float c)
{
  return norm3df(a, b, c);
}

static inline __attribute__((host)) __attribute__((device)) float norm4d(float a, float b, float c, float d)
{
  return norm4df(a, b, c, d);
}

static inline __attribute__((host)) __attribute__((device)) float cbrt(float a)
{
  return cbrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float erf(float a)
{
  return erff(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfc(float a)
{
  return erfcf(a);
}

static inline __attribute__((host)) __attribute__((device)) float lgamma(float a)
{
  return lgammaf(a);
}

static inline __attribute__((host)) __attribute__((device)) float tgamma(float a)
{
  return tgammaf(a);
}

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, float b)
{
  return copysignf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float nextafter(float a, float b)
{
  return nextafterf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float remainder(float a, float b)
{
  return remainderf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo)
{
  return remquof(a, b, quo);
}

static inline __attribute__((host)) __attribute__((device)) float round(float a)
{
  return roundf(a);
}

static inline __attribute__((host)) __attribute__((device)) long int lround(float a)
{
  return lroundf(a);
}

static inline __attribute__((host)) __attribute__((device)) long long int llround(float a)
{
  return llroundf(a);
}

static inline __attribute__((host)) __attribute__((device)) float trunc(float a)
{
  return truncf(a);
}

static inline __attribute__((host)) __attribute__((device)) float rint(float a)
{
  return rintf(a);
}

static inline __attribute__((host)) __attribute__((device)) long int lrint(float a)
{
  return lrintf(a);
}

static inline __attribute__((host)) __attribute__((device)) long long int llrint(float a)
{
  return llrintf(a);
}

static inline __attribute__((host)) __attribute__((device)) float nearbyint(float a)
{
  return nearbyintf(a);
}

static inline __attribute__((host)) __attribute__((device)) float fdim(float a, float b)
{
  return fdimf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c)
{
  return fmaf(a, b, c);
}

static inline __attribute__((host)) __attribute__((device)) float fmax(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float fmin(float a, float b)
{
  return fminf(a, b);
}




static inline __attribute__((host)) __attribute__((device)) float exp10(float a)
{
  return exp10f(a);
}

static inline __attribute__((host)) __attribute__((device)) float rsqrt(float a)
{
  return rsqrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float rcbrt(float a)
{
  return rcbrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float sinpi(float a)
{
  return sinpif(a);
}

static inline __attribute__((host)) __attribute__((device)) float cospi(float a)
{
  return cospif(a);
}

static inline __attribute__((host)) __attribute__((device)) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __attribute__((host)) __attribute__((device)) float j0(float a)
{
  return j0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float j1(float a)
{
  return j1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float jn(int n, float a)
{
  return jnf(n, a);
}

static inline __attribute__((host)) __attribute__((device)) float y0(float a)
{
  return y0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float y1(float a)
{
  return y1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float yn(int n, float a)
{
  return ynf(n, a);
}

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfinv(float a)
{
  return erfinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfcinv(float a)
{
  return erfcinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float normcdf(float a)
{
  return normcdff(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfcx(float a)
{
  return erfcxf(a);
}

static inline __attribute__((host)) __attribute__((device)) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static inline __attribute__((host)) __attribute__((device)) long int min(long int a, long int b)
{





  if (sizeof(long int) == sizeof(int)) {



    return (long int)min((int)a, (int)b);
  } else {
    return (long int)llmin((long long int)a, (long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static inline __attribute__((host)) __attribute__((device)) float min(float a, float b)
{
  return fminf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(double a, double b)
{
  return fmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(float a, double b)
{
  return fmin((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static inline __attribute__((host)) __attribute__((device)) long int max(long int a, long int b)
{




  if (sizeof(long int) == sizeof(int)) {



    return (long int)max((int)a, (int)b);
  } else {
    return (long int)llmax((long long int)a, (long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static inline __attribute__((host)) __attribute__((device)) float max(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(double a, double b)
{
  return fmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(float a, double b)
{
  return fmax((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(double a, float b)
{
  return fmax(a, (double)b);
}
# 10328 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 2



# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions_dbl_ptx3.h" 1
# 270 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions_dbl_ptx3.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions_dbl_ptx3.hpp" 1
# 271 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions_dbl_ptx3.h" 2
# 10332 "/usr/local/cuda/bin/../targets/x86_64-linux/include/math_functions.h" 2
# 250 "/usr/local/cuda/bin/../targets/x86_64-linux/include/common_functions.h" 2
# 117 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_surface_types.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_surface_types.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_surface_types.h" 2
# 77 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_surface_types.h"
template<class T, int dim = 1>
struct __attribute__((device_builtin_surface_type)) surface : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __attribute__((host)) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }

};

template<int dim>
struct __attribute__((device_builtin_surface_type)) surface<void, dim> : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }

};
# 118 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_texture_types.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_texture_types.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_texture_types.h" 2
# 77 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_texture_types.h"
template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __attribute__((device_builtin_texture_type)) texture : public textureReference
{

  __attribute__((host)) texture(int norm = 0,
                   enum cudaTextureFilterMode fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = cudaCreateChannelDesc<T>();
    sRGB = 0;
  }

  __attribute__((host)) texture(int norm,
                   enum cudaTextureFilterMode fMode,
                   enum cudaTextureAddressMode aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = desc;
    sRGB = 0;
  }

};
# 119 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 1
# 80 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 81 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 90 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
extern "C"
{
# 101 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __mulhi(int x, int y);
# 111 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __umulhi(unsigned int x, unsigned int y);
# 121 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __mul64hi(long long int x, long long int y);
# 131 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);
# 140 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int_as_float(int x);
# 149 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float_as_int(float x);
# 158 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint_as_float(unsigned int x);
# 167 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float_as_uint(float x);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __syncthreads(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __prof_trigger(int);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __threadfence(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __threadfence_block(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __trap(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __brkpt(int c = 0);
# 196 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __saturatef(float x);
# 265 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __sad(int x, int y, unsigned int z);
# 333 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __usad(unsigned int x, unsigned int y, unsigned int z);
# 343 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __mul24(int x, int y);
# 353 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __umul24(unsigned int x, unsigned int y);
# 366 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float fdividef(float x, float y);
# 441 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdividef(float x, float y);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) double fdivide(double x, double y);
# 454 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __sinf(float x) 
# 454 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                      throw ()
# 454 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                             ;
# 466 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __cosf(float x) 
# 466 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                      throw ()
# 466 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                             ;
# 480 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __tanf(float x) 
# 480 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                      throw ()
# 480 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                             ;
# 495 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void __sincosf(float x, float *sptr, float *cptr) 
# 495 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                                                   throw ()
# 495 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                                                          ;
# 545 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __expf(float x) 
# 545 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                      throw ()
# 545 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                             ;
# 577 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __exp10f(float x) 
# 577 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                        throw ()
# 577 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                               ;
# 603 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log2f(float x) 
# 603 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                       throw ()
# 603 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                              ;
# 631 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log10f(float x) 
# 631 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                        throw ()
# 631 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                               ;
# 675 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __logf(float x) 
# 675 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                      throw ()
# 675 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                             ;
# 718 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __powf(float x, float y) 
# 718 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 3 4
                                                                                                               throw ()
# 718 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
                                                                                                                      ;
# 727 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rn(float x);
# 736 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rz(float x);
# 745 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_ru(float);
# 754 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rd(float x);
# 763 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rn(float x);
# 772 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rz(float x);
# 781 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_ru(float x);
# 790 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rd(float x);
# 799 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rn(int x);
# 808 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rz(int x);
# 817 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_ru(int x);
# 826 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rd(int x);
# 835 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rn(unsigned int x);
# 844 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rz(unsigned int x);
# 853 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_ru(unsigned int x);
# 862 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rd(unsigned int x);
# 871 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rn(float x);
# 880 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rz(float x);
# 889 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_ru(float x);
# 898 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rd(float x);
# 907 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rn(float x);
# 916 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rz(float x);
# 925 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_ru(float x);
# 934 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rd(float x);
# 943 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rn(long long int x);
# 952 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rz(long long int x);
# 961 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_ru(long long int x);
# 970 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rd(long long int x);
# 979 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rn(unsigned long long int x);
# 988 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rz(unsigned long long int x);
# 997 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_ru(unsigned long long int x);
# 1006 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rd(unsigned long long int x);
# 1015 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned short __float2half_rn(float x);
# 1024 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __half2float(unsigned short x);
# 1036 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rn(float x, float y);
# 1048 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rz(float x, float y);
# 1060 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_ru(float x, float y);
# 1072 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rd(float x, float y);
# 1084 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rn(float x, float y);
# 1096 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rz(float x, float y);
# 1108 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_ru(float x, float y);
# 1120 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rd(float x, float y);
# 1132 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rn(float x, float y);
# 1144 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rz(float x, float y);
# 1156 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_ru(float x, float y);
# 1168 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rd(float x, float y);
# 1321 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rn(float x, float y, float z);
# 1474 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rz(float x, float y, float z);
# 1627 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_ru(float x, float y, float z);
# 1780 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rd(float x, float y, float z);
# 1813 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rn(float x);
# 1846 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rz(float x);
# 1879 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_ru(float x);
# 1912 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rd(float x);
# 1943 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rn(float x);
# 1974 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rz(float x);
# 2005 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_ru(float x);
# 2036 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rd(float x);
# 2075 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frsqrt_rn(float x);
# 2086 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rn(float x, float y);
# 2097 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rz(float x, float y);
# 2108 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_ru(float x, float y);
# 2119 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rd(float x, float y);
# 2128 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __clz(int x);
# 2139 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __ffs(int x);
# 2148 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __popc(unsigned int x);
# 2157 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __brev(unsigned int x);
# 2166 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __clzll(long long int x);
# 2177 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __ffsll(long long int x);
# 2188 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __popcll(unsigned long long int x);
# 2197 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __brevll(unsigned long long int x);
# 2221 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s);
# 2233 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __hadd(int, int);
# 2246 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __rhadd(int, int);
# 2258 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __uhadd(unsigned int, unsigned int);
# 2271 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __urhadd(unsigned int, unsigned int);
# 2281 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __double2int_rz(double);
# 2290 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __double2uint_rz(double);
# 2299 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __double2ll_rz(double);
# 2308 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __double2ull_rz(double);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm0(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm1(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm2(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm3(void);
# 2338 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabs2(unsigned int a);
# 2349 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsss2(unsigned int a);
# 2360 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vadd2(unsigned int a, unsigned int b);
# 2371 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddss2 (unsigned int a, unsigned int b);
# 2381 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddus2 (unsigned int a, unsigned int b);
# 2392 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgs2(unsigned int a, unsigned int b);
# 2403 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgu2(unsigned int a, unsigned int b);
# 2414 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vhaddu2(unsigned int a, unsigned int b);
# 2425 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpeq2(unsigned int a, unsigned int b);
# 2436 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpges2(unsigned int a, unsigned int b);
# 2447 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);
# 2458 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgts2(unsigned int a, unsigned int b);
# 2469 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);
# 2480 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmples2(unsigned int a, unsigned int b);
# 2492 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpleu2(unsigned int a, unsigned int b);
# 2503 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmplts2(unsigned int a, unsigned int b);
# 2514 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpltu2(unsigned int a, unsigned int b);
# 2525 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpne2(unsigned int a, unsigned int b);
# 2536 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);
# 2547 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxs2(unsigned int a, unsigned int b);
# 2558 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxu2(unsigned int a, unsigned int b);
# 2569 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmins2(unsigned int a, unsigned int b);
# 2580 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vminu2(unsigned int a, unsigned int b);
# 2591 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vseteq2(unsigned int a, unsigned int b);
# 2602 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetges2(unsigned int a, unsigned int b);
# 2613 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgeu2(unsigned int a, unsigned int b);
# 2624 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgts2(unsigned int a, unsigned int b);
# 2635 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgtu2(unsigned int a, unsigned int b);
# 2646 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetles2(unsigned int a, unsigned int b);
# 2657 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetleu2(unsigned int a, unsigned int b);
# 2668 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetlts2(unsigned int a, unsigned int b);
# 2679 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetltu2(unsigned int a, unsigned int b);
# 2690 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetne2(unsigned int a, unsigned int b);
# 2701 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsadu2(unsigned int a, unsigned int b);
# 2712 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsub2(unsigned int a, unsigned int b);
# 2723 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubss2 (unsigned int a, unsigned int b);
# 2734 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubus2 (unsigned int a, unsigned int b);
# 2744 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vneg2(unsigned int a);
# 2754 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vnegss2(unsigned int a);
# 2765 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);
# 2776 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsads2(unsigned int a, unsigned int b);
# 2786 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabs4(unsigned int a);
# 2797 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsss4(unsigned int a);
# 2808 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vadd4(unsigned int a, unsigned int b);
# 2819 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddss4 (unsigned int a, unsigned int b);
# 2829 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddus4 (unsigned int a, unsigned int b);
# 2840 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgs4(unsigned int a, unsigned int b);
# 2851 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgu4(unsigned int a, unsigned int b);
# 2862 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vhaddu4(unsigned int a, unsigned int b);
# 2873 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpeq4(unsigned int a, unsigned int b);
# 2884 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpges4(unsigned int a, unsigned int b);
# 2895 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);
# 2906 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgts4(unsigned int a, unsigned int b);
# 2917 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);
# 2928 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmples4(unsigned int a, unsigned int b);
# 2939 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpleu4(unsigned int a, unsigned int b);
# 2950 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmplts4(unsigned int a, unsigned int b);
# 2961 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpltu4(unsigned int a, unsigned int b);
# 2972 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpne4(unsigned int a, unsigned int b);
# 2983 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);
# 2994 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxs4(unsigned int a, unsigned int b);
# 3005 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxu4(unsigned int a, unsigned int b);
# 3016 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmins4(unsigned int a, unsigned int b);
# 3027 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vminu4(unsigned int a, unsigned int b);
# 3038 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vseteq4(unsigned int a, unsigned int b);
# 3049 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetles4(unsigned int a, unsigned int b);
# 3060 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetleu4(unsigned int a, unsigned int b);
# 3071 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetlts4(unsigned int a, unsigned int b);
# 3082 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetltu4(unsigned int a, unsigned int b);
# 3093 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetges4(unsigned int a, unsigned int b);
# 3104 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgeu4(unsigned int a, unsigned int b);
# 3115 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgts4(unsigned int a, unsigned int b);
# 3126 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgtu4(unsigned int a, unsigned int b);
# 3137 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetne4(unsigned int a, unsigned int b);
# 3148 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsadu4(unsigned int a, unsigned int b);
# 3159 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsub4(unsigned int a, unsigned int b);
# 3170 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubss4(unsigned int a, unsigned int b);
# 3181 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubus4(unsigned int a, unsigned int b);
# 3191 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vneg4(unsigned int a);
# 3201 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vnegss4(unsigned int a);
# 3212 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);
# 3223 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int mulhi(int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(unsigned int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(unsigned int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) long long int mul64hi(long long int a, long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(long long int a, unsigned long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(unsigned long long int a, long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int float_as_int(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float int_as_float(int a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int float_as_uint(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float uint_as_float(unsigned int a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float saturate(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int mul24(int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int umul24(unsigned int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __trap() instead."))) void trap(void);


static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __brkpt() instead."))) void brkpt(int c = 0);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __syncthreads() instead."))) void syncthreads(void);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __prof_trigger() instead."))) void prof_trigger(int e);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __threadfence() instead."))) void threadfence(bool global = true);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);
# 4511 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.hpp" 1
# 72 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.hpp"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 73 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.hpp" 2
# 83 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.hpp"
static __inline__ __attribute__((device)) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline__ __attribute__((device)) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline__ __attribute__((device)) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline__ __attribute__((device)) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline__ __attribute__((device)) unsigned int float_as_uint(float a)
{
  return __float_as_uint(a);
}

static __inline__ __attribute__((device)) float uint_as_float(unsigned int a)
{
  return __uint_as_float(a);
}
static __inline__ __attribute__((device)) float saturate(float a)
{
  return __saturatef(a);
}

static __inline__ __attribute__((device)) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline__ __attribute__((device)) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline__ __attribute__((device)) void trap(void)
{
  __trap();
}


static __inline__ __attribute__((device)) void brkpt(int c)
{
  __brkpt(c);
}

static __inline__ __attribute__((device)) void syncthreads(void)
{
  __syncthreads();
}

static __inline__ __attribute__((device)) void prof_trigger(int e)
{
       if (e == 0) __prof_trigger( 0);
  else if (e == 1) __prof_trigger( 1);
  else if (e == 2) __prof_trigger( 2);
  else if (e == 3) __prof_trigger( 3);
  else if (e == 4) __prof_trigger( 4);
  else if (e == 5) __prof_trigger( 5);
  else if (e == 6) __prof_trigger( 6);
  else if (e == 7) __prof_trigger( 7);
  else if (e == 8) __prof_trigger( 8);
  else if (e == 9) __prof_trigger( 9);
  else if (e == 10) __prof_trigger(10);
  else if (e == 11) __prof_trigger(11);
  else if (e == 12) __prof_trigger(12);
  else if (e == 13) __prof_trigger(13);
  else if (e == 14) __prof_trigger(14);
  else if (e == 15) __prof_trigger(15);
}

static __inline__ __attribute__((device)) void threadfence(bool global)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline__ __attribute__((device)) int float2int(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf ? __float2int_ru(a) :
         mode == cudaRoundMinInf ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int float2uint(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf ? __float2uint_ru(a) :
         mode == cudaRoundMinInf ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline__ __attribute__((device)) float int2float(int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline__ __attribute__((device)) float uint2float(unsigned int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}
# 4512 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2


# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.h" 1
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.h" 2
# 78 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicAdd(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicExch(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) float __fAtomicExch(float *address, float val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicMin(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicMax(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicAnd(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicOr(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicXor(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicCAS(int *address, int compare, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);

}
# 111 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
static __inline__ __attribute__((device)) int atomicAdd(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicSub(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicExch(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) float atomicExch(float *address, float val) ;

static __inline__ __attribute__((device)) int atomicMin(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicMax(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicOr(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicXor(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val) ;







# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 160 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.h" 2




extern "C"
{


extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);

extern __attribute__((device)) __attribute__((device_builtin)) int __any(int cond);
extern __attribute__((device)) __attribute__((device_builtin)) int __all(int cond);

}
# 185 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val) ;

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val) ;

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val) ;

static __inline__ __attribute__((device)) bool any(bool cond) ;

static __inline__ __attribute__((device)) bool all(bool cond) ;







# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp" 1
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp" 2
# 76 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp"
static __inline__ __attribute__((device)) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline__ __attribute__((device)) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline__ __attribute__((device)) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline__ __attribute__((device)) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline__ __attribute__((device)) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}







# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 188 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp" 2
# 196 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp"
static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline__ __attribute__((device)) bool all(bool cond)
{
  return (bool)__all((int)cond);
}
# 202 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_atomic_functions.h" 2
# 4515 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h" 1
# 75 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 76 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h" 2




extern "C"
{
# 91 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double_as_longlong(double x);
# 100 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __longlong_as_double(long long int x);
# 257 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rn(double x, double y, double z);
# 414 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rz(double x, double y, double z);
# 571 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_ru(double x, double y, double z);
# 728 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rd(double x, double y, double z);
# 740 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rn(double x, double y);
# 752 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rz(double x, double y);
# 764 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_ru(double x, double y);
# 776 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rd(double x, double y);
# 788 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rn(double x, double y);
# 800 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rz(double x, double y);
# 812 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_ru(double x, double y);
# 824 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rd(double x, double y);
# 836 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rn(double x, double y);
# 848 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rz(double x, double y);
# 860 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_ru(double x, double y);
# 872 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rd(double x, double y);
# 881 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rn(double x);
# 890 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rz(double x);
# 899 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_ru(double x);
# 908 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rd(double x);
# 917 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rn(double x);
# 926 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_ru(double x);
# 935 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rd(double x);
# 944 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rn(double x);
# 953 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_ru(double x);
# 962 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rd(double x);
# 971 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rn(double x);
# 980 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_ru(double x);
# 989 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rd(double x);
# 998 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rn(double x);
# 1007 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_ru(double x);
# 1016 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rd(double x);







extern __attribute__((device)) __attribute__((device_builtin)) double __int2double_rn(int x);







extern __attribute__((device)) __attribute__((device_builtin)) double __uint2double_rn(unsigned int x);
# 1041 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rn(long long int x);
# 1050 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rz(long long int x);
# 1059 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_ru(long long int x);
# 1068 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rd(long long int x);
# 1077 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rn(unsigned long long int x);
# 1086 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rz(unsigned long long int x);
# 1095 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_ru(unsigned long long int x);
# 1104 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rd(unsigned long long int x);
# 1113 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2hiint(double x);
# 1122 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2loint(double x);
# 1132 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __hiloint2double(int hi, int lo);

}
# 1143 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);
# 1195 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.hpp" 1
# 75 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.hpp"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 76 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.hpp" 2
# 85 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.hpp"
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf ? __double2int_ru(a) :
         mode == cudaRoundMinInf ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf ? __double2uint_ru(a) :
         mode == cudaRoundMinInf ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf ? __double2ll_ru(a) :
         mode == cudaRoundMinInf ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf ? __double2ull_ru(a) :
         mode == cudaRoundMinInf ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}
# 1196 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_double_functions.h" 2
# 4516 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h" 1
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h" 2
# 79 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) float __fAtomicAdd(float *address, float val);

}
# 94 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h"
static __inline__ __attribute__((device)) float atomicAdd(float *address, float val) ;







# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.hpp" 1
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.hpp"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.hpp" 2
# 76 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.hpp"
static __inline__ __attribute__((device)) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}
# 103 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h" 2
# 4517 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h" 1
# 124 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.hpp" 1
# 125 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h" 2
# 4518 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_35_atomic_functions.h" 1
# 4519 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h" 1
# 528 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.hpp" 1
# 529 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h" 2
# 4520 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h" 1
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h" 2
# 79 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) void __threadfence_system(void);
# 94 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rn(double x, double y);
# 106 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rz(double x, double y);
# 118 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_ru(double x, double y);
# 130 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rd(double x, double y);
# 164 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rn(double x);
# 198 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rz(double x);
# 232 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_ru(double x);
# 266 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rd(double x);
# 298 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rn(double x);
# 330 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rz(double x);
# 362 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_ru(double x);
# 394 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rd(double x);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __ballot(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_count(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_and(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_or(int);
extern __attribute__((device)) __attribute__((device_builtin)) long long int clock64(void);






extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rn(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rz(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_ru(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rd(float, float, float);
# 421 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double_as_longlong(double x);
# 430 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __longlong_as_double(long long int x);
# 587 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rn(double x, double y, double z);
# 744 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rz(double x, double y, double z);
# 901 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_ru(double x, double y, double z);
# 1058 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rd(double x, double y, double z);
# 1070 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rn(double x, double y);
# 1082 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rz(double x, double y);
# 1094 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_ru(double x, double y);
# 1106 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rd(double x, double y);
# 1118 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rn(double x, double y);
# 1130 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rz(double x, double y);
# 1142 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_ru(double x, double y);
# 1154 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rd(double x, double y);
# 1166 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rn(double x, double y);
# 1178 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rz(double x, double y);
# 1190 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_ru(double x, double y);
# 1202 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rd(double x, double y);
# 1211 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rn(double x);
# 1220 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rz(double x);
# 1229 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_ru(double x);
# 1238 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rd(double x);
# 1247 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rn(double x);
# 1256 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_ru(double x);
# 1265 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rd(double x);
# 1274 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rn(double x);
# 1283 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_ru(double x);
# 1292 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rd(double x);
# 1301 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rn(double x);
# 1310 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_ru(double x);
# 1319 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rd(double x);
# 1328 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rn(double x);
# 1337 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_ru(double x);
# 1346 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rd(double x);







extern __attribute__((device)) __attribute__((device_builtin)) double __int2double_rn(int x);







extern __attribute__((device)) __attribute__((device_builtin)) double __uint2double_rn(unsigned int x);
# 1371 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rn(long long int x);
# 1380 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rz(long long int x);
# 1389 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_ru(long long int x);
# 1398 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rd(long long int x);
# 1407 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rn(unsigned long long int x);
# 1416 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rz(unsigned long long int x);
# 1425 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_ru(unsigned long long int x);
# 1434 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rd(unsigned long long int x);
# 1443 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2hiint(double x);
# 1452 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2loint(double x);
# 1462 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __hiloint2double(int hi, int lo);



}
# 1475 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
static __inline__ __attribute__((device)) unsigned int ballot(bool pred) ;

static __inline__ __attribute__((device)) int syncthreads_count(bool pred) ;

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred) ;

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred) ;




static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr) ;







# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.hpp" 1
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.hpp"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.hpp" 2
# 77 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.hpp"
static __inline__ __attribute__((device)) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline__ __attribute__((device)) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"

                  "} \n\t" : "=r"(ret) : "l"(ptr));




    return ret;
}
# 1495 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h" 2
# 4521 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h" 1
# 177 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_30_intrinsics.hpp" 1
# 178 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h" 2
# 4522 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h" 1
# 251 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_32_intrinsics.hpp" 1
# 252 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h" 2
# 4523 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_35_intrinsics.h" 1
# 4524 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h" 1
# 122 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_61_intrinsics.hpp" 1
# 123 "/usr/local/cuda/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h" 2
# 4525 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 69 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h" 2
# 82 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1Dreadc1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1Dreadc2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc2");
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1Dreadc4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc4");
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1Dreads1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads1");
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1Dreads2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads2");
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1Dreads4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads4");
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1Dreadu1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu1");
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1Dreadu2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu2");
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1Dreadu4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu4");
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1Dreadl1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadl1");
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1Dreadl2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadl2");







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu2(surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu4(surf, x, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf1Dread(&tmp, surf, x, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1Dread<T>(surf, x, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong2") ;
# 228 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float4") ;
# 242 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2Dreadc1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2Dreadc2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2Dreadc4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2Dreads1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2Dreads2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2Dreads4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2Dreadu1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2Dreadu2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2Dreadu4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2Dreadl1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2Dreadl2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadl2");







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2Dread<T>(surf, x, y, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong1") ;
template<>__attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong2") ;
# 390 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float4") ;
# 404 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf3Dreadc1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf3Dreadc2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf3Dreadc4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf3Dreads1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf3Dreads2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf3Dreads4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf3Dreadu1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf3Dreadu2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf3Dreadu4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf3Dreadl1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf3Dreadl2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadl2") ;







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf3Dread<T>(surf, x, y, z, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong2") ;
# 551 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float4") ;
# 564 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1DLayeredreadc1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1DLayeredreadc2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc2");
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1DLayeredreadc4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc4");
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1DLayeredreads1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads1");
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1DLayeredreads2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads2");
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1DLayeredreads4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads4");
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1DLayeredreadu1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu1");
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1DLayeredreadu2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu2");
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1DLayeredreadu4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu4");
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1DLayeredreadl1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadl1");
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1DLayeredreadl2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadl2");







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1DLayeredread<T>(surf, x, layer, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong2") ;
# 712 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float4") ;
# 726 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;

extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;

extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong2") ;
# 898 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float4") ;
# 919 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapread<T>(surf, x, y, face, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong2") ;
# 1049 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float4") ;
# 1070 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong2") ;
# 1200 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float4") ;
# 1214 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec1( uchar1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec1");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec2( uchar2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec2");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec4( uchar4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec4");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites1( ushort1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites1");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites2( ushort2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites2");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites4( ushort4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites4");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu1( uint1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu1");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu2( uint2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu2");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu4( uint4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu4");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel1(ulonglong1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritel1");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel2(ulonglong2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritel2");







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf1Dwrite(val, surf, x, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong2") ;
# 1345 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float4") ;
# 1359 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec1( uchar1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec2( uchar2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec4( uchar4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites1( ushort1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites2( ushort2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites4( ushort4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu1( uint1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu2( uint2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu4( uint4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel1(ulonglong1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritel1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel2(ulonglong2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritel2") ;







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode);

}

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong2") ;
# 1489 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float4") ;
# 1502 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec1( uchar1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec2( uchar2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec4( uchar4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites1( ushort1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites2( ushort2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites4( ushort4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu1( uint1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu2( uint2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu4( uint4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel1(ulonglong1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritel1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel2(ulonglong2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritel2") ;







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong2") ;
# 1633 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float4") ;
# 1647 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec1( uchar1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec2( uchar2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec4( uchar4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites1( ushort1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites2( ushort2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites4( ushort4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu1( uint1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu2( uint2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu4( uint4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel1(ulonglong1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritel1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel2(ulonglong2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritel2") ;
# 1666 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong2") ;
# 1779 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float4") ;
# 1792 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec1( uchar1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec2( uchar2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec4( uchar4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites1( ushort1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites2( ushort2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites4( ushort4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu1( uint1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu2( uint2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu4( uint4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel1(ulonglong1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel2(ulonglong2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
# 1822 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
 __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong2") ;
# 1936 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float4") ;
# 1958 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong2") ;
# 2071 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float4") ;
# 2093 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong2") ;
# 2206 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float4") ;
# 4526 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 63 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h" 2
# 100 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint4") ;
# 183 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort4") ;
# 224 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort4") ;


__attribute__((device)) __attribute__((cudart_builtin)) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint4") ;
# 313 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort4") ;
# 354 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint4") ;
# 445 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort4") ;
# 484 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint4") ;
# 573 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort4") ;
# 612 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint4") ;
# 703 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort4") ;
# 744 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint4") ;
# 833 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort4") ;
# 873 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint4") ;
# 962 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort4") ;
# 1001 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint4") ;
# 1090 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort4") ;
# 1170 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char3") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar3") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<signed short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<short3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short3") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort3") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<signed int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<int3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int3") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<uint3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint3") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float4") ;


__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<signed short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<short3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort4") ;
# 1241 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DLod(texture<char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DLod(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DLod(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DLod(texture<char1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DLod(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DLod(texture<char2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DLod(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DLod(texture<char4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DLod(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DLod(texture<short, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DLod(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DLod(texture<short1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DLod(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DLod(texture<short2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DLod(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DLod(texture<short4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DLod(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DLod(texture<int, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DLod(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DLod(texture<int1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DLod(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DLod(texture<int2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DLod(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DLod(texture<int4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DLod(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint4") ;
# 1330 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<float, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<float1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<float2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<float4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort4") ;
# 1369 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DLod(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DLod(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DLod(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DLod(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DLod(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DLod(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DLod(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DLod(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DLod(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DLod(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DLod(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DLod(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DLod(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DLod(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DLod(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DLod(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DLod(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DLod(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DLod(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DLod(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DLod(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DLod(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DLod(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DLod(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DLod(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint4") ;
# 1453 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort4") ;
# 1493 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DLayeredLod(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DLayeredLod(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DLayeredLod(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DLayeredLod(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DLayeredLod(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DLayeredLod(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DLayeredLod(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DLayeredLod(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DLayeredLod(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DLayeredLod(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint4") ;
# 1582 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort4") ;
# 1621 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DLayeredLod(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DLayeredLod(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DLayeredLod(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DLayeredLod(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DLayeredLod(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DLayeredLod(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DLayeredLod(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DLayeredLod(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DLayeredLod(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DLayeredLod(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint4") ;
# 1710 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort4") ;
# 1749 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex3DLod(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex3DLod(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex3DLod(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex3DLod(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex3DLod(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex3DLod(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex3DLod(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex3DLod(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex3DLod(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex3DLod(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex3DLod(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex3DLod(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex3DLod(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex3DLod(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex3DLod(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex3DLod(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex3DLod(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex3DLod(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex3DLod(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex3DLod(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex3DLod(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex3DLod(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex3DLod(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex3DLod(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex3DLod(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint4") ;
# 1838 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort4") ;
# 1877 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char texCubemapLod(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char texCubemapLod(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 texCubemapLod(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 texCubemapLod(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 texCubemapLod(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short texCubemapLod(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 texCubemapLod(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 texCubemapLod(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 texCubemapLod(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int texCubemapLod(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int texCubemapLod(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 texCubemapLod(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 texCubemapLod(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 texCubemapLod(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 texCubemapLod(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 texCubemapLod(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 texCubemapLod(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint4") ;
# 1966 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort4") ;
# 2005 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int texCubemapLayeredLod(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int texCubemapLayeredLod(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 texCubemapLayeredLod(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 texCubemapLayeredLod(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 texCubemapLayeredLod(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 texCubemapLayeredLod(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 texCubemapLayeredLod(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 texCubemapLayeredLod(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint4") ;
# 2094 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort4") ;
# 2133 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DGrad(texture<char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DGrad(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DGrad(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DGrad(texture<char1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DGrad(texture<char2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DGrad(texture<char4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DGrad(texture<short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DGrad(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DGrad(texture<short1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DGrad(texture<short2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DGrad(texture<short4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DGrad(texture<int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DGrad(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DGrad(texture<int1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DGrad(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DGrad(texture<int2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DGrad(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DGrad(texture<int4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DGrad(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint4") ;
# 2222 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<float, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<float1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<float2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<float4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort4") ;
# 2261 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DGrad(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DGrad(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DGrad(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DGrad(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DGrad(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DGrad(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DGrad(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DGrad(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DGrad(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DGrad(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DGrad(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DGrad(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DGrad(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DGrad(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DGrad(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DGrad(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DGrad(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DGrad(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DGrad(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint4") ;
# 2350 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort4") ;
# 2389 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DLayeredGrad(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DLayeredGrad(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DLayeredGrad(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DLayeredGrad(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DLayeredGrad(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DLayeredGrad(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DLayeredGrad(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DLayeredGrad(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint4") ;
# 2478 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort4") ;
# 2518 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DLayeredGrad(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DLayeredGrad(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DLayeredGrad(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DLayeredGrad(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DLayeredGrad(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DLayeredGrad(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DLayeredGrad(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DLayeredGrad(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint4") ;
# 2607 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort4") ;
# 2646 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex3DGrad(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex3DGrad(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex3DGrad(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex3DGrad(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex3DGrad(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex3DGrad(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex3DGrad(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex3DGrad(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex3DGrad(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex3DGrad(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex3DGrad(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex3DGrad(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex3DGrad(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex3DGrad(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex3DGrad(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex3DGrad(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex3DGrad(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex3DGrad(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex3DGrad(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint4") ;
# 2736 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort4") ;
# 4527 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h" 1
# 57 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 58 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h" 2
# 74 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(char *, cudaTextureObject_t, int) asm("__itex1Dfetch_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(signed char *, cudaTextureObject_t, int) asm("__itex1Dfetch_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(char1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(char2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(char4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(unsigned char *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uchar1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uchar2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uchar4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(short *, cudaTextureObject_t, int) asm("__itex1Dfetch_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(short1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(short2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(short4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(unsigned short *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(ushort1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(ushort2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(ushort4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(int *, cudaTextureObject_t, int) asm("__itex1Dfetch_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(int1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(int2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(int4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(unsigned int *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uint1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uint2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uint4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint4");
# 114 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(float *, cudaTextureObject_t, int) asm("__itex1Dfetch_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(float1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(float2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(float4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float4");



template <class T>
static __attribute__((device)) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{
  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
}
# 142 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(char *, cudaTextureObject_t, float) asm("__itex1D_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(signed char *, cudaTextureObject_t, float) asm("__itex1D_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(char1 *, cudaTextureObject_t, float) asm("__itex1D_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(char2 *, cudaTextureObject_t, float) asm("__itex1D_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(char4 *, cudaTextureObject_t, float) asm("__itex1D_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(unsigned char *, cudaTextureObject_t, float) asm("__itex1D_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uchar1 *, cudaTextureObject_t, float) asm("__itex1D_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uchar2 *, cudaTextureObject_t, float) asm("__itex1D_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uchar4 *, cudaTextureObject_t, float) asm("__itex1D_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(short *, cudaTextureObject_t, float) asm("__itex1D_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(short1 *, cudaTextureObject_t, float) asm("__itex1D_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(short2 *, cudaTextureObject_t, float) asm("__itex1D_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(short4 *, cudaTextureObject_t, float) asm("__itex1D_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(unsigned short *, cudaTextureObject_t, float) asm("__itex1D_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(ushort1 *, cudaTextureObject_t, float) asm("__itex1D_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(ushort2 *, cudaTextureObject_t, float) asm("__itex1D_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(ushort4 *, cudaTextureObject_t, float) asm("__itex1D_ushort4");


__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(int *, cudaTextureObject_t, float) asm("__itex1D_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(int1 *, cudaTextureObject_t, float) asm("__itex1D_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(int2 *, cudaTextureObject_t, float) asm("__itex1D_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(int4 *, cudaTextureObject_t, float) asm("__itex1D_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(unsigned int *, cudaTextureObject_t, float) asm("__itex1D_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uint1 *, cudaTextureObject_t, float) asm("__itex1D_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uint2 *, cudaTextureObject_t, float) asm("__itex1D_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uint4 *, cudaTextureObject_t, float) asm("__itex1D_uint4");
# 184 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(float *, cudaTextureObject_t, float) asm("__itex1D_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(float1 *, cudaTextureObject_t, float) asm("__itex1D_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(float2 *, cudaTextureObject_t, float) asm("__itex1D_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(float4 *, cudaTextureObject_t, float) asm("__itex1D_float4");


template <class T>
static __attribute__((device)) T tex1D(cudaTextureObject_t texObject, float x)
{
  T ret;
  tex1D(&ret, texObject, x);
  return ret;
}
# 212 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(char *, cudaTextureObject_t, float, float) asm("__itex2D_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(signed char *, cudaTextureObject_t, float, float) asm("__itex2D_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(char1 *, cudaTextureObject_t, float, float) asm("__itex2D_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(char2 *, cudaTextureObject_t, float, float) asm("__itex2D_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(char4 *, cudaTextureObject_t, float, float) asm("__itex2D_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(unsigned char *, cudaTextureObject_t, float, float) asm("__itex2D_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uchar1 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uchar2 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uchar4 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(short *, cudaTextureObject_t, float, float) asm("__itex2D_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(short1 *, cudaTextureObject_t, float, float) asm("__itex2D_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(short2 *, cudaTextureObject_t, float, float) asm("__itex2D_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(short4 *, cudaTextureObject_t, float, float) asm("__itex2D_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(unsigned short *, cudaTextureObject_t, float, float) asm("__itex2D_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(ushort1 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(ushort2 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(ushort4 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(int *, cudaTextureObject_t, float, float) asm("__itex2D_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(int1 *, cudaTextureObject_t, float, float) asm("__itex2D_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(int2 *, cudaTextureObject_t, float, float) asm("__itex2D_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(int4 *, cudaTextureObject_t, float, float) asm("__itex2D_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(unsigned int *, cudaTextureObject_t, float, float) asm("__itex2D_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uint1 *, cudaTextureObject_t, float, float) asm("__itex2D_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uint2 *, cudaTextureObject_t, float, float) asm("__itex2D_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uint4 *, cudaTextureObject_t, float, float) asm("__itex2D_uint4");
# 252 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(float *, cudaTextureObject_t, float, float) asm("__itex2D_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(float1 *, cudaTextureObject_t, float, float) asm("__itex2D_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(float2 *, cudaTextureObject_t, float, float) asm("__itex2D_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(float4 *, cudaTextureObject_t, float, float) asm("__itex2D_float4");


template <class T>
static __attribute__((device)) T tex2D(cudaTextureObject_t texObject, float x, float y)
{
  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
}
# 279 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(char *, cudaTextureObject_t, float, float, float) asm("__itex3D_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(signed char *, cudaTextureObject_t, float, float, float) asm("__itex3D_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(char1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(char2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(char4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(short *, cudaTextureObject_t, float, float, float) asm("__itex3D_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(short1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(short2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(short4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(int *, cudaTextureObject_t, float, float, float) asm("__itex3D_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(int1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(int2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(int4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint4");
# 319 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(float *, cudaTextureObject_t, float, float, float) asm("__itex3D_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(float1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(float2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(float4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float4");


template <class T>
static __attribute__((device)) T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
}
# 347 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(signed char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(char1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(char2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(char4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(unsigned char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uchar1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uchar2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uchar4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(short1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(short2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(short4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(unsigned short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(ushort1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(ushort2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(ushort4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(int1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(int2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(int4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(unsigned int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uint1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uint2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uint4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint4");
# 387 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(float *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(float1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(float2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(float4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float4");


template <class T>
static __attribute__((device)) T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{
  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
}
# 415 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(signed char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(char1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(char2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(char4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(unsigned char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uchar1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uchar2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uchar4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(short1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(short2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(short4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(unsigned short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(ushort1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(ushort2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(ushort4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(int1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(int2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(int4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(unsigned int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uint1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uint2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uint4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint4");
# 455 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(float *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(float1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(float2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(float4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float4");


template <class T>
static __attribute__((device)) T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{
  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
}
# 483 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(signed char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(char1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(char2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(char4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(short1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(short2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(short4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(int1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(int2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(int4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uint1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uint2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uint4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint4");
# 523 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(float *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(float1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(float2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(float4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float4");


template <class T>
static __attribute__((device)) T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
}
# 551 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(signed char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(char1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(char2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(char4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(unsigned char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uchar1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uchar2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uchar4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(short1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(short2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(short4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(unsigned short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(ushort1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(ushort2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(ushort4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(int1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(int2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(int4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(unsigned int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uint1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uint2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uint4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint4");
# 592 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(float *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(float1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(float2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(float4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float4");


template <class T>
static __attribute__((device)) T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
}
# 617 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(signed char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(char1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(char2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(char4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(unsigned char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uchar1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uchar2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uchar4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(short1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(short2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(short4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(unsigned short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(ushort1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(ushort2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(ushort4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(int1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(int2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(int4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(unsigned int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uint1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uint2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uint4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint4");
# 654 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(float *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(float1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(float2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(float4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float4");


template <class T>
static __attribute__((device)) T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{
  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
}
# 682 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(char *, cudaTextureObject_t, float, float) asm("__itex1DLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(signed char *, cudaTextureObject_t, float, float) asm("__itex1DLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(char1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(char2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(char4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(unsigned char *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uchar1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uchar2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uchar4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(short *, cudaTextureObject_t, float, float) asm("__itex1DLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(short1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(short2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(short4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(unsigned short *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(ushort1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(ushort2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(ushort4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(int *, cudaTextureObject_t, float, float) asm("__itex1DLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(int1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(int2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(int4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(unsigned int *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uint1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uint2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uint4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint4");
# 722 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(float *, cudaTextureObject_t, float, float) asm("__itex1DLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(float1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(float2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(float4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float4");


template <class T>
static __attribute__((device)) T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{
  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
}
# 750 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(signed char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(char1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(char2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(char4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(short1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(short2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(short4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(int1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(int2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(int4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint4");
# 791 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(float *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(float1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(float2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(float4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float4");


template <class T>
static __attribute__((device)) T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{
  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
}
# 819 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(signed char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(char1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(char2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(char4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(unsigned char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uchar1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uchar2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uchar4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(short1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(short2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(short4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(unsigned short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(ushort1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(ushort2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(ushort4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(int1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(int2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(int4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(unsigned int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uint1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uint2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uint4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint4");
# 859 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(float *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(float1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(float2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(float4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float4");


template <class T>
static __attribute__((device)) T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
}
# 886 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(signed char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(char1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(char2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(char4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(unsigned char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uchar1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uchar2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uchar4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(short1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(short2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(short4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(unsigned short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(ushort1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(ushort2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(ushort4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(int1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(int2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(int4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(unsigned int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uint1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uint2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uint4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint4");
# 926 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(float *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(float1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(float2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(float4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float4");


template <class T>
static __attribute__((device)) T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{
  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
}
# 954 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(signed char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(char1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(char2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(char4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(unsigned char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uchar1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uchar2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uchar4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(short1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(short2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(short4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(unsigned short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(ushort1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(ushort2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(ushort4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(int1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(int2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(int4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(unsigned int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uint1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uint2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uint4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint4");
# 994 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(float *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(float1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(float2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(float4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float4");


template <class T>
static __attribute__((device)) T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
}
# 1021 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(signed char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(char1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(char2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(char4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(unsigned char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uchar1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uchar2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uchar4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(short1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(short2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(short4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(unsigned short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(ushort1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(ushort2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(ushort4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(int1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(int2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(int4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(unsigned int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uint1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uint2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uint4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint4");
# 1061 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(float *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(float1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(float2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(float4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float4");


template <class T>
static __attribute__((device)) T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
}
# 1088 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(signed char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(char1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(char2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(char4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(unsigned char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uchar1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uchar2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uchar4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(short1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(short2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(short4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(unsigned short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(ushort1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(ushort2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(ushort4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(int1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(int2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(int4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(unsigned int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uint1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uint2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uint4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint4");
# 1128 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(float *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(float1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(float2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(float4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float4");


template <class T>
static __attribute__((device)) T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
}
# 1155 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(signed char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(char1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(char2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(char4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(short1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(short2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(short4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(int1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(int2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(int4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint4");
# 1196 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(float *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(float1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(float2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(float4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float4");


template <class T>
static __attribute__((device)) T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
}
# 1223 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(signed char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(char1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(char2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(char4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(unsigned char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uchar1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uchar2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uchar4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(short1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(short2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(short4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(unsigned short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(ushort1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(ushort2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(ushort4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(int1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(int2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(int4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(unsigned int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uint1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uint2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uint4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint4");
# 1263 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(float *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(float1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(float2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(float4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float4");


template <class T>
static __attribute__((device)) T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
}
# 1290 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(signed char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(char1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(char2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(char4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(unsigned char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uchar1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uchar2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uchar4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(short1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(short2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(short4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(unsigned short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(ushort1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(ushort2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(ushort4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(int1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(int2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(int4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(unsigned int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uint1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uint2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uint4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint4");
# 1330 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(float *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(float1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(float2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(float4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float4");


template <class T>
static __attribute__((device)) T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
}
# 1357 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(signed char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(char1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(char2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(char4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(unsigned char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uchar1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uchar2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uchar4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(short1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(short2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(short4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(unsigned short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(ushort1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(ushort2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(ushort4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(int1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(int2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(int4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(unsigned int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uint1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uint2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uint4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint4");
# 1398 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(float *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(float1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(float2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(float4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float4");


template <class T>
static __attribute__((device)) T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
}
# 1425 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(signed char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(char1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(char2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(char4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(unsigned char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uchar1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uchar2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uchar4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(short1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(short2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(short4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(unsigned short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(ushort1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(ushort2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(ushort4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(int1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(int2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(int4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(unsigned int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uint1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uint2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uint4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint4");
# 1465 "/usr/local/cuda/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(float *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(float1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(float2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(float4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float4");


template <class T>
static __attribute__((device)) T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
}
# 4528 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h" 1
# 57 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 58 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h" 2
# 71 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(signed char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(char1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(unsigned char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uchar1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(short *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(short1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(unsigned short *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ushort1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(int *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(int1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(unsigned int *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uint1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(long long *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(longlong1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(unsigned long long *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ulonglong1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(float *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(float1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(char2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uchar2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(short2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ushort2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(int2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uint2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(longlong2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ulonglong2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(float2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(char4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uchar4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(short4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ushort4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(int4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uint4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(float4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float4");



template <class T>
static __attribute__((device)) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;

}
# 131 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(signed char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(char1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(unsigned char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uchar1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(short1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(unsigned short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ushort1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(int1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(unsigned int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uint1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(longlong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(unsigned long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ulonglong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(float *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(float1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(char2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uchar2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(short2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ushort2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(int2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uint2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(longlong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ulonglong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(float2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(char4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uchar4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(short4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ushort4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(int4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uint4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(float4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float4");



template <class T>
static __attribute__((device)) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;

}
# 192 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float4");


template <class T>
static __attribute__((device)) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;

}
# 250 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(signed char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(char1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(short1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(int1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uint1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(float *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(float1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(char2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(short2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(int2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uint2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(float2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float2");


__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(char4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(short4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(int4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uint4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(float4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float4");


template <class T>
static __attribute__((device)) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;

}
# 309 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float4");


template <class T>
static __attribute__((device)) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;

}
# 367 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float4");


template <class T>
static __attribute__((device)) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapread(&ret, surfObject, face, x, y, boundaryMode);
   return ret;

}
# 425 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float4");


template <class T>
static __attribute__((device)) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode);
   return ret;

}
# 483 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(signed char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned short, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned int, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(long long, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(longlong1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned long long, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ulonglong1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(longlong2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ulonglong2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_float4");
# 531 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(signed char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(longlong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ulonglong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(longlong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ulonglong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_float4");
# 579 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_float1");


__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_float4");
# 630 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(signed char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_float4");
# 678 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float4");
# 726 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_float4");
# 774 "/usr/local/cuda/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_float4");
# 4529 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 120 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_launch_parameters.h" 1
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/device_launch_parameters.h"
extern "C" {


uint3 __attribute__((device_builtin)) extern const threadIdx;
uint3 __attribute__((device_builtin)) extern const blockIdx;
dim3 __attribute__((device_builtin)) extern const blockDim;
dim3 __attribute__((device_builtin)) extern const gridDim;
int __attribute__((device_builtin)) extern const warpSize;




}
# 121 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 183 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
# 221 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaSetupArgument(
  T arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}
# 260 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaEventCreate(
  cudaEvent_t *event,
  unsigned int flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
# 323 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  void **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostAlloc(
  T **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostGetDevicePointer(
  T **pDevice,
  void *pHost,
  unsigned int flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}
# 449 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocManaged(
  T **devPtr,
  size_t size,
  unsigned int flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}
# 528 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t stream,
  T *devPtr,
  size_t length = 0,
  unsigned int flags = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMalloc(
  T **devPtr,
  size_t size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  T **ptr,
  size_t size,
  unsigned int flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocPitch(
  T **devPtr,
  size_t *pitch,
  size_t width,
  size_t height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}
# 604 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbol(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}
# 656 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}
# 702 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}
# 754 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}
# 787 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}
# 816 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}
# 859 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
        size_t size = 
# 865 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 3 4
                                                (0x7fffffff * 2U + 1U)

# 866 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}
# 904 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
        size_t size = 
# 909 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h" 3 4
                                                (0x7fffffff * 2U + 1U)

# 910 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}
# 960 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}
# 1018 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}
# 1060 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}
# 1098 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}
# 1139 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}
# 1177 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t levelArray;
  cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);

  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}
# 1216 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}
# 1250 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}
# 1302 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(
  T *func,
  enum cudaFuncCache cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(
  T *func,
  enum cudaSharedMemConfig config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}
# 1347 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}
# 1398 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __attribute__((host)) __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __attribute__((host)) size_t operator()(int)
  {
      return n;
  }
};
# 1467 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    cudaError_t status;


    int device;
    struct cudaFuncAttributes attr;


    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;


    int maxBlockSize = 0;
    int numBlocks = 0;
    int maxOccupancy = 0;


    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;





    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }





    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }

    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;





    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {



        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }

        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }



        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }







    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}
# 1662 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}
# 1707 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}
# 1766 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}
# 1814 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}
# 1851 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}
# 1880 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}
# 1909 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}
# 1930 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 1 "<command-line>" 2
# 1 "neutron-omp.cu"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h" 1
# 58 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 48 "/usr/include/stdint.h" 3 4

# 48 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdint.h" 2 3 4
# 59 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h" 2

# 59 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
typedef uint32_t cuuint32_t;
typedef uint64_t cuuint64_t;
# 211 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
extern "C" {
# 221 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
typedef unsigned long long CUdeviceptr;






typedef int CUdevice;
typedef struct CUctx_st *CUcontext;
typedef struct CUmod_st *CUmodule;
typedef struct CUfunc_st *CUfunction;
typedef struct CUarray_st *CUarray;
typedef struct CUmipmappedArray_st *CUmipmappedArray;
typedef struct CUtexref_st *CUtexref;
typedef struct CUsurfref_st *CUsurfref;
typedef struct CUevent_st *CUevent;
typedef struct CUstream_st *CUstream;
typedef struct CUgraphicsResource_st *CUgraphicsResource;
typedef unsigned long long CUtexObject;
typedef unsigned long long CUsurfObject;

typedef struct CUuuid_st {
    char bytes[16];
} CUuuid;
# 257 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
typedef struct CUipcEventHandle_st {
    char reserved[64];
} CUipcEventHandle;




typedef struct CUipcMemHandle_st {
    char reserved[64];
} CUipcMemHandle;




typedef enum CUipcMem_flags_enum {
    CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0x1
} CUipcMem_flags;






typedef enum CUmemAttach_flags_enum {
    CU_MEM_ATTACH_GLOBAL = 0x1,
    CU_MEM_ATTACH_HOST = 0x2,
    CU_MEM_ATTACH_SINGLE = 0x4
} CUmemAttach_flags;




typedef enum CUctx_flags_enum {
    CU_CTX_SCHED_AUTO = 0x00,
    CU_CTX_SCHED_SPIN = 0x01,
    CU_CTX_SCHED_YIELD = 0x02,
    CU_CTX_SCHED_BLOCKING_SYNC = 0x04,
    CU_CTX_BLOCKING_SYNC = 0x04,


    CU_CTX_SCHED_MASK = 0x07,
    CU_CTX_MAP_HOST = 0x08,
    CU_CTX_LMEM_RESIZE_TO_MAX = 0x10,
    CU_CTX_FLAGS_MASK = 0x1f
} CUctx_flags;




typedef enum CUstream_flags_enum {
    CU_STREAM_DEFAULT = 0x0,
    CU_STREAM_NON_BLOCKING = 0x1
} CUstream_flags;
# 334 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
typedef enum CUevent_flags_enum {
    CU_EVENT_DEFAULT = 0x0,
    CU_EVENT_BLOCKING_SYNC = 0x1,
    CU_EVENT_DISABLE_TIMING = 0x2,
    CU_EVENT_INTERPROCESS = 0x4
} CUevent_flags;





typedef enum CUstreamWaitValue_flags_enum {
    CU_STREAM_WAIT_VALUE_GEQ = 0x0,

    CU_STREAM_WAIT_VALUE_EQ = 0x1,
    CU_STREAM_WAIT_VALUE_AND = 0x2,
    CU_STREAM_WAIT_VALUE_FLUSH = 1<<30






} CUstreamWaitValue_flags;




typedef enum CUstreamWriteValue_flags_enum {
    CU_STREAM_WRITE_VALUE_DEFAULT = 0x0,
    CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 0x1





} CUstreamWriteValue_flags;




typedef enum CUstreamBatchMemOpType_enum {
    CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1,
    CU_STREAM_MEM_OP_WRITE_VALUE_32 = 2,
    CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3

} CUstreamBatchMemOpType;




typedef union CUstreamBatchMemOpParams_union {
    CUstreamBatchMemOpType operation;
    struct CUstreamMemOpWaitValueParams_st {
        CUstreamBatchMemOpType operation;
        CUdeviceptr address;
        union {
            cuuint32_t value;
            cuuint64_t pad;
        };
        unsigned int flags;
        CUdeviceptr alias;
    } waitValue;
    struct CUstreamMemOpWriteValueParams_st {
        CUstreamBatchMemOpType operation;
        CUdeviceptr address;
        union {
            cuuint32_t value;
            cuuint64_t pad;
        };
        unsigned int flags;
        CUdeviceptr alias;
    } writeValue;
    struct CUstreamMemOpFlushRemoteWritesParams_st {
        CUstreamBatchMemOpType operation;
        unsigned int flags;
    } flushRemoteWrites;
    cuuint64_t pad[6];
} CUstreamBatchMemOpParams;





typedef enum CUoccupancy_flags_enum {
    CU_OCCUPANCY_DEFAULT = 0x0,
    CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 0x1
} CUoccupancy_flags;




typedef enum CUarray_format_enum {
    CU_AD_FORMAT_UNSIGNED_INT8 = 0x01,
    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02,
    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03,
    CU_AD_FORMAT_SIGNED_INT8 = 0x08,
    CU_AD_FORMAT_SIGNED_INT16 = 0x09,
    CU_AD_FORMAT_SIGNED_INT32 = 0x0a,
    CU_AD_FORMAT_HALF = 0x10,
    CU_AD_FORMAT_FLOAT = 0x20
} CUarray_format;




typedef enum CUaddress_mode_enum {
    CU_TR_ADDRESS_MODE_WRAP = 0,
    CU_TR_ADDRESS_MODE_CLAMP = 1,
    CU_TR_ADDRESS_MODE_MIRROR = 2,
    CU_TR_ADDRESS_MODE_BORDER = 3
} CUaddress_mode;




typedef enum CUfilter_mode_enum {
    CU_TR_FILTER_MODE_POINT = 0,
    CU_TR_FILTER_MODE_LINEAR = 1
} CUfilter_mode;




typedef enum CUdevice_attribute_enum {
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,
    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,
    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,
    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,
    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,
    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,
    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,
    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,
    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,
    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29,
    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,
    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,
    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,
    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,
    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,
    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,
    CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,
    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,
    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,
    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,
    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,
    CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49,
    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,
    CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77,
    CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,
    CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,
    CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,
    CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,
    CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED = 86,
    CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO = 87,
    CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS = 88,
    CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS = 89,
    CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED = 90,
    CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM = 91,
    CU_DEVICE_ATTRIBUTE_MAX
} CUdevice_attribute;




typedef struct CUdevprop_st {
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int sharedMemPerBlock;
    int totalConstantMemory;
    int SIMDWidth;
    int memPitch;
    int regsPerBlock;
    int clockRate;
    int textureAlign;
} CUdevprop;




typedef enum CUpointer_attribute_enum {
    CU_POINTER_ATTRIBUTE_CONTEXT = 1,
    CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,
    CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3,
    CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,
    CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,
    CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,
    CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,
    CU_POINTER_ATTRIBUTE_IS_MANAGED = 8
} CUpointer_attribute;




typedef enum CUfunction_attribute_enum {





    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,






    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,





    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,




    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,




    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,
# 629 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,
# 638 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,





    CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,

    CU_FUNC_ATTRIBUTE_MAX
} CUfunction_attribute;




typedef enum CUfunc_cache_enum {
    CU_FUNC_CACHE_PREFER_NONE = 0x00,
    CU_FUNC_CACHE_PREFER_SHARED = 0x01,
    CU_FUNC_CACHE_PREFER_L1 = 0x02,
    CU_FUNC_CACHE_PREFER_EQUAL = 0x03
} CUfunc_cache;




typedef enum CUsharedconfig_enum {
    CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE = 0x00,
    CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE = 0x01,
    CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0x02
} CUsharedconfig;




typedef enum CUmemorytype_enum {
    CU_MEMORYTYPE_HOST = 0x01,
    CU_MEMORYTYPE_DEVICE = 0x02,
    CU_MEMORYTYPE_ARRAY = 0x03,
    CU_MEMORYTYPE_UNIFIED = 0x04
} CUmemorytype;




typedef enum CUcomputemode_enum {
    CU_COMPUTEMODE_DEFAULT = 0,
    CU_COMPUTEMODE_PROHIBITED = 2,
    CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3
} CUcomputemode;




typedef enum CUmem_advise_enum {
    CU_MEM_ADVISE_SET_READ_MOSTLY = 1,
    CU_MEM_ADVISE_UNSET_READ_MOSTLY = 2,
    CU_MEM_ADVISE_SET_PREFERRED_LOCATION = 3,
    CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION = 4,
    CU_MEM_ADVISE_SET_ACCESSED_BY = 5,
    CU_MEM_ADVISE_UNSET_ACCESSED_BY = 6
} CUmem_advise;

typedef enum CUmem_range_attribute_enum {
    CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1,
    CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION = 2,
    CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY = 3,
    CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION = 4
} CUmem_range_attribute;




typedef enum CUjit_option_enum
{





    CU_JIT_MAX_REGISTERS = 0,
# 731 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_THREADS_PER_BLOCK,







    CU_JIT_WALL_TIME,
# 748 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_INFO_LOG_BUFFER,
# 757 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
# 766 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_ERROR_LOG_BUFFER,
# 775 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,







    CU_JIT_OPTIMIZATION_LEVEL,







    CU_JIT_TARGET_FROM_CUCONTEXT,







    CU_JIT_TARGET,
# 808 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_FALLBACK_STRATEGY,







    CU_JIT_GENERATE_DEBUG_INFO,






    CU_JIT_LOG_VERBOSE,






    CU_JIT_GENERATE_LINE_INFO,







    CU_JIT_CACHE_MODE,




    CU_JIT_NEW_SM3X_OPT,
    CU_JIT_FAST_COMPILE,

    CU_JIT_NUM_OPTIONS

} CUjit_option;




typedef enum CUjit_target_enum
{
    CU_TARGET_COMPUTE_10 = 10,
    CU_TARGET_COMPUTE_11 = 11,
    CU_TARGET_COMPUTE_12 = 12,
    CU_TARGET_COMPUTE_13 = 13,
    CU_TARGET_COMPUTE_20 = 20,
    CU_TARGET_COMPUTE_21 = 21,
    CU_TARGET_COMPUTE_30 = 30,
    CU_TARGET_COMPUTE_32 = 32,
    CU_TARGET_COMPUTE_35 = 35,
    CU_TARGET_COMPUTE_37 = 37,
    CU_TARGET_COMPUTE_50 = 50,
    CU_TARGET_COMPUTE_52 = 52,
    CU_TARGET_COMPUTE_53 = 53,
    CU_TARGET_COMPUTE_60 = 60,
    CU_TARGET_COMPUTE_61 = 61,
    CU_TARGET_COMPUTE_62 = 62
} CUjit_target;




typedef enum CUjit_fallback_enum
{
    CU_PREFER_PTX = 0,

    CU_PREFER_BINARY

} CUjit_fallback;




typedef enum CUjit_cacheMode_enum
{
    CU_JIT_CACHE_OPTION_NONE = 0,
    CU_JIT_CACHE_OPTION_CG,
    CU_JIT_CACHE_OPTION_CA
} CUjit_cacheMode;




typedef enum CUjitInputType_enum
{




    CU_JIT_INPUT_CUBIN = 0,





    CU_JIT_INPUT_PTX,





    CU_JIT_INPUT_FATBINARY,





    CU_JIT_INPUT_OBJECT,





    CU_JIT_INPUT_LIBRARY,

    CU_JIT_NUM_INPUT_TYPES
} CUjitInputType;


typedef struct CUlinkState_st *CUlinkState;





typedef enum CUgraphicsRegisterFlags_enum {
    CU_GRAPHICS_REGISTER_FLAGS_NONE = 0x00,
    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY = 0x01,
    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD = 0x02,
    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 0x04,
    CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0x08
} CUgraphicsRegisterFlags;




typedef enum CUgraphicsMapResourceFlags_enum {
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE = 0x00,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY = 0x01,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02
} CUgraphicsMapResourceFlags;




typedef enum CUarray_cubemap_face_enum {
    CU_CUBEMAP_FACE_POSITIVE_X = 0x00,
    CU_CUBEMAP_FACE_NEGATIVE_X = 0x01,
    CU_CUBEMAP_FACE_POSITIVE_Y = 0x02,
    CU_CUBEMAP_FACE_NEGATIVE_Y = 0x03,
    CU_CUBEMAP_FACE_POSITIVE_Z = 0x04,
    CU_CUBEMAP_FACE_NEGATIVE_Z = 0x05
} CUarray_cubemap_face;




typedef enum CUlimit_enum {
    CU_LIMIT_STACK_SIZE = 0x00,
    CU_LIMIT_PRINTF_FIFO_SIZE = 0x01,
    CU_LIMIT_MALLOC_HEAP_SIZE = 0x02,
    CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH = 0x03,
    CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0x04,
    CU_LIMIT_MAX
} CUlimit;




typedef enum CUresourcetype_enum {
    CU_RESOURCE_TYPE_ARRAY = 0x00,
    CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0x01,
    CU_RESOURCE_TYPE_LINEAR = 0x02,
    CU_RESOURCE_TYPE_PITCH2D = 0x03
} CUresourcetype;




typedef enum cudaError_enum {





    CUDA_SUCCESS = 0,





    CUDA_ERROR_INVALID_VALUE = 1,





    CUDA_ERROR_OUT_OF_MEMORY = 2,





    CUDA_ERROR_NOT_INITIALIZED = 3,




    CUDA_ERROR_DEINITIALIZED = 4,






    CUDA_ERROR_PROFILER_DISABLED = 5,







    CUDA_ERROR_PROFILER_NOT_INITIALIZED = 6,






    CUDA_ERROR_PROFILER_ALREADY_STARTED = 7,






    CUDA_ERROR_PROFILER_ALREADY_STOPPED = 8,





    CUDA_ERROR_NO_DEVICE = 100,





    CUDA_ERROR_INVALID_DEVICE = 101,






    CUDA_ERROR_INVALID_IMAGE = 200,
# 1080 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_INVALID_CONTEXT = 201,
# 1089 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_CONTEXT_ALREADY_CURRENT = 202,




    CUDA_ERROR_MAP_FAILED = 205,




    CUDA_ERROR_UNMAP_FAILED = 206,





    CUDA_ERROR_ARRAY_IS_MAPPED = 207,




    CUDA_ERROR_ALREADY_MAPPED = 208,







    CUDA_ERROR_NO_BINARY_FOR_GPU = 209,




    CUDA_ERROR_ALREADY_ACQUIRED = 210,




    CUDA_ERROR_NOT_MAPPED = 211,





    CUDA_ERROR_NOT_MAPPED_AS_ARRAY = 212,





    CUDA_ERROR_NOT_MAPPED_AS_POINTER = 213,





    CUDA_ERROR_ECC_UNCORRECTABLE = 214,





    CUDA_ERROR_UNSUPPORTED_LIMIT = 215,






    CUDA_ERROR_CONTEXT_ALREADY_IN_USE = 216,





    CUDA_ERROR_PEER_ACCESS_UNSUPPORTED = 217,




    CUDA_ERROR_INVALID_PTX = 218,




    CUDA_ERROR_INVALID_GRAPHICS_CONTEXT = 219,





    CUDA_ERROR_NVLINK_UNCORRECTABLE = 220,




    CUDA_ERROR_INVALID_SOURCE = 300,




    CUDA_ERROR_FILE_NOT_FOUND = 301,




    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,




    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED = 303,




    CUDA_ERROR_OPERATING_SYSTEM = 304,





    CUDA_ERROR_INVALID_HANDLE = 400,





    CUDA_ERROR_NOT_FOUND = 500,







    CUDA_ERROR_NOT_READY = 600,
# 1235 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_ILLEGAL_ADDRESS = 700,
# 1246 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES = 701,
# 1256 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_LAUNCH_TIMEOUT = 702,





    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING = 703,






    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = 704,






    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED = 705,





    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708,






    CUDA_ERROR_CONTEXT_IS_DESTROYED = 709,







    CUDA_ERROR_ASSERT = 710,






    CUDA_ERROR_TOO_MANY_PEERS = 711,





    CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712,





    CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED = 713,
# 1325 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_HARDWARE_STACK_ERROR = 714,







    CUDA_ERROR_ILLEGAL_INSTRUCTION = 715,
# 1342 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_MISALIGNED_ADDRESS = 716,
# 1353 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_INVALID_ADDRESS_SPACE = 717,







    CUDA_ERROR_INVALID_PC = 718,
# 1371 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_LAUNCH_FAILED = 719,





    CUDA_ERROR_NOT_PERMITTED = 800,





    CUDA_ERROR_NOT_SUPPORTED = 801,




    CUDA_ERROR_UNKNOWN = 999
} CUresult;




typedef enum CUdevice_P2PAttribute_enum {
    CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 0x01,
    CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED = 0x02,
    CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED = 0x03
} CUdevice_P2PAttribute;
# 1412 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
typedef void ( *CUstreamCallback)(CUstream hStream, CUresult status, void *userData);







typedef size_t ( *CUoccupancyB2DSize)(int blockSize);
# 1475 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
typedef struct CUDA_MEMCPY2D_st {
    size_t srcXInBytes;
    size_t srcY;

    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    size_t srcPitch;

    size_t dstXInBytes;
    size_t dstY;

    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    size_t dstPitch;

    size_t WidthInBytes;
    size_t Height;
} CUDA_MEMCPY2D;




typedef struct CUDA_MEMCPY3D_st {
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    void *reserved0;
    size_t srcPitch;
    size_t srcHeight;

    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    void *reserved1;
    size_t dstPitch;
    size_t dstHeight;

    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
} CUDA_MEMCPY3D;




typedef struct CUDA_MEMCPY3D_PEER_st {
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    CUcontext srcContext;
    size_t srcPitch;
    size_t srcHeight;

    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    CUcontext dstContext;
    size_t dstPitch;
    size_t dstHeight;

    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
} CUDA_MEMCPY3D_PEER;




typedef struct CUDA_ARRAY_DESCRIPTOR_st
{
    size_t Width;
    size_t Height;

    CUarray_format Format;
    unsigned int NumChannels;
} CUDA_ARRAY_DESCRIPTOR;




typedef struct CUDA_ARRAY3D_DESCRIPTOR_st
{
    size_t Width;
    size_t Height;
    size_t Depth;

    CUarray_format Format;
    unsigned int NumChannels;
    unsigned int Flags;
} CUDA_ARRAY3D_DESCRIPTOR;
# 1597 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
typedef struct CUDA_RESOURCE_DESC_st
{
    CUresourcetype resType;

    union {
        struct {
            CUarray hArray;
        } array;
        struct {
            CUmipmappedArray hMipmappedArray;
        } mipmap;
        struct {
            CUdeviceptr devPtr;
            CUarray_format format;
            unsigned int numChannels;
            size_t sizeInBytes;
        } linear;
        struct {
            CUdeviceptr devPtr;
            CUarray_format format;
            unsigned int numChannels;
            size_t width;
            size_t height;
            size_t pitchInBytes;
        } pitch2D;
        struct {
            int reserved[32];
        } reserved;
    } res;

    unsigned int flags;
} CUDA_RESOURCE_DESC;




typedef struct CUDA_TEXTURE_DESC_st {
    CUaddress_mode addressMode[3];
    CUfilter_mode filterMode;
    unsigned int flags;
    unsigned int maxAnisotropy;
    CUfilter_mode mipmapFilterMode;
    float mipmapLevelBias;
    float minMipmapLevelClamp;
    float maxMipmapLevelClamp;
    float borderColor[4];
    int reserved[12];
} CUDA_TEXTURE_DESC;




typedef enum CUresourceViewFormat_enum
{
    CU_RES_VIEW_FORMAT_NONE = 0x00,
    CU_RES_VIEW_FORMAT_UINT_1X8 = 0x01,
    CU_RES_VIEW_FORMAT_UINT_2X8 = 0x02,
    CU_RES_VIEW_FORMAT_UINT_4X8 = 0x03,
    CU_RES_VIEW_FORMAT_SINT_1X8 = 0x04,
    CU_RES_VIEW_FORMAT_SINT_2X8 = 0x05,
    CU_RES_VIEW_FORMAT_SINT_4X8 = 0x06,
    CU_RES_VIEW_FORMAT_UINT_1X16 = 0x07,
    CU_RES_VIEW_FORMAT_UINT_2X16 = 0x08,
    CU_RES_VIEW_FORMAT_UINT_4X16 = 0x09,
    CU_RES_VIEW_FORMAT_SINT_1X16 = 0x0a,
    CU_RES_VIEW_FORMAT_SINT_2X16 = 0x0b,
    CU_RES_VIEW_FORMAT_SINT_4X16 = 0x0c,
    CU_RES_VIEW_FORMAT_UINT_1X32 = 0x0d,
    CU_RES_VIEW_FORMAT_UINT_2X32 = 0x0e,
    CU_RES_VIEW_FORMAT_UINT_4X32 = 0x0f,
    CU_RES_VIEW_FORMAT_SINT_1X32 = 0x10,
    CU_RES_VIEW_FORMAT_SINT_2X32 = 0x11,
    CU_RES_VIEW_FORMAT_SINT_4X32 = 0x12,
    CU_RES_VIEW_FORMAT_FLOAT_1X16 = 0x13,
    CU_RES_VIEW_FORMAT_FLOAT_2X16 = 0x14,
    CU_RES_VIEW_FORMAT_FLOAT_4X16 = 0x15,
    CU_RES_VIEW_FORMAT_FLOAT_1X32 = 0x16,
    CU_RES_VIEW_FORMAT_FLOAT_2X32 = 0x17,
    CU_RES_VIEW_FORMAT_FLOAT_4X32 = 0x18,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC1 = 0x19,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC2 = 0x1a,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC3 = 0x1b,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC4 = 0x1c,
    CU_RES_VIEW_FORMAT_SIGNED_BC4 = 0x1d,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC5 = 0x1e,
    CU_RES_VIEW_FORMAT_SIGNED_BC5 = 0x1f,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0x20,
    CU_RES_VIEW_FORMAT_SIGNED_BC6H = 0x21,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC7 = 0x22
} CUresourceViewFormat;




typedef struct CUDA_RESOURCE_VIEW_DESC_st
{
    CUresourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
    unsigned int reserved[16];
} CUDA_RESOURCE_VIEW_DESC;




typedef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
    unsigned long long p2pToken;
    unsigned int vaSpaceToken;
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;
# 1857 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGetErrorString(CUresult error, const char **pStr);
# 1876 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGetErrorName(CUresult error, const char **pStr);
# 1908 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuInit(unsigned int Flags);
# 1938 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDriverGetVersion(int *driverVersion);
# 1978 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGet(CUdevice *device, int ordinal);
# 2003 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetCount(int *count);
# 2031 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetName(char *name, int len, CUdevice dev);
# 2058 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceTotalMem_v2(size_t *bytes, CUdevice dev);
# 2253 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetAttribute(int *pi, CUdevice_attribute attrib, CUdevice dev);
# 2330 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetProperties(CUdevprop *prop, CUdevice dev);
# 2363 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceComputeCapability(int *major, int *minor, CUdevice dev);
# 2431 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxRetain(CUcontext *pctx, CUdevice dev);
# 2465 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxRelease(CUdevice dev);
# 2528 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxSetFlags(CUdevice dev, unsigned int flags);
# 2552 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxGetState(CUdevice dev, unsigned int *flags, int *active);
# 2590 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxReset(CUdevice dev);
# 2696 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxCreate_v2(CUcontext *pctx, unsigned int flags, CUdevice dev);
# 2736 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxDestroy_v2(CUcontext ctx);
# 2772 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxPushCurrent_v2(CUcontext ctx);
# 2806 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxPopCurrent_v2(CUcontext *pctx);
# 2832 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetCurrent(CUcontext ctx);
# 2851 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetCurrent(CUcontext *pctx);
# 2881 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetDevice(CUdevice *device);
# 2909 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetFlags(unsigned int *flags);
# 2939 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSynchronize(void);
# 3034 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetLimit(CUlimit limit, size_t value);
# 3073 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetLimit(size_t *pvalue, CUlimit limit);
# 3116 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetCacheConfig(CUfunc_cache *pconfig);
# 3166 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetCacheConfig(CUfunc_cache config);
# 3208 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetSharedMemConfig(CUsharedconfig *pConfig);
# 3260 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetSharedMemConfig(CUsharedconfig config);
# 3298 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetApiVersion(CUcontext ctx, unsigned int *version);
# 3337 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 3392 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxAttach(CUcontext *pctx, unsigned int flags);
# 3428 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxDetach(CUcontext ctx);
# 3482 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoad(CUmodule *module, const char *fname);
# 3518 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadData(CUmodule *module, const void *image);
# 3560 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadDataEx(CUmodule *module, const void *image, unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3601 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadFatBinary(CUmodule *module, const void *fatCubin);
# 3626 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleUnload(CUmodule hmod);
# 3656 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetFunction(CUfunction *hfunc, CUmodule hmod, const char *name);
# 3690 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetGlobal_v2(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const char *name);
# 3724 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const char *name);
# 3755 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetSurfRef(CUsurfref *pSurfRef, CUmodule hmod, const char *name);
# 3796 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkCreate_v2(unsigned int numOptions, CUjit_option *options, void **optionValues, CUlinkState *stateOut);
# 3833 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void *data, size_t size, const char *name,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3872 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char *path,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3899 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkComplete(CUlinkState state, void **cubinOut, size_t *sizeOut);
# 3913 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkDestroy(CUlinkState state);
# 3962 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetInfo_v2(size_t *free, size_t *total);
# 3995 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAlloc_v2(CUdeviceptr *dptr, size_t bytesize);
# 4056 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocPitch_v2(CUdeviceptr *dptr, size_t *pPitch, size_t WidthInBytes, size_t Height, unsigned int ElementSizeBytes);
# 4085 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemFree_v2(CUdeviceptr dptr);
# 4118 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetAddressRange_v2(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr);
# 4164 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocHost_v2(void **pp, size_t bytesize);
# 4194 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemFreeHost(void *p);
# 4276 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags);
# 4329 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr *pdptr, void *p, unsigned int Flags);
# 4354 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostGetFlags(unsigned int *pFlags, void *p);
# 4464 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocManaged(CUdeviceptr *dptr, size_t bytesize, unsigned int flags);
# 4493 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetByPCIBusId(CUdevice *dev, const char *pciBusId);
# 4521 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetPCIBusId(char *pciBusId, int len, CUdevice dev);
# 4563 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcGetEventHandle(CUipcEventHandle *pHandle, CUevent event);
# 4600 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcOpenEventHandle(CUevent *phEvent, CUipcEventHandle handle);
# 4637 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcGetMemHandle(CUipcMemHandle *pHandle, CUdeviceptr dptr);
# 4688 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcOpenMemHandle(CUdeviceptr *pdptr, CUipcMemHandle handle, unsigned int Flags);
# 4719 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcCloseMemHandle(CUdeviceptr dptr);
# 4802 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostRegister_v2(void *p, size_t bytesize, unsigned int Flags);
# 4826 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostUnregister(void *p);
# 4862 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);
# 4891 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);
# 4927 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount);
# 4960 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoH_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);
# 4993 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);
# 5028 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);
# 5065 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5100 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount);
# 5135 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoH_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5174 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5335 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D *pCopy);
# 5494 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *pCopy);
# 5662 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D *pCopy);
# 5687 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER *pCopy);
# 5727 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);
# 5758 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);
# 5797 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream);
# 5834 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoHAsync_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 5871 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 5910 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount, CUstream hStream);
# 5949 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoHAsync_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);
# 6114 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *pCopy, CUstream hStream);
# 6286 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *pCopy, CUstream hStream);
# 6313 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER *pCopy, CUstream hStream);
# 6349 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N);
# 6383 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N);
# 6417 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned int ui, size_t N);
# 6456 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height);
# 6496 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height);
# 6536 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height);
# 6572 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream);
# 6608 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream);
# 6643 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD32Async(CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream);
# 6684 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream);
# 6726 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream);
# 6768 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream);
# 6871 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayCreate_v2(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray);
# 6904 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
# 6935 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayDestroy(CUarray hArray);
# 7115 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArray3DCreate_v2(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray);
# 7151 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
# 7278 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayCreate(CUmipmappedArray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, unsigned int numMipmapLevels);
# 7304 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayGetLevel(CUarray *pLevelArray, CUmipmappedArray hMipmappedArray, unsigned int level);
# 7324 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray);
# 7570 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerGetAttribute(void *data, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7639 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemPrefetchAsync(CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream);
# 7725 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAdvise(CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device);
# 7782 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemRangeGetAttribute(void *data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count);
# 7821 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemRangeGetAttributes(void **data, size_t *dataSizes, CUmem_range_attribute *attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count);
# 7865 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerSetAttribute(const void *value, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7907 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerGetAttributes(unsigned int numAttributes, CUpointer_attribute *attributes, void **data, CUdeviceptr ptr);
# 7955 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamCreate(CUstream *phStream, unsigned int Flags);
# 8003 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamCreateWithPriority(CUstream *phStream, unsigned int flags, int priority);
# 8033 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetPriority(CUstream hStream, int *priority);
# 8060 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetFlags(CUstream hStream, unsigned int *flags);
# 8101 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned int Flags);
# 8172 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void *userData, unsigned int flags);
# 8251 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned int flags);
# 8282 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamQuery(CUstream hStream);
# 8309 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamSynchronize(CUstream hStream);
# 8338 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamDestroy_v2(CUstream hStream);
# 8393 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventCreate(CUevent *phEvent, unsigned int Flags);
# 8429 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventRecord(CUevent hEvent, CUstream hStream);
# 8463 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventQuery(CUevent hEvent);
# 8497 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventSynchronize(CUevent hEvent);
# 8526 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventDestroy_v2(CUevent hEvent);
# 8570 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventElapsedTime(float *pMilliseconds, CUevent hStart, CUevent hEnd);
# 8605 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags);
# 8638 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags);
# 8670 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamBatchMemOp(CUstream stream, unsigned int count, CUstreamBatchMemOpParams *paramArray, unsigned int flags);
# 8738 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncGetAttribute(int *pi, CUfunction_attribute attrib, CUfunction hfunc);
# 8781 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config);
# 8833 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config);
# 8947 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchKernel(CUfunction f,
                                unsigned int gridDimX,
                                unsigned int gridDimY,
                                unsigned int gridDimZ,
                                unsigned int blockDimX,
                                unsigned int blockDimY,
                                unsigned int blockDimZ,
                                unsigned int sharedMemBytes,
                                CUstream hStream,
                                void **kernelParams,
                                void **extra);
# 9008 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z);
# 9042 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetSharedSize(CUfunction hfunc, unsigned int bytes);
# 9074 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSetSize(CUfunction hfunc, unsigned int numbytes);
# 9107 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSeti(CUfunction hfunc, int offset, unsigned int value);
# 9140 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSetf(CUfunction hfunc, int offset, float value);
# 9175 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSetv(CUfunction hfunc, int offset, void *ptr, unsigned int numbytes);
# 9212 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunch(CUfunction f);
# 9251 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchGrid(CUfunction f, int grid_width, int grid_height);
# 9298 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream);
# 9323 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef);
# 9361 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize);
# 9401 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 9451 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSize(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit);
# 9495 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSizeWithFlags(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned int flags);
# 9538 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned int Flags);
# 9565 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned int Flags);
# 9609 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetAddress_v2(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);
# 9661 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch);
# 9690 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);
# 9730 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am);
# 9763 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 9796 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 9822 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias);
# 9850 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp);
# 9876 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned int maxAniso);
# 9906 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetBorderColor(CUtexref hTexRef, float *pBorderColor);
# 9941 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetFlags(CUtexref hTexRef, unsigned int Flags);
# 9967 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetAddress_v2(CUdeviceptr *pdptr, CUtexref hTexRef);
# 9993 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetArray(CUarray *phArray, CUtexref hTexRef);
# 10018 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMipmappedArray(CUmipmappedArray *phMipmappedArray, CUtexref hTexRef);
# 10044 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetAddressMode(CUaddress_mode *pam, CUtexref hTexRef, int dim);
# 10068 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);
# 10094 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetFormat(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef);
# 10118 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);
# 10142 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMipmapLevelBias(float *pbias, CUtexref hTexRef);
# 10167 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMipmapLevelClamp(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, CUtexref hTexRef);
# 10191 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMaxAnisotropy(int *pmaxAniso, CUtexref hTexRef);
# 10218 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetBorderColor(float *pBorderColor, CUtexref hTexRef);
# 10241 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetFlags(unsigned int *pFlags, CUtexref hTexRef);
# 10280 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefCreate(CUtexref *pTexRef);
# 10300 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefDestroy(CUtexref hTexRef);
# 10339 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned int Flags);
# 10360 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfRefGetArray(CUarray *phArray, CUsurfref hSurfRef);
# 10582 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectCreate(CUtexObject *pTexObject, const CUDA_RESOURCE_DESC *pResDesc, const CUDA_TEXTURE_DESC *pTexDesc, const CUDA_RESOURCE_VIEW_DESC *pResViewDesc);
# 10600 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectDestroy(CUtexObject texObject);
# 10619 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUtexObject texObject);
# 10638 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC *pTexDesc, CUtexObject texObject);
# 10658 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC *pResViewDesc, CUtexObject texObject);
# 10699 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectCreate(CUsurfObject *pSurfObject, const CUDA_RESOURCE_DESC *pResDesc);
# 10717 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectDestroy(CUsurfObject surfObject);
# 10736 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUsurfObject surfObject);
# 10778 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceCanAccessPeer(int *canAccessPeer, CUdevice dev, CUdevice peerDev);
# 10815 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetP2PAttribute(int* value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice);
# 10864 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxEnablePeerAccess(CUcontext peerContext, unsigned int Flags);
# 10889 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxDisablePeerAccess(CUcontext peerContext);
# 10933 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsUnregisterResource(CUgraphicsResource resource);
# 10971 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsSubResourceGetMappedArray(CUarray *pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel);
# 11002 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray *pMipmappedArray, CUgraphicsResource resource);
# 11038 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource);
# 11079 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned int flags);
# 11118 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsMapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);
# 11154 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsUnmapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);



CUresult cuGetExportTable(const void **ppExportTable, const CUuuid *pExportTableId);
# 11477 "/usr/local/cuda/bin/../targets/x86_64-linux/include/cuda.h"
}
# 2 "neutron-omp.cu" 2




# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 55 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 71 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 189 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 7 "neutron-omp.cu" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 1
# 63 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h" 1
# 70 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"

# 70 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
extern "C" {
# 82 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
enum curandStatus {
    CURAND_STATUS_SUCCESS = 0,
    CURAND_STATUS_VERSION_MISMATCH = 100,
    CURAND_STATUS_NOT_INITIALIZED = 101,
    CURAND_STATUS_ALLOCATION_FAILED = 102,
    CURAND_STATUS_TYPE_ERROR = 103,
    CURAND_STATUS_OUT_OF_RANGE = 104,
    CURAND_STATUS_LENGTH_NOT_MULTIPLE = 105,
    CURAND_STATUS_DOUBLE_PRECISION_REQUIRED = 106,
    CURAND_STATUS_LAUNCH_FAILURE = 201,
    CURAND_STATUS_PREEXISTING_FAILURE = 202,
    CURAND_STATUS_INITIALIZATION_FAILED = 203,
    CURAND_STATUS_ARCH_MISMATCH = 204,
    CURAND_STATUS_INTERNAL_ERROR = 999
};





typedef enum curandStatus curandStatus_t;





enum curandRngType {
    CURAND_RNG_TEST = 0,
    CURAND_RNG_PSEUDO_DEFAULT = 100,
    CURAND_RNG_PSEUDO_XORWOW = 101,
    CURAND_RNG_PSEUDO_MRG32K3A = 121,
    CURAND_RNG_PSEUDO_MTGP32 = 141,
    CURAND_RNG_PSEUDO_MT19937 = 142,
    CURAND_RNG_PSEUDO_PHILOX4_32_10 = 161,
    CURAND_RNG_QUASI_DEFAULT = 200,
    CURAND_RNG_QUASI_SOBOL32 = 201,
    CURAND_RNG_QUASI_SCRAMBLED_SOBOL32 = 202,
    CURAND_RNG_QUASI_SOBOL64 = 203,
    CURAND_RNG_QUASI_SCRAMBLED_SOBOL64 = 204
};





typedef enum curandRngType curandRngType_t;





enum curandOrdering {
    CURAND_ORDERING_PSEUDO_BEST = 100,
    CURAND_ORDERING_PSEUDO_DEFAULT = 101,
    CURAND_ORDERING_PSEUDO_SEEDED = 102,
    CURAND_ORDERING_QUASI_DEFAULT = 201
};





typedef enum curandOrdering curandOrdering_t;





enum curandDirectionVectorSet {
    CURAND_DIRECTION_VECTORS_32_JOEKUO6 = 101,
    CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6 = 102,
    CURAND_DIRECTION_VECTORS_64_JOEKUO6 = 103,
    CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6 = 104
};





typedef enum curandDirectionVectorSet curandDirectionVectorSet_t;






typedef unsigned int curandDirectionVectors32_t[32];






typedef unsigned long long curandDirectionVectors64_t[64];





struct curandGenerator_st;





typedef struct curandGenerator_st *curandGenerator_t;






typedef double curandDistribution_st;
typedef curandDistribution_st *curandDistribution_t;
typedef struct curandDistributionShift_st *curandDistributionShift_t;





typedef struct curandDistributionM2Shift_st *curandDistributionM2Shift_t;
typedef struct curandHistogramM2_st *curandHistogramM2_t;
typedef unsigned int curandHistogramM2K_st;
typedef curandHistogramM2K_st *curandHistogramM2K_t;
typedef curandDistribution_st curandHistogramM2V_st;
typedef curandHistogramM2V_st *curandHistogramM2V_t;

typedef struct curandDiscreteDistribution_st *curandDiscreteDistribution_t;






enum curandMethod {
    CURAND_CHOOSE_BEST = 0,
    CURAND_ITR = 1,
    CURAND_KNUTH = 2,
    CURAND_HITR = 3,
    CURAND_M1 = 4,
    CURAND_M2 = 5,
    CURAND_BINARY_SEARCH = 6,
    CURAND_DISCRETE_GAUSS = 7,
    CURAND_REJECTION = 8,
    CURAND_DEVICE_API = 9,
    CURAND_FAST_REJECTION = 10,
    CURAND_3RD = 11,
    CURAND_DEFINITION = 12,
    CURAND_POISSON = 13
};

typedef enum curandMethod curandMethod_t;
# 321 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandCreateGenerator(curandGenerator_t *generator, curandRngType_t rng_type);
# 401 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandCreateGeneratorHost(curandGenerator_t *generator, curandRngType_t rng_type);
# 415 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandDestroyGenerator(curandGenerator_t generator);
# 431 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGetVersion(int *version);
# 447 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGetProperty(libraryPropertyType type, int *value);
# 464 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandSetStream(curandGenerator_t generator, cudaStream_t stream);
# 483 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandSetPseudoRandomGeneratorSeed(curandGenerator_t generator, unsigned long long seed);
# 501 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandSetGeneratorOffset(curandGenerator_t generator, unsigned long long offset);
# 525 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandSetGeneratorOrdering(curandGenerator_t generator, curandOrdering_t order);
# 545 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandSetQuasiRandomGeneratorDimensions(curandGenerator_t generator, unsigned int num_dimensions);
# 574 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerate(curandGenerator_t generator, unsigned int *outputPtr, size_t num);
# 602 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerateLongLong(curandGenerator_t generator, unsigned long long *outputPtr, size_t num);
# 630 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerateUniform(curandGenerator_t generator, float *outputPtr, size_t num);
# 659 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerateUniformDouble(curandGenerator_t generator, double *outputPtr, size_t num);
# 704 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerateNormal(curandGenerator_t generator, float *outputPtr,
                     size_t n, float mean, float stddev);
# 751 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerateNormalDouble(curandGenerator_t generator, double *outputPtr,
                     size_t n, double mean, double stddev);
# 798 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerateLogNormal(curandGenerator_t generator, float *outputPtr,
                     size_t n, float mean, float stddev);
# 846 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerateLogNormalDouble(curandGenerator_t generator, double *outputPtr,
                     size_t n, double mean, double stddev);
# 872 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandCreatePoissonDistribution(double lambda, curandDiscreteDistribution_t *discrete_distribution);
# 888 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandDestroyDistribution(curandDiscreteDistribution_t discrete_distribution);
# 920 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGeneratePoisson(curandGenerator_t generator, unsigned int *outputPtr,
                     size_t n, double lambda);

curandStatus_t
curandGeneratePoissonMethod(curandGenerator_t generator, unsigned int *outputPtr,
                     size_t n, double lambda, curandMethod_t method);


curandStatus_t
curandGenerateBinomial(curandGenerator_t generator, unsigned int *outputPtr,
                       size_t num, unsigned int n, double p);

curandStatus_t
curandGenerateBinomialMethod(curandGenerator_t generator,
                             unsigned int *outputPtr,
                             size_t num, unsigned int n, double p,
                             curandMethod_t method);
# 958 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGenerateSeeds(curandGenerator_t generator);
# 982 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGetDirectionVectors32(curandDirectionVectors32_t *vectors[], curandDirectionVectorSet_t set);
# 1000 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGetScrambleConstants32(unsigned int * * constants);
# 1024 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGetDirectionVectors64(curandDirectionVectors64_t *vectors[], curandDirectionVectorSet_t set);
# 1042 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand.h"
curandStatus_t
curandGetScrambleConstants64(unsigned long long * * constants);




}
# 64 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete.h" 1
# 52 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete.h"
struct curandDistributionShift_st {
    curandDistribution_t probability;
    curandDistribution_t host_probability;
    unsigned int shift;
    unsigned int length;
    unsigned int host_gen;
};

struct curandHistogramM2_st {
    curandHistogramM2V_t V;
    curandHistogramM2V_t host_V;
    curandHistogramM2K_t K;
    curandHistogramM2K_t host_K;
    unsigned int host_gen;
};


struct curandDistributionM2Shift_st {
    curandHistogramM2_t histogram;
    curandHistogramM2_t host_histogram;
    unsigned int shift;
    unsigned int length;
    unsigned int host_gen;
};

struct curandDiscreteDistribution_st {
    curandDiscreteDistribution_t self_host_ptr;
    curandDistributionM2Shift_t M2;
    curandDistributionM2Shift_t host_M2;
    double stddev;
    double mean;
    curandMethod_t method;
    unsigned int host_gen;
};
# 65 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_precalc.h" 1
# 56 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_precalc.h"
static __attribute__((device)) unsigned int precalc_xorwow_matrix[8][800] = {
{
850664906UL, 2293210629UL, 1517805917UL, 1215500405UL, 1612415445UL, 645388200UL, 824349799UL, 3517232886UL, 4075591755UL, 3089899292UL, 4249786064UL, 3811424903UL, 1100783479UL, 53649761UL, 2817264826UL, 3159462529UL, 1654848550UL, 950025444UL, 3095510002UL, 4080567211UL, 4111078399UL, 3241719305UL, 2788212779UL, 4256963770UL, 2426893717UL, 4190211142UL, 1420776905UL, 3780537969UL, 1102912875UL, 1657948873UL, 3354905256UL, 2519610308UL,
515777663UL, 3396785394UL, 1832603711UL, 1154211550UL, 1915690212UL, 1933919046UL, 789578337UL, 337961173UL, 1359089498UL, 2249086205UL, 3417955173UL, 862571348UL, 528120760UL, 1265685672UL, 1970052076UL, 3585976752UL, 3645339918UL, 312171257UL, 1360991400UL, 1994321680UL, 2327168468UL, 2540437053UL, 1180483641UL, 2217962701UL, 182726833UL, 590204372UL, 1904496495UL, 2545607041UL, 3697978033UL, 1084030545UL, 3397906968UL, 2192325323UL,
2704204176UL, 1069092002UL, 2364406907UL, 1578647245UL, 3561974633UL, 3437665426UL, 1464127305UL, 1616628807UL, 2243114101UL, 3639967880UL, 1702613633UL, 2437350057UL, 39991274UL, 2024323584UL, 3795072940UL, 3604530798UL, 443099203UL, 643536212UL, 1919517328UL, 3931285769UL, 427935569UL, 276421624UL, 2492081750UL, 262729512UL, 3088549877UL, 2922650665UL, 1816283755UL, 4246096489UL, 842575914UL, 1460435650UL, 3050522190UL, 2640849794UL,
3697925816UL, 3465779075UL, 3856929655UL, 1365559780UL, 2897029415UL, 2747033756UL, 3611830629UL, 1891542518UL, 1897590206UL, 437451803UL, 677924906UL, 123809117UL, 3940574372UL, 687640291UL, 3488484529UL, 470218446UL, 1092571016UL, 1537938503UL, 1073323937UL, 611300083UL, 3809285994UL, 3975678726UL, 925845389UL, 2514775760UL, 2859302390UL, 2761919483UL, 993285307UL, 164095287UL, 3736193671UL, 2078946336UL, 1418537059UL, 1202525920UL,
4234029440UL, 1313593624UL, 2484428922UL, 1833969372UL, 661495122UL, 2217907395UL, 2795045321UL, 2950835531UL, 1402379354UL, 351314168UL, 1902476749UL, 1914974334UL, 2873973176UL, 1321203603UL, 3316118265UL, 3282193947UL, 1342191737UL, 793441242UL, 3281524559UL, 296088733UL, 487851702UL, 712098215UL, 1388727135UL, 1705533557UL, 3557800292UL, 399729516UL, 1355829467UL, 291276309UL, 421164833UL, 1318404599UL, 2064519128UL, 1161612642UL,
2076623594UL, 850664906UL, 2293210629UL, 1517805917UL, 1215500405UL, 3847487204UL, 645388200UL, 824349799UL, 3517232886UL, 4075591755UL, 2755872609UL, 4249786064UL, 3811424903UL, 1100783479UL, 53649761UL, 1417544262UL, 3159462529UL, 1654848550UL, 950025444UL, 3095510002UL, 1908900347UL, 4111078399UL, 3241719305UL, 2788212779UL, 4256963770UL, 3750258343UL, 4190211142UL, 1420776905UL, 3780537969UL, 1102912875UL, 1690550UL, 3354905256UL,
2519610308UL, 515777663UL, 3396785394UL, 2658162202UL, 1154211550UL, 1915690212UL, 1933919046UL, 789578337UL, 189880016UL, 1359089498UL, 2249086205UL, 3417955173UL, 862571348UL, 998719835UL, 1265685672UL, 1970052076UL, 3585976752UL, 3645339918UL, 2973042959UL, 1360991400UL, 1994321680UL, 2327168468UL, 2540437053UL, 2283905032UL, 2217962701UL, 182726833UL, 590204372UL, 1904496495UL, 110719262UL, 3697978033UL, 1084030545UL, 3397906968UL,
2192325323UL, 4133333579UL, 1069092002UL, 2364406907UL, 1578647245UL, 3561974633UL, 3629845331UL, 1464127305UL, 1616628807UL, 2243114101UL, 3639967880UL, 3256744141UL, 2437350057UL, 39991274UL, 2024323584UL, 3795072940UL, 1024703328UL, 443099203UL, 643536212UL, 1919517328UL, 3931285769UL, 2755167056UL, 276421624UL, 2492081750UL, 262729512UL, 3088549877UL, 2817867653UL, 1816283755UL, 4246096489UL, 842575914UL, 1460435650UL, 2276077438UL,
2640849794UL, 3697925816UL, 3465779075UL, 3856929655UL, 130551477UL, 2897029415UL, 2747033756UL, 3611830629UL, 1891542518UL, 804565809UL, 437451803UL, 677924906UL, 123809117UL, 3940574372UL, 2446610749UL, 3488484529UL, 470218446UL, 1092571016UL, 1537938503UL, 1502147484UL, 611300083UL, 3809285994UL, 3975678726UL, 925845389UL, 872826112UL, 2859302390UL, 2761919483UL, 993285307UL, 164095287UL, 3901654538UL, 2078946336UL, 1418537059UL,
1202525920UL, 4234029440UL, 704759480UL, 2484428922UL, 1833969372UL, 661495122UL, 2217907395UL, 3287413716UL, 2950835531UL, 1402379354UL, 351314168UL, 1902476749UL, 2033316109UL, 2873973176UL, 1321203603UL, 3316118265UL, 3282193947UL, 1316780684UL, 793441242UL, 3281524559UL, 296088733UL, 487851702UL, 314311643UL, 1388727135UL, 1705533557UL, 3557800292UL, 399729516UL, 1660074989UL, 291276309UL, 421164833UL, 1318404599UL, 2064519128UL,
3156334112UL, 2076623594UL, 850664906UL, 2293210629UL, 1517805917UL, 335452425UL, 3847487204UL, 645388200UL, 824349799UL, 3517232886UL, 954487767UL, 2755872609UL, 4249786064UL, 3811424903UL, 1100783479UL, 3408594583UL, 1417544262UL, 3159462529UL, 1654848550UL, 950025444UL, 324339737UL, 1908900347UL, 4111078399UL, 3241719305UL, 2788212779UL, 1890540205UL, 3750258343UL, 4190211142UL, 1420776905UL, 3780537969UL, 3716648585UL, 1690550UL,
3354905256UL, 2519610308UL, 515777663UL, 3758156132UL, 2658162202UL, 1154211550UL, 1915690212UL, 1933919046UL, 844149171UL, 189880016UL, 1359089498UL, 2249086205UL, 3417955173UL, 1031812215UL, 998719835UL, 1265685672UL, 1970052076UL, 3585976752UL, 3174204115UL, 2973042959UL, 1360991400UL, 1994321680UL, 2327168468UL, 714016907UL, 2283905032UL, 2217962701UL, 182726833UL, 590204372UL, 2151450260UL, 110719262UL, 3697978033UL, 1084030545UL,
3397906968UL, 767772303UL, 4133333579UL, 1069092002UL, 2364406907UL, 1578647245UL, 42955292UL, 3629845331UL, 1464127305UL, 1616628807UL, 2243114101UL, 3222189776UL, 3256744141UL, 2437350057UL, 39991274UL, 2024323584UL, 3142424684UL, 1024703328UL, 443099203UL, 643536212UL, 1919517328UL, 918511196UL, 2755167056UL, 276421624UL, 2492081750UL, 262729512UL, 4246877536UL, 2817867653UL, 1816283755UL, 4246096489UL, 842575914UL, 1425765936UL,
2276077438UL, 2640849794UL, 3697925816UL, 3465779075UL, 1491702526UL, 130551477UL, 2897029415UL, 2747033756UL, 3611830629UL, 1844578694UL, 804565809UL, 437451803UL, 677924906UL, 123809117UL, 3419189841UL, 2446610749UL, 3488484529UL, 470218446UL, 1092571016UL, 3272535988UL, 1502147484UL, 611300083UL, 3809285994UL, 3975678726UL, 2853681168UL, 872826112UL, 2859302390UL, 2761919483UL, 993285307UL, 1434560128UL, 3901654538UL, 2078946336UL,
1418537059UL, 1202525920UL, 2530097881UL, 704759480UL, 2484428922UL, 1833969372UL, 661495122UL, 503878844UL, 3287413716UL, 2950835531UL, 1402379354UL, 351314168UL, 4131886119UL, 2033316109UL, 2873973176UL, 1321203603UL, 3316118265UL, 237900321UL, 1316780684UL, 793441242UL, 3281524559UL, 296088733UL, 1730738847UL, 314311643UL, 1388727135UL, 1705533557UL, 3557800292UL, 1553835665UL, 1660074989UL, 291276309UL, 421164833UL, 1318404599UL,
964731488UL, 3156334112UL, 2076623594UL, 850664906UL, 2293210629UL, 1105350579UL, 335452425UL, 3847487204UL, 645388200UL, 824349799UL, 2789953706UL, 954487767UL, 2755872609UL, 4249786064UL, 3811424903UL, 3937839949UL, 3408594583UL, 1417544262UL, 3159462529UL, 1654848550UL, 624060530UL, 324339737UL, 1908900347UL, 4111078399UL, 3241719305UL, 2294919498UL, 1890540205UL, 3750258343UL, 4190211142UL, 1420776905UL, 2279133729UL, 3716648585UL,
1690550UL, 3354905256UL, 2519610308UL, 3563975602UL, 3758156132UL, 2658162202UL, 1154211550UL, 1915690212UL, 3505586122UL, 844149171UL, 189880016UL, 1359089498UL, 2249086205UL, 2389487504UL, 1031812215UL, 998719835UL, 1265685672UL, 1970052076UL, 2798611919UL, 3174204115UL, 2973042959UL, 1360991400UL, 1994321680UL, 1684134678UL, 714016907UL, 2283905032UL, 2217962701UL, 182726833UL, 1734988742UL, 2151450260UL, 110719262UL, 3697978033UL,
1084030545UL, 159906818UL, 767772303UL, 4133333579UL, 1069092002UL, 2364406907UL, 1290801202UL, 42955292UL, 3629845331UL, 1464127305UL, 1616628807UL, 987794861UL, 3222189776UL, 3256744141UL, 2437350057UL, 39991274UL, 3644076751UL, 3142424684UL, 1024703328UL, 443099203UL, 643536212UL, 1487589384UL, 918511196UL, 2755167056UL, 276421624UL, 2492081750UL, 137688638UL, 4246877536UL, 2817867653UL, 1816283755UL, 4246096489UL, 1518475380UL,
1425765936UL, 2276077438UL, 2640849794UL, 3697925816UL, 4226506771UL, 1491702526UL, 130551477UL, 2897029415UL, 2747033756UL, 2033599579UL, 1844578694UL, 804565809UL, 437451803UL, 677924906UL, 2749065512UL, 3419189841UL, 2446610749UL, 3488484529UL, 470218446UL, 290444026UL, 3272535988UL, 1502147484UL, 611300083UL, 3809285994UL, 2546040767UL, 2853681168UL, 872826112UL, 2859302390UL, 2761919483UL, 4097961150UL, 1434560128UL, 3901654538UL,
2078946336UL, 1418537059UL, 2725734455UL, 2530097881UL, 704759480UL, 2484428922UL, 1833969372UL, 3999408333UL, 503878844UL, 3287413716UL, 2950835531UL, 1402379354UL, 3861442503UL, 4131886119UL, 2033316109UL, 2873973176UL, 1321203603UL, 1267331405UL, 237900321UL, 1316780684UL, 793441242UL, 3281524559UL, 1273427916UL, 1730738847UL, 314311643UL, 1388727135UL, 1705533557UL, 1474310231UL, 1553835665UL, 1660074989UL, 291276309UL, 421164833UL,
3884815658UL, 3088049345UL, 3307042227UL, 3228948601UL, 1717605083UL, 1864502063UL, 3799516572UL, 2372822470UL, 2691586476UL, 1172840854UL, 1577099080UL, 870101866UL, 2139291021UL, 406996656UL, 255568268UL, 897760202UL, 674745664UL, 885214361UL, 3753233375UL, 3015215223UL, 1711461259UL, 3241363282UL, 2125360928UL, 2493601640UL, 2350228245UL, 3434627328UL, 2095642963UL, 3360932494UL, 3287396242UL, 4070512427UL, 3415702664UL, 1958354224UL,
3280206940UL, 3929504236UL, 3390499817UL, 4144225735UL, 3621750606UL, 3205006592UL, 3495743785UL, 269239326UL, 2181299371UL, 2898796651UL, 2613623219UL, 3988711298UL, 2162437858UL, 949553433UL, 3289670000UL, 3559525307UL, 3366925567UL, 2112148665UL, 955626393UL, 1790865381UL, 699223558UL, 3889584301UL, 1020750250UL, 4105283899UL, 2295851818UL, 4045668915UL, 2224770025UL, 766386910UL, 4265157386UL, 89139307UL, 2099710177UL, 1012450874UL,
1875492446UL, 1927399417UL, 767450812UL, 654474783UL, 4265293038UL, 4041215389UL, 4102336947UL, 4263617328UL, 2135826340UL, 2317231535UL, 3773895729UL, 403151111UL, 1400693138UL, 4255050194UL, 755369466UL, 2325764302UL, 2617301159UL, 4165707294UL, 1206304709UL, 2415645397UL, 4276004841UL, 1457022279UL, 662660652UL, 795140282UL, 828519889UL, 805830562UL, 1179976369UL, 2212548232UL, 755708248UL, 1034682071UL, 899950902UL, 1906046264UL,
1861009040UL, 310711525UL, 920739741UL, 2322414272UL, 3179236470UL, 81822135UL, 4111390320UL, 1800166783UL, 112253014UL, 688771939UL, 1050990794UL, 3124647483UL, 287052171UL, 1363630156UL, 3447798279UL, 1405733552UL, 3075862538UL, 1682808202UL, 1595154222UL, 1173705692UL, 680713285UL, 2748212230UL, 568610527UL, 3434965538UL, 1114942930UL, 2835858745UL, 2575992250UL, 3243355150UL, 2127580225UL, 1855934450UL, 3915941751UL, 2228679809UL,
1514780124UL, 1506688039UL, 1033083295UL, 793807083UL, 1120681149UL, 4105670165UL, 3999570340UL, 2083020131UL, 1213356023UL, 3684882757UL, 3375797774UL, 3577986103UL, 2092046164UL, 2593847443UL, 1826450612UL, 367828409UL, 3198272513UL, 1941316667UL, 943707510UL, 907134807UL, 2020457947UL, 1462193665UL, 2964617539UL, 4216491663UL, 2625270800UL, 2395371467UL, 3691003028UL, 3659016793UL, 2381847054UL, 3513105567UL, 3013019506UL, 2731245927UL,
},
{
1680024716UL, 2112340059UL, 3387475367UL, 2080916186UL, 1431532386UL, 3907378472UL, 2636491350UL, 2176128529UL, 2236616671UL, 3736851460UL, 2604001339UL, 3893075234UL, 3495918635UL, 4116370522UL, 1384310379UL, 3660102574UL, 2030233939UL, 2759207091UL, 49347923UL, 97526506UL, 2566932710UL, 1566181275UL, 3127827248UL, 578401670UL, 1499229308UL, 2581732444UL, 279715551UL, 809690877UL, 1438444015UL, 878935323UL, 1495277039UL, 3417305339UL,
2858903785UL, 3074075088UL, 603749086UL, 2370669734UL, 391683868UL, 3933465331UL, 2884128106UL, 1478317876UL, 1864988335UL, 2925823809UL, 4133578805UL, 218104493UL, 368652174UL, 1998600344UL, 1109346044UL, 1716435313UL, 415435111UL, 91393686UL, 2536620737UL, 1440068573UL, 481874870UL, 142128108UL, 988825519UL, 2077118779UL, 2858045339UL, 4068162251UL, 115593872UL, 1364244587UL, 3550167006UL, 3728768059UL, 1772423685UL, 2504624145UL,
248732306UL, 1412607307UL, 4081166331UL, 154438218UL, 1652901877UL, 3932533490UL, 3142799969UL, 3154073676UL, 3112018078UL, 2757873595UL, 2364830126UL, 2855791484UL, 793851407UL, 507785167UL, 263713916UL, 4060700051UL, 3291978358UL, 1584226715UL, 2546417990UL, 450747961UL, 2951067700UL, 2706009093UL, 1788578194UL, 4030171132UL, 2610979903UL, 573420740UL, 4269115622UL, 2180305819UL, 2646894726UL, 716649335UL, 3875715683UL, 853428184UL,
2436760738UL, 4190071217UL, 2754423535UL, 540698101UL, 4082489821UL, 741976046UL, 267559495UL, 1591532642UL, 2500610323UL, 3203248679UL, 147312102UL, 2772368222UL, 1412987047UL, 2295185573UL, 1932341300UL, 898396308UL, 1837129999UL, 3113914292UL, 2613354524UL, 3141601915UL, 276087167UL, 1887389351UL, 757801450UL, 3752353732UL, 2745818074UL, 1442953464UL, 3802648347UL, 223728071UL, 2169947402UL, 1338125300UL, 3642174036UL, 2794462634UL,
2326349851UL, 862746036UL, 3577092599UL, 627103363UL, 552173564UL, 4142604459UL, 2310329406UL, 583522272UL, 189323282UL, 1217612313UL, 73550248UL, 2434692829UL, 2757269706UL, 2392210091UL, 3032922600UL, 3573904125UL, 2897178037UL, 2632631469UL, 3085332665UL, 3775619904UL, 2563291734UL, 1351375865UL, 4043427793UL, 1803743084UL, 3112116579UL, 522940594UL, 2690374983UL, 2613871529UL, 3810037031UL, 1765642390UL, 534554747UL, 1930852049UL,
2264349344UL, 1680024716UL, 2112340059UL, 3387475367UL, 2080916186UL, 75966494UL, 3907378472UL, 2636491350UL, 2176128529UL, 2236616671UL, 2372987046UL, 2604001339UL, 3893075234UL, 3495918635UL, 4116370522UL, 534929913UL, 3660102574UL, 2030233939UL, 2759207091UL, 49347923UL, 987575186UL, 2566932710UL, 1566181275UL, 3127827248UL, 578401670UL, 3731513754UL, 2581732444UL, 279715551UL, 809690877UL, 1438444015UL, 2185866850UL, 1495277039UL,
3417305339UL, 2858903785UL, 3074075088UL, 4198538376UL, 2370669734UL, 391683868UL, 3933465331UL, 2884128106UL, 1400216510UL, 1864988335UL, 2925823809UL, 4133578805UL, 218104493UL, 2798390374UL, 1998600344UL, 1109346044UL, 1716435313UL, 415435111UL, 1892535124UL, 2536620737UL, 1440068573UL, 481874870UL, 142128108UL, 329082740UL, 2077118779UL, 2858045339UL, 4068162251UL, 115593872UL, 2644000449UL, 3550167006UL, 3728768059UL, 1772423685UL,
2504624145UL, 2140118619UL, 1412607307UL, 4081166331UL, 154438218UL, 1652901877UL, 3804911318UL, 3142799969UL, 3154073676UL, 3112018078UL, 2757873595UL, 50297646UL, 2855791484UL, 793851407UL, 507785167UL, 263713916UL, 3324588195UL, 3291978358UL, 1584226715UL, 2546417990UL, 450747961UL, 3455625012UL, 2706009093UL, 1788578194UL, 4030171132UL, 2610979903UL, 3835380965UL, 4269115622UL, 2180305819UL, 2646894726UL, 716649335UL, 2607142354UL,
853428184UL, 2436760738UL, 4190071217UL, 2754423535UL, 456808691UL, 4082489821UL, 741976046UL, 267559495UL, 1591532642UL, 2722205042UL, 3203248679UL, 147312102UL, 2772368222UL, 1412987047UL, 1950543946UL, 1932341300UL, 898396308UL, 1837129999UL, 3113914292UL, 428616392UL, 3141601915UL, 276087167UL, 1887389351UL, 757801450UL, 963534966UL, 2745818074UL, 1442953464UL, 3802648347UL, 223728071UL, 229039300UL, 1338125300UL, 3642174036UL,
2794462634UL, 2326349851UL, 206115203UL, 3577092599UL, 627103363UL, 552173564UL, 4142604459UL, 1492461846UL, 583522272UL, 189323282UL, 1217612313UL, 73550248UL, 3552211807UL, 2757269706UL, 2392210091UL, 3032922600UL, 3573904125UL, 810640644UL, 2632631469UL, 3085332665UL, 3775619904UL, 2563291734UL, 922608790UL, 4043427793UL, 1803743084UL, 3112116579UL, 522940594UL, 1785093944UL, 2613871529UL, 3810037031UL, 1765642390UL, 534554747UL,
3528050076UL, 2264349344UL, 1680024716UL, 2112340059UL, 3387475367UL, 3295682653UL, 75966494UL, 3907378472UL, 2636491350UL, 2176128529UL, 3574915532UL, 2372987046UL, 2604001339UL, 3893075234UL, 3495918635UL, 1280296085UL, 534929913UL, 3660102574UL, 2030233939UL, 2759207091UL, 299776535UL, 987575186UL, 2566932710UL, 1566181275UL, 3127827248UL, 3874691533UL, 3731513754UL, 2581732444UL, 279715551UL, 809690877UL, 3100791084UL, 2185866850UL,
1495277039UL, 3417305339UL, 2858903785UL, 1310351481UL, 4198538376UL, 2370669734UL, 391683868UL, 3933465331UL, 2749085130UL, 1400216510UL, 1864988335UL, 2925823809UL, 4133578805UL, 3352814594UL, 2798390374UL, 1998600344UL, 1109346044UL, 1716435313UL, 1571752941UL, 1892535124UL, 2536620737UL, 1440068573UL, 481874870UL, 2485033697UL, 329082740UL, 2077118779UL, 2858045339UL, 4068162251UL, 3837440666UL, 2644000449UL, 3550167006UL, 3728768059UL,
1772423685UL, 1176559812UL, 2140118619UL, 1412607307UL, 4081166331UL, 154438218UL, 2902622972UL, 3804911318UL, 3142799969UL, 3154073676UL, 3112018078UL, 2403391233UL, 50297646UL, 2855791484UL, 793851407UL, 507785167UL, 2351826747UL, 3324588195UL, 3291978358UL, 1584226715UL, 2546417990UL, 746876926UL, 3455625012UL, 2706009093UL, 1788578194UL, 4030171132UL, 3779307353UL, 3835380965UL, 4269115622UL, 2180305819UL, 2646894726UL, 2602235234UL,
2607142354UL, 853428184UL, 2436760738UL, 4190071217UL, 2066757692UL, 456808691UL, 4082489821UL, 741976046UL, 267559495UL, 3001080633UL, 2722205042UL, 3203248679UL, 147312102UL, 2772368222UL, 89950260UL, 1950543946UL, 1932341300UL, 898396308UL, 1837129999UL, 947911286UL, 428616392UL, 3141601915UL, 276087167UL, 1887389351UL, 2583987247UL, 963534966UL, 2745818074UL, 1442953464UL, 3802648347UL, 4229124441UL, 229039300UL, 1338125300UL,
3642174036UL, 2794462634UL, 2472155633UL, 206115203UL, 3577092599UL, 627103363UL, 552173564UL, 2586882739UL, 1492461846UL, 583522272UL, 189323282UL, 1217612313UL, 3501549884UL, 3552211807UL, 2757269706UL, 2392210091UL, 3032922600UL, 740675778UL, 810640644UL, 2632631469UL, 3085332665UL, 3775619904UL, 3643289881UL, 922608790UL, 4043427793UL, 1803743084UL, 3112116579UL, 2213337398UL, 1785093944UL, 2613871529UL, 3810037031UL, 1765642390UL,
762472016UL, 3528050076UL, 2264349344UL, 1680024716UL, 2112340059UL, 1372272974UL, 3295682653UL, 75966494UL, 3907378472UL, 2636491350UL, 3117471955UL, 3574915532UL, 2372987046UL, 2604001339UL, 3893075234UL, 915576383UL, 1280296085UL, 534929913UL, 3660102574UL, 2030233939UL, 346368350UL, 299776535UL, 987575186UL, 2566932710UL, 1566181275UL, 3535223896UL, 3874691533UL, 3731513754UL, 2581732444UL, 279715551UL, 2456894951UL, 3100791084UL,
2185866850UL, 1495277039UL, 3417305339UL, 1618871086UL, 1310351481UL, 4198538376UL, 2370669734UL, 391683868UL, 2009676005UL, 2749085130UL, 1400216510UL, 1864988335UL, 2925823809UL, 58955107UL, 3352814594UL, 2798390374UL, 1998600344UL, 1109346044UL, 3273979614UL, 1571752941UL, 1892535124UL, 2536620737UL, 1440068573UL, 1174168447UL, 2485033697UL, 329082740UL, 2077118779UL, 2858045339UL, 4062921629UL, 3837440666UL, 2644000449UL, 3550167006UL,
3728768059UL, 2642133401UL, 1176559812UL, 2140118619UL, 1412607307UL, 4081166331UL, 3124905304UL, 2902622972UL, 3804911318UL, 3142799969UL, 3154073676UL, 1449454613UL, 2403391233UL, 50297646UL, 2855791484UL, 793851407UL, 3514201526UL, 2351826747UL, 3324588195UL, 3291978358UL, 1584226715UL, 3636681672UL, 746876926UL, 3455625012UL, 2706009093UL, 1788578194UL, 3451519459UL, 3779307353UL, 3835380965UL, 4269115622UL, 2180305819UL, 3987989524UL,
2602235234UL, 2607142354UL, 853428184UL, 2436760738UL, 2151617107UL, 2066757692UL, 456808691UL, 4082489821UL, 741976046UL, 3590081269UL, 3001080633UL, 2722205042UL, 3203248679UL, 147312102UL, 3432947806UL, 89950260UL, 1950543946UL, 1932341300UL, 898396308UL, 3828432864UL, 947911286UL, 428616392UL, 3141601915UL, 276087167UL, 2517666433UL, 2583987247UL, 963534966UL, 2745818074UL, 1442953464UL, 2223986807UL, 4229124441UL, 229039300UL,
1338125300UL, 3642174036UL, 1053796945UL, 2472155633UL, 206115203UL, 3577092599UL, 627103363UL, 1113276084UL, 2586882739UL, 1492461846UL, 583522272UL, 189323282UL, 1490604990UL, 3501549884UL, 3552211807UL, 2757269706UL, 2392210091UL, 3545407532UL, 740675778UL, 810640644UL, 2632631469UL, 3085332665UL, 755862267UL, 3643289881UL, 922608790UL, 4043427793UL, 1803743084UL, 1954166630UL, 2213337398UL, 1785093944UL, 2613871529UL, 3810037031UL,
3042935707UL, 3162182177UL, 2791346436UL, 1901925289UL, 863100941UL, 3367519168UL, 1972623238UL, 3664303070UL, 604922059UL, 3026817982UL, 1436412310UL, 4096180631UL, 1597561857UL, 4206212303UL, 4127914332UL, 3228677359UL, 3985733659UL, 3597290113UL, 4251197894UL, 3451370603UL, 609679338UL, 3360835257UL, 1372239885UL, 638572328UL, 3806422284UL, 3974147336UL, 1804280837UL, 4209089291UL, 2021797469UL, 3557188838UL, 409727186UL, 2114649178UL,
687702120UL, 2542445992UL, 1235991799UL, 460479179UL, 2008348175UL, 887884478UL, 3942327811UL, 2999928223UL, 4171339789UL, 2286339235UL, 1293442231UL, 1575942850UL, 76122475UL, 1440527701UL, 2006558403UL, 1544148172UL, 895899367UL, 681826913UL, 4094701935UL, 3995413790UL, 1027509154UL, 2264990896UL, 1938238113UL, 213430250UL, 222469320UL, 609726517UL, 3581538106UL, 492802663UL, 120480843UL, 1720004062UL, 1132674507UL, 911082758UL,
2909148131UL, 566658805UL, 3964114445UL, 3483602509UL, 1793438750UL, 165562604UL, 3641830063UL, 2394205521UL, 3404874822UL, 1672998096UL, 916151953UL, 1141264477UL, 3171661340UL, 3803396219UL, 3018337382UL, 1863902683UL, 2474641928UL, 3250365071UL, 3897886220UL, 1219701051UL, 51332576UL, 1358614881UL, 1707407492UL, 3670647816UL, 923357625UL, 343687395UL, 3991339686UL, 3913575403UL, 1267727936UL, 4001357856UL, 3820224848UL, 2942896724UL,
3505936742UL, 1403285299UL, 1992762049UL, 567748449UL, 2202721585UL, 2781324216UL, 1724850068UL, 2408314541UL, 3073975813UL, 3992810029UL, 2475242354UL, 540562053UL, 2185198943UL, 3759352041UL, 3373885614UL, 1132999410UL, 1097554565UL, 4089342358UL, 3239542922UL, 2451748646UL, 407290679UL, 3188103200UL, 1708016248UL, 26848241UL, 2796711130UL, 3090711568UL, 4068389322UL, 3420916085UL, 3137567033UL, 2877819818UL, 22133454UL, 4629160UL,
3703695249UL, 1920151708UL, 1175452162UL, 130015299UL, 3331834713UL, 1099225384UL, 689254331UL, 1851083761UL, 2654970209UL, 3259297936UL, 3742819314UL, 3524284766UL, 2291819083UL, 3494031861UL, 16242889UL, 3545082774UL, 1997878108UL, 777447699UL, 4244916543UL, 3508640253UL, 3782278393UL, 2107258964UL, 2139074576UL, 1383217899UL, 2337934322UL, 3181899620UL, 1285955765UL, 2989610020UL, 3326862146UL, 1168587380UL, 801203532UL, 3020809957UL,
},
{
3810471203UL, 1017064446UL, 1595207573UL, 441087832UL, 3326746890UL, 3294064431UL, 167972517UL, 3625210015UL, 1011845006UL, 2980240819UL, 1778354660UL, 3041730987UL, 1598611350UL, 2015169745UL, 2321724978UL, 3390812967UL, 2432904511UL, 113261909UL, 3957193232UL, 3806115908UL, 2965828929UL, 2035392295UL, 3500116619UL, 2881232416UL, 1672212265UL, 1607201428UL, 425148945UL, 1262591961UL, 2221781268UL, 4215047456UL, 2148245850UL, 2787488981UL,
1077262192UL, 2085467561UL, 3053954888UL, 3584435116UL, 3013084787UL, 287099941UL, 1290407232UL, 4078552287UL, 2658945475UL, 4251530898UL, 2403086478UL, 2884923598UL, 3545110453UL, 4105390090UL, 343200643UL, 3189888821UL, 4086304363UL, 3466483195UL, 259435633UL, 2846377387UL, 497258846UL, 272775541UL, 985737911UL, 2957688879UL, 2180784344UL, 3434619542UL, 3643384838UL, 2228652440UL, 3107480718UL, 2208729807UL, 596436263UL, 3255120711UL,
3248886970UL, 519242965UL, 602979109UL, 1619614UL, 1391563565UL, 56262588UL, 1584463910UL, 1849038201UL, 728022295UL, 848624947UL, 1813827408UL, 428214945UL, 1246345586UL, 4213351865UL, 168985863UL, 456608054UL, 4277869380UL, 3886828599UL, 2264054549UL, 3110967170UL, 3138175314UL, 2649164828UL, 3369378320UL, 3648350039UL, 3524848759UL, 1468470706UL, 3558859222UL, 2669673235UL, 831851874UL, 4285651092UL, 4224147373UL, 1088456706UL,
231954609UL, 3118005852UL, 225508069UL, 883105389UL, 856371341UL, 2001356578UL, 639336670UL, 2363501707UL, 3622399552UL, 4024065226UL, 1093546838UL, 4263608561UL, 1852072422UL, 425195042UL, 2441102396UL, 296426333UL, 384641750UL, 3559334435UL, 1757327033UL, 1016016207UL, 3595686646UL, 24777793UL, 623926105UL, 2169195923UL, 1779396793UL, 646997837UL, 1459728476UL, 2644865980UL, 1994581089UL, 3956278544UL, 919592580UL, 2153558858UL,
2029633394UL, 3837501009UL, 4016560170UL, 484838096UL, 3652199054UL, 1971790561UL, 605295089UL, 637470291UL, 278970544UL, 3574824693UL, 295866521UL, 1755035156UL, 2542341803UL, 1588716357UL, 1502596918UL, 4124554133UL, 3547049843UL, 1768033045UL, 1531734630UL, 101448323UL, 3233017580UL, 1793222944UL, 3187853500UL, 186000900UL, 803444571UL, 2820254958UL, 2009384608UL, 2384668855UL, 2222812920UL, 633608665UL, 2028480056UL, 1258028235UL,
545095949UL, 3810471203UL, 1017064446UL, 1595207573UL, 441087832UL, 899068662UL, 3294064431UL, 167972517UL, 3625210015UL, 1011845006UL, 3951305793UL, 1778354660UL, 3041730987UL, 1598611350UL, 2015169745UL, 1885149424UL, 3390812967UL, 2432904511UL, 113261909UL, 3957193232UL, 3953443155UL, 2965828929UL, 2035392295UL, 3500116619UL, 2881232416UL, 329153573UL, 1607201428UL, 425148945UL, 1262591961UL, 2221781268UL, 78028761UL, 2148245850UL,
2787488981UL, 1077262192UL, 2085467561UL, 647235899UL, 3584435116UL, 3013084787UL, 287099941UL, 1290407232UL, 1467385694UL, 2658945475UL, 4251530898UL, 2403086478UL, 2884923598UL, 3489351040UL, 4105390090UL, 343200643UL, 3189888821UL, 4086304363UL, 3521512280UL, 259435633UL, 2846377387UL, 497258846UL, 272775541UL, 1367093111UL, 2957688879UL, 2180784344UL, 3434619542UL, 3643384838UL, 411877686UL, 3107480718UL, 2208729807UL, 596436263UL,
3255120711UL, 584605030UL, 519242965UL, 602979109UL, 1619614UL, 1391563565UL, 3902518209UL, 1584463910UL, 1849038201UL, 728022295UL, 848624947UL, 1932969318UL, 428214945UL, 1246345586UL, 4213351865UL, 168985863UL, 2770345237UL, 4277869380UL, 3886828599UL, 2264054549UL, 3110967170UL, 2953581033UL, 2649164828UL, 3369378320UL, 3648350039UL, 3524848759UL, 2380353977UL, 3558859222UL, 2669673235UL, 831851874UL, 4285651092UL, 1214052447UL,
1088456706UL, 231954609UL, 3118005852UL, 225508069UL, 1766983646UL, 856371341UL, 2001356578UL, 639336670UL, 2363501707UL, 1782816591UL, 4024065226UL, 1093546838UL, 4263608561UL, 1852072422UL, 1149716600UL, 2441102396UL, 296426333UL, 384641750UL, 3559334435UL, 2391309970UL, 1016016207UL, 3595686646UL, 24777793UL, 623926105UL, 362098678UL, 1779396793UL, 646997837UL, 1459728476UL, 2644865980UL, 3238673748UL, 3956278544UL, 919592580UL,
2153558858UL, 2029633394UL, 115778559UL, 4016560170UL, 484838096UL, 3652199054UL, 1971790561UL, 737357475UL, 637470291UL, 278970544UL, 3574824693UL, 295866521UL, 3989745853UL, 2542341803UL, 1588716357UL, 1502596918UL, 4124554133UL, 3016849744UL, 1768033045UL, 1531734630UL, 101448323UL, 3233017580UL, 4157527581UL, 3187853500UL, 186000900UL, 803444571UL, 2820254958UL, 1980528062UL, 2384668855UL, 2222812920UL, 633608665UL, 2028480056UL,
3166710281UL, 545095949UL, 3810471203UL, 1017064446UL, 1595207573UL, 693962828UL, 899068662UL, 3294064431UL, 167972517UL, 3625210015UL, 1486040398UL, 3951305793UL, 1778354660UL, 3041730987UL, 1598611350UL, 2859363132UL, 1885149424UL, 3390812967UL, 2432904511UL, 113261909UL, 664880478UL, 3953443155UL, 2965828929UL, 2035392295UL, 3500116619UL, 558081801UL, 329153573UL, 1607201428UL, 425148945UL, 1262591961UL, 3716247699UL, 78028761UL,
2148245850UL, 2787488981UL, 1077262192UL, 4206362947UL, 647235899UL, 3584435116UL, 3013084787UL, 287099941UL, 2536781098UL, 1467385694UL, 2658945475UL, 4251530898UL, 2403086478UL, 3075072413UL, 3489351040UL, 4105390090UL, 343200643UL, 3189888821UL, 2540485172UL, 3521512280UL, 259435633UL, 2846377387UL, 497258846UL, 2442427327UL, 1367093111UL, 2957688879UL, 2180784344UL, 3434619542UL, 1593967423UL, 411877686UL, 3107480718UL, 2208729807UL,
596436263UL, 1048686529UL, 584605030UL, 519242965UL, 602979109UL, 1619614UL, 2072745381UL, 3902518209UL, 1584463910UL, 1849038201UL, 728022295UL, 846033949UL, 1932969318UL, 428214945UL, 1246345586UL, 4213351865UL, 1066373275UL, 2770345237UL, 4277869380UL, 3886828599UL, 2264054549UL, 1877859690UL, 2953581033UL, 2649164828UL, 3369378320UL, 3648350039UL, 2537763389UL, 2380353977UL, 3558859222UL, 2669673235UL, 831851874UL, 522748140UL,
1214052447UL, 1088456706UL, 231954609UL, 3118005852UL, 1381269315UL, 1766983646UL, 856371341UL, 2001356578UL, 639336670UL, 667275675UL, 1782816591UL, 4024065226UL, 1093546838UL, 4263608561UL, 2057337961UL, 1149716600UL, 2441102396UL, 296426333UL, 384641750UL, 340523210UL, 2391309970UL, 1016016207UL, 3595686646UL, 24777793UL, 3094832341UL, 362098678UL, 1779396793UL, 646997837UL, 1459728476UL, 1169681568UL, 3238673748UL, 3956278544UL,
919592580UL, 2153558858UL, 388335108UL, 115778559UL, 4016560170UL, 484838096UL, 3652199054UL, 1764858181UL, 737357475UL, 637470291UL, 278970544UL, 3574824693UL, 3671458900UL, 3989745853UL, 2542341803UL, 1588716357UL, 1502596918UL, 2102871406UL, 3016849744UL, 1768033045UL, 1531734630UL, 101448323UL, 3964942332UL, 4157527581UL, 3187853500UL, 186000900UL, 803444571UL, 3425652083UL, 1980528062UL, 2384668855UL, 2222812920UL, 633608665UL,
3035373876UL, 3166710281UL, 545095949UL, 3810471203UL, 1017064446UL, 669282349UL, 693962828UL, 899068662UL, 3294064431UL, 167972517UL, 2007256988UL, 1486040398UL, 3951305793UL, 1778354660UL, 3041730987UL, 2827768941UL, 2859363132UL, 1885149424UL, 3390812967UL, 2432904511UL, 3700915653UL, 664880478UL, 3953443155UL, 2965828929UL, 2035392295UL, 1461208330UL, 558081801UL, 329153573UL, 1607201428UL, 425148945UL, 1700881129UL, 3716247699UL,
78028761UL, 2148245850UL, 2787488981UL, 2706775080UL, 4206362947UL, 647235899UL, 3584435116UL, 3013084787UL, 2958545221UL, 2536781098UL, 1467385694UL, 2658945475UL, 4251530898UL, 2241012567UL, 3075072413UL, 3489351040UL, 4105390090UL, 343200643UL, 490164649UL, 2540485172UL, 3521512280UL, 259435633UL, 2846377387UL, 4073611831UL, 2442427327UL, 1367093111UL, 2957688879UL, 2180784344UL, 1835510773UL, 1593967423UL, 411877686UL, 3107480718UL,
2208729807UL, 3306732468UL, 1048686529UL, 584605030UL, 519242965UL, 602979109UL, 2978864605UL, 2072745381UL, 3902518209UL, 1584463910UL, 1849038201UL, 3284115169UL, 846033949UL, 1932969318UL, 428214945UL, 1246345586UL, 194166002UL, 1066373275UL, 2770345237UL, 4277869380UL, 3886828599UL, 1874087886UL, 1877859690UL, 2953581033UL, 2649164828UL, 3369378320UL, 4145454028UL, 2537763389UL, 2380353977UL, 3558859222UL, 2669673235UL, 739345884UL,
522748140UL, 1214052447UL, 1088456706UL, 231954609UL, 3605603781UL, 1381269315UL, 1766983646UL, 856371341UL, 2001356578UL, 2049940324UL, 667275675UL, 1782816591UL, 4024065226UL, 1093546838UL, 152524382UL, 2057337961UL, 1149716600UL, 2441102396UL, 296426333UL, 3195130788UL, 340523210UL, 2391309970UL, 1016016207UL, 3595686646UL, 180492441UL, 3094832341UL, 362098678UL, 1779396793UL, 646997837UL, 2458167607UL, 1169681568UL, 3238673748UL,
3956278544UL, 919592580UL, 3421005218UL, 388335108UL, 115778559UL, 4016560170UL, 484838096UL, 2649676374UL, 1764858181UL, 737357475UL, 637470291UL, 278970544UL, 2236401278UL, 3671458900UL, 3989745853UL, 2542341803UL, 1588716357UL, 1241570134UL, 2102871406UL, 3016849744UL, 1768033045UL, 1531734630UL, 1765654724UL, 3964942332UL, 4157527581UL, 3187853500UL, 186000900UL, 2189716659UL, 3425652083UL, 1980528062UL, 2384668855UL, 2222812920UL,
3955466207UL, 2426547616UL, 3846752458UL, 3015538636UL, 2342593365UL, 3613176865UL, 3484860981UL, 4278370194UL, 1979143878UL, 1159739458UL, 3714038404UL, 396530346UL, 3276617756UL, 3293940597UL, 4050183149UL, 1418571985UL, 402563753UL, 2702853013UL, 2289900621UL, 2267058511UL, 3482161995UL, 3375026019UL, 1988640267UL, 3674438074UL, 4124612310UL, 1057883705UL, 434730475UL, 3210959778UL, 4102029739UL, 2140938750UL, 3176753074UL, 2356971512UL,
3969685288UL, 1556275580UL, 2648433428UL, 3959375381UL, 478841344UL, 1496991528UL, 3309714981UL, 569990368UL, 3660587501UL, 2550379574UL, 1177519842UL, 2652707373UL, 543943404UL, 1912551128UL, 2278132032UL, 1484596780UL, 3570913985UL, 2982401320UL, 1413776035UL, 3177275459UL, 3036211597UL, 1091740466UL, 3448424311UL, 1445187645UL, 3205024875UL, 3135795254UL, 823738729UL, 3742134467UL, 4066657438UL, 1226311678UL, 2403605393UL, 537573634UL,
3457409768UL, 1940233423UL, 1761431281UL, 1129427309UL, 2443661283UL, 3200814257UL, 4094866249UL, 2666869754UL, 604785127UL, 2213464116UL, 3002782918UL, 468024929UL, 2490681314UL, 3666681384UL, 1583346053UL, 3049668798UL, 3592153237UL, 2573082448UL, 3082970021UL, 1461796708UL, 832526980UL, 3728763274UL, 355291229UL, 4029588456UL, 832358279UL, 2125298737UL, 3681181038UL, 3245535160UL, 1333342738UL, 1868897492UL, 446790068UL, 1278093154UL,
2090118615UL, 4158925515UL, 4062165914UL, 822726809UL, 1154960183UL, 286518382UL, 1170424276UL, 2554691236UL, 3674133415UL, 2765714969UL, 2330865375UL, 1908307334UL, 3537287082UL, 410252600UL, 3977128218UL, 424210327UL, 2919071615UL, 2715518134UL, 64568844UL, 480972649UL, 2488797168UL, 1302817038UL, 2213995265UL, 4229997295UL, 2200797852UL, 109368057UL, 3033807022UL, 1907400078UL, 645977948UL, 1410909090UL, 3700787906UL, 3375062371UL,
629087832UL, 1344281719UL, 4249981139UL, 3457543297UL, 1218556849UL, 864222854UL, 1458445945UL, 914545469UL, 3451164212UL, 1088025757UL, 1129933985UL, 953788883UL, 2406172924UL, 170364546UL, 3505490646UL, 1027553899UL, 2864067776UL, 436854871UL, 1342782209UL, 761167471UL, 2660173631UL, 4159507498UL, 4172028400UL, 2442254644UL, 2110123720UL, 2315991253UL, 873066601UL, 1725470559UL, 3831299052UL, 678672031UL, 1585431329UL, 3495750550UL,
},
{
1998393432UL, 2665389278UL, 3989307699UL, 3267631636UL, 3861682977UL, 3243522970UL, 1243992413UL, 2200497260UL, 3821883021UL, 4187123083UL, 3451270040UL, 3044132745UL, 2101287249UL, 2340839784UL, 227040990UL, 1724350416UL, 3228881240UL, 3123386528UL, 4279362126UL, 3098224464UL, 2635534069UL, 3622906431UL, 206207480UL, 1894245533UL, 2152374527UL, 1011223653UL, 7271757UL, 2972858087UL, 207942127UL, 3355362797UL, 2593296740UL, 174093751UL,
3713822176UL, 4212355586UL, 3335605224UL, 1171716408UL, 2867257989UL, 1522213957UL, 2016192462UL, 4229688395UL, 2174928148UL, 1468226225UL, 3938290338UL, 493240317UL, 3229423344UL, 2585475729UL, 3112454413UL, 1881171707UL, 2555908056UL, 1997546352UL, 380428329UL, 3341885423UL, 3307510279UL, 3519476676UL, 3613100811UL, 2555826262UL, 109341943UL, 2382715395UL, 3883409616UL, 1593551879UL, 2163678014UL, 3379783137UL, 2810374300UL, 1516064864UL,
561144874UL, 316017838UL, 1899237567UL, 70857401UL, 3435185465UL, 4234661323UL, 2580352177UL, 32879620UL, 4171670150UL, 1986234067UL, 3589478191UL, 2073132526UL, 2603712175UL, 377997975UL, 2474419397UL, 3110698341UL, 812664089UL, 1778922726UL, 1686111212UL, 972784138UL, 3936486236UL, 2711468739UL, 423435866UL, 1661961159UL, 802312780UL, 1868728136UL, 1760295704UL, 3357409828UL, 215039860UL, 683184627UL, 4019111064UL, 3609261689UL,
2167554309UL, 1831085281UL, 3389357802UL, 4193421575UL, 628277197UL, 2900207619UL, 993609502UL, 3429627083UL, 2636466084UL, 3652352199UL, 1780133580UL, 1670387713UL, 4086070210UL, 4004540729UL, 783029246UL, 2165667566UL, 1739001057UL, 377639972UL, 1102689625UL, 1945278055UL, 3941185940UL, 3685368326UL, 1881761572UL, 2201338934UL, 801752UL, 2729497735UL, 492844690UL, 2998826141UL, 3844964457UL, 3679088359UL, 2196391660UL, 4222269404UL,
357321611UL, 3727170055UL, 1819614072UL, 2348798457UL, 4294366646UL, 1952884323UL, 3574345216UL, 2040734807UL, 232392443UL, 4183498179UL, 2614866055UL, 112120292UL, 3624018350UL, 3340709877UL, 3097507723UL, 1268833488UL, 3570501956UL, 3338260086UL, 293812421UL, 3683058169UL, 1147960351UL, 283731890UL, 2171233479UL, 1830154455UL, 4036602681UL, 1996981699UL, 132803834UL, 40256165UL, 2158110401UL, 3575159090UL, 3196553513UL, 3559872992UL,
3402884675UL, 1998393432UL, 2665389278UL, 3989307699UL, 3267631636UL, 3617519767UL, 3243522970UL, 1243992413UL, 2200497260UL, 3821883021UL, 3715729085UL, 3451270040UL, 3044132745UL, 2101287249UL, 2340839784UL, 3173635549UL, 1724350416UL, 3228881240UL, 3123386528UL, 4279362126UL, 2287520039UL, 2635534069UL, 3622906431UL, 206207480UL, 1894245533UL, 96723416UL, 1011223653UL, 7271757UL, 2972858087UL, 207942127UL, 1668335352UL, 2593296740UL,
174093751UL, 3713822176UL, 4212355586UL, 49226793UL, 1171716408UL, 2867257989UL, 1522213957UL, 2016192462UL, 118712412UL, 2174928148UL, 1468226225UL, 3938290338UL, 493240317UL, 3788174304UL, 2585475729UL, 3112454413UL, 1881171707UL, 2555908056UL, 3351139844UL, 380428329UL, 3341885423UL, 3307510279UL, 3519476676UL, 1368994724UL, 2555826262UL, 109341943UL, 2382715395UL, 3883409616UL, 1561509458UL, 2163678014UL, 3379783137UL, 2810374300UL,
1516064864UL, 2313252274UL, 316017838UL, 1899237567UL, 70857401UL, 3435185465UL, 2585770746UL, 2580352177UL, 32879620UL, 4171670150UL, 1986234067UL, 3317983509UL, 2073132526UL, 2603712175UL, 377997975UL, 2474419397UL, 908728599UL, 812664089UL, 1778922726UL, 1686111212UL, 972784138UL, 1992540005UL, 2711468739UL, 423435866UL, 1661961159UL, 802312780UL, 907108769UL, 1760295704UL, 3357409828UL, 215039860UL, 683184627UL, 2806826652UL,
3609261689UL, 2167554309UL, 1831085281UL, 3389357802UL, 2755692689UL, 628277197UL, 2900207619UL, 993609502UL, 3429627083UL, 3605915742UL, 3652352199UL, 1780133580UL, 1670387713UL, 4086070210UL, 3717326627UL, 783029246UL, 2165667566UL, 1739001057UL, 377639972UL, 2355216626UL, 1945278055UL, 3941185940UL, 3685368326UL, 1881761572UL, 4024097818UL, 801752UL, 2729497735UL, 492844690UL, 2998826141UL, 2719601647UL, 3679088359UL, 2196391660UL,
4222269404UL, 357321611UL, 1319821972UL, 1819614072UL, 2348798457UL, 4294366646UL, 1952884323UL, 3573866689UL, 2040734807UL, 232392443UL, 4183498179UL, 2614866055UL, 440744432UL, 3624018350UL, 3340709877UL, 3097507723UL, 1268833488UL, 224895395UL, 3338260086UL, 293812421UL, 3683058169UL, 1147960351UL, 3433425235UL, 2171233479UL, 1830154455UL, 4036602681UL, 1996981699UL, 2875889721UL, 40256165UL, 2158110401UL, 3575159090UL, 3196553513UL,
1094082574UL, 3402884675UL, 1998393432UL, 2665389278UL, 3989307699UL, 4068940467UL, 3617519767UL, 3243522970UL, 1243992413UL, 2200497260UL, 441678457UL, 3715729085UL, 3451270040UL, 3044132745UL, 2101287249UL, 2181502237UL, 3173635549UL, 1724350416UL, 3228881240UL, 3123386528UL, 1968352124UL, 2287520039UL, 2635534069UL, 3622906431UL, 206207480UL, 2065093599UL, 96723416UL, 1011223653UL, 7271757UL, 2972858087UL, 1094044749UL, 1668335352UL,
2593296740UL, 174093751UL, 3713822176UL, 2887397643UL, 49226793UL, 1171716408UL, 2867257989UL, 1522213957UL, 984348433UL, 118712412UL, 2174928148UL, 1468226225UL, 3938290338UL, 2279430036UL, 3788174304UL, 2585475729UL, 3112454413UL, 1881171707UL, 4247636500UL, 3351139844UL, 380428329UL, 3341885423UL, 3307510279UL, 2887754196UL, 1368994724UL, 2555826262UL, 109341943UL, 2382715395UL, 2836761616UL, 1561509458UL, 2163678014UL, 3379783137UL,
2810374300UL, 1635278016UL, 2313252274UL, 316017838UL, 1899237567UL, 70857401UL, 3481535811UL, 2585770746UL, 2580352177UL, 32879620UL, 4171670150UL, 2248003250UL, 3317983509UL, 2073132526UL, 2603712175UL, 377997975UL, 3286162818UL, 908728599UL, 812664089UL, 1778922726UL, 1686111212UL, 4024815755UL, 1992540005UL, 2711468739UL, 423435866UL, 1661961159UL, 2257259057UL, 907108769UL, 1760295704UL, 3357409828UL, 215039860UL, 3917391198UL,
2806826652UL, 3609261689UL, 2167554309UL, 1831085281UL, 4238043113UL, 2755692689UL, 628277197UL, 2900207619UL, 993609502UL, 2036092353UL, 3605915742UL, 3652352199UL, 1780133580UL, 1670387713UL, 118446953UL, 3717326627UL, 783029246UL, 2165667566UL, 1739001057UL, 203160626UL, 2355216626UL, 1945278055UL, 3941185940UL, 3685368326UL, 546361979UL, 4024097818UL, 801752UL, 2729497735UL, 492844690UL, 1023017124UL, 2719601647UL, 3679088359UL,
2196391660UL, 4222269404UL, 621859651UL, 1319821972UL, 1819614072UL, 2348798457UL, 4294366646UL, 1114888560UL, 3573866689UL, 2040734807UL, 232392443UL, 4183498179UL, 3959504609UL, 440744432UL, 3624018350UL, 3340709877UL, 3097507723UL, 3613295037UL, 224895395UL, 3338260086UL, 293812421UL, 3683058169UL, 1655305863UL, 3433425235UL, 2171233479UL, 1830154455UL, 4036602681UL, 3731384097UL, 2875889721UL, 40256165UL, 2158110401UL, 3575159090UL,
1847744924UL, 1094082574UL, 3402884675UL, 1998393432UL, 2665389278UL, 3781866777UL, 4068940467UL, 3617519767UL, 3243522970UL, 1243992413UL, 2723708256UL, 441678457UL, 3715729085UL, 3451270040UL, 3044132745UL, 4013832842UL, 2181502237UL, 3173635549UL, 1724350416UL, 3228881240UL, 2092292494UL, 1968352124UL, 2287520039UL, 2635534069UL, 3622906431UL, 3186333458UL, 2065093599UL, 96723416UL, 1011223653UL, 7271757UL, 649658033UL, 1094044749UL,
1668335352UL, 2593296740UL, 174093751UL, 4159420309UL, 2887397643UL, 49226793UL, 1171716408UL, 2867257989UL, 2590077953UL, 984348433UL, 118712412UL, 2174928148UL, 1468226225UL, 1065322711UL, 2279430036UL, 3788174304UL, 2585475729UL, 3112454413UL, 3932517386UL, 4247636500UL, 3351139844UL, 380428329UL, 3341885423UL, 1285273904UL, 2887754196UL, 1368994724UL, 2555826262UL, 109341943UL, 2318470582UL, 2836761616UL, 1561509458UL, 2163678014UL,
3379783137UL, 674658583UL, 1635278016UL, 2313252274UL, 316017838UL, 1899237567UL, 2192372173UL, 3481535811UL, 2585770746UL, 2580352177UL, 32879620UL, 300323274UL, 2248003250UL, 3317983509UL, 2073132526UL, 2603712175UL, 3086543917UL, 3286162818UL, 908728599UL, 812664089UL, 1778922726UL, 2263290659UL, 4024815755UL, 1992540005UL, 2711468739UL, 423435866UL, 819027349UL, 2257259057UL, 907108769UL, 1760295704UL, 3357409828UL, 1142221093UL,
3917391198UL, 2806826652UL, 3609261689UL, 2167554309UL, 4108155875UL, 4238043113UL, 2755692689UL, 628277197UL, 2900207619UL, 3041719497UL, 2036092353UL, 3605915742UL, 3652352199UL, 1780133580UL, 2397410862UL, 118446953UL, 3717326627UL, 783029246UL, 2165667566UL, 2721690354UL, 203160626UL, 2355216626UL, 1945278055UL, 3941185940UL, 2768842108UL, 546361979UL, 4024097818UL, 801752UL, 2729497735UL, 4045063232UL, 1023017124UL, 2719601647UL,
3679088359UL, 2196391660UL, 2666107451UL, 621859651UL, 1319821972UL, 1819614072UL, 2348798457UL, 3555102623UL, 1114888560UL, 3573866689UL, 2040734807UL, 232392443UL, 3359040541UL, 3959504609UL, 440744432UL, 3624018350UL, 3340709877UL, 1477919696UL, 3613295037UL, 224895395UL, 3338260086UL, 293812421UL, 4210187101UL, 1655305863UL, 3433425235UL, 2171233479UL, 1830154455UL, 4150241150UL, 3731384097UL, 2875889721UL, 40256165UL, 2158110401UL,
3350246687UL, 455561037UL, 2250400255UL, 3192153445UL, 3258870230UL, 1500391873UL, 4142878334UL, 1155955691UL, 1483275844UL, 4189436981UL, 323745948UL, 1976017426UL, 2804626790UL, 2717553615UL, 2315409034UL, 954508235UL, 3845175920UL, 3999878682UL, 1247696432UL, 1743319509UL, 2998248398UL, 3694350012UL, 4072006361UL, 191306987UL, 2816321878UL, 1324077734UL, 1083060006UL, 3406855480UL, 1619622379UL, 2160350UL, 3302238190UL, 3368021261UL,
3685228564UL, 3863934685UL, 771728612UL, 854205233UL, 2304696695UL, 421449207UL, 1265752117UL, 3852292419UL, 305345788UL, 1540622105UL, 1904883477UL, 833469256UL, 134406680UL, 3012455058UL, 4035477953UL, 2925192459UL, 1559200592UL, 3851612860UL, 718484562UL, 1377960276UL, 1586892849UL, 1361298269UL, 3417917896UL, 1281324499UL, 1012538763UL, 1350578667UL, 3946475598UL, 2982283954UL, 3548792804UL, 284542749UL, 1194648577UL, 3087899716UL,
3966595444UL, 2088330116UL, 3641652062UL, 327128507UL, 593906557UL, 1092448919UL, 2459189516UL, 4053392241UL, 3356198248UL, 2352376508UL, 470648997UL, 1017041256UL, 3234172340UL, 3928191489UL, 3266226858UL, 4219289150UL, 1229098319UL, 4275351308UL, 2720777751UL, 3566728718UL, 638322822UL, 2369792461UL, 2869492261UL, 3120083828UL, 1890399556UL, 3309991008UL, 3785452464UL, 4128660314UL, 3726791982UL, 167177896UL, 461294981UL, 3988638998UL,
2937794823UL, 3981029822UL, 1111681402UL, 2015965721UL, 7261806UL, 2669786265UL, 1083582734UL, 3270228881UL, 3892235938UL, 2695872715UL, 4246051290UL, 3214293333UL, 343604199UL, 3215604888UL, 661024127UL, 2931754053UL, 3787840039UL, 2053363765UL, 363432336UL, 112334132UL, 2871797223UL, 138911320UL, 3981126938UL, 2027332192UL, 1804730644UL, 590150270UL, 641538574UL, 6802174UL, 3551446076UL, 3908480472UL, 1004531022UL, 2097228524UL,
1919074232UL, 154482247UL, 121437972UL, 1215661323UL, 1178068273UL, 1097220699UL, 2823681422UL, 262636065UL, 2943371149UL, 1768780720UL, 3866040605UL, 1855991583UL, 3988248086UL, 629223947UL, 3380612330UL, 3552916762UL, 197596340UL, 573801686UL, 2049230598UL, 2910471867UL, 2686314264UL, 1726228846UL, 3516983332UL, 726840185UL, 1241204222UL, 2237574317UL, 70568042UL, 1932610099UL, 2221862221UL, 1510378092UL, 4050391637UL, 4077539568UL,
},
{
3872117793UL, 803220151UL, 70843412UL, 1661103032UL, 1976811457UL, 2186373604UL, 564259972UL, 1475436923UL, 2260980893UL, 4245534505UL, 1075107552UL, 3692990573UL, 370098873UL, 4045905424UL, 2420395420UL, 2332395402UL, 207483321UL, 622317750UL, 3004242500UL, 833623111UL, 3151161301UL, 1629139881UL, 352228793UL, 2439953368UL, 3183333619UL, 2703537080UL, 3218957129UL, 3164695888UL, 1741641842UL, 963394141UL, 4241612717UL, 1034476784UL,
2035880432UL, 3977821313UL, 1543311495UL, 3010014356UL, 1638490901UL, 2364265378UL, 3420329129UL, 333361555UL, 1133565821UL, 1450937015UL, 616059115UL, 3216393887UL, 3041978455UL, 3990855695UL, 1238628750UL, 512746184UL, 3256670217UL, 1616316512UL, 2791405051UL, 93474487UL, 2865892488UL, 1901471398UL, 2930857966UL, 2178431077UL, 2325598341UL, 3189256113UL, 1302432091UL, 808592927UL, 2945846737UL, 3487931071UL, 2018175258UL, 752981057UL,
1097082589UL, 1307115286UL, 175147508UL, 3611190164UL, 850238914UL, 3318706185UL, 199743319UL, 328621708UL, 3183670050UL, 3609998315UL, 4075306371UL, 3554549067UL, 2119566187UL, 1498503842UL, 1261870696UL, 2216745780UL, 950288337UL, 1117344941UL, 2150569143UL, 2899286760UL, 1594966374UL, 888858617UL, 35840654UL, 2829539211UL, 2511395669UL, 3607190544UL, 3278412778UL, 2249895907UL, 1320858068UL, 3576889788UL, 266766189UL, 1522426851UL,
1903494122UL, 1928370573UL, 2628132591UL, 3322025904UL, 220280169UL, 433606853UL, 1428961479UL, 986074592UL, 2128892987UL, 467697583UL, 1616913929UL, 325674890UL, 444442578UL, 649166208UL, 1689709565UL, 1493452467UL, 2222122038UL, 121114616UL, 2134348225UL, 3512035688UL, 1283058921UL, 4230441398UL, 3701238559UL, 337534132UL, 1418548715UL, 1190006478UL, 500654385UL, 1766924757UL, 1944680746UL, 940574010UL, 922744002UL, 186142284UL,
3131162902UL, 1693891092UL, 3031823448UL, 2143051534UL, 1429025284UL, 1487843160UL, 3606456133UL, 2079235652UL, 2447285474UL, 2669283767UL, 3232117829UL, 2490054343UL, 3225501736UL, 2911340385UL, 382319031UL, 1516937595UL, 622543191UL, 1388990570UL, 1749179860UL, 1924483707UL, 2593474505UL, 472539197UL, 122872799UL, 2586347240UL, 880588515UL, 4046335279UL, 1712182607UL, 4270737941UL, 1336703451UL, 3390078162UL, 382216945UL, 3733326081UL,
460422073UL, 3872117793UL, 803220151UL, 70843412UL, 1661103032UL, 250339760UL, 2186373604UL, 564259972UL, 1475436923UL, 2260980893UL, 657986735UL, 1075107552UL, 3692990573UL, 370098873UL, 4045905424UL, 3201950123UL, 2332395402UL, 207483321UL, 622317750UL, 3004242500UL, 3732213278UL, 3151161301UL, 1629139881UL, 352228793UL, 2439953368UL, 3572618926UL, 2703537080UL, 3218957129UL, 3164695888UL, 1741641842UL, 685933373UL, 4241612717UL,
1034476784UL, 2035880432UL, 3977821313UL, 3855995181UL, 3010014356UL, 1638490901UL, 2364265378UL, 3420329129UL, 2355603679UL, 1133565821UL, 1450937015UL, 616059115UL, 3216393887UL, 1733804102UL, 3990855695UL, 1238628750UL, 512746184UL, 3256670217UL, 2651059231UL, 2791405051UL, 93474487UL, 2865892488UL, 1901471398UL, 2113461797UL, 2178431077UL, 2325598341UL, 3189256113UL, 1302432091UL, 2986990416UL, 2945846737UL, 3487931071UL, 2018175258UL,
752981057UL, 2428033310UL, 1307115286UL, 175147508UL, 3611190164UL, 850238914UL, 1033628405UL, 199743319UL, 328621708UL, 3183670050UL, 3609998315UL, 4024297327UL, 3554549067UL, 2119566187UL, 1498503842UL, 1261870696UL, 290361143UL, 950288337UL, 1117344941UL, 2150569143UL, 2899286760UL, 168826051UL, 888858617UL, 35840654UL, 2829539211UL, 2511395669UL, 2890882060UL, 3278412778UL, 2249895907UL, 1320858068UL, 3576889788UL, 1794920145UL,
1522426851UL, 1903494122UL, 1928370573UL, 2628132591UL, 1251697758UL, 220280169UL, 433606853UL, 1428961479UL, 986074592UL, 2707115661UL, 467697583UL, 1616913929UL, 325674890UL, 444442578UL, 122781510UL, 1689709565UL, 1493452467UL, 2222122038UL, 121114616UL, 3425723636UL, 3512035688UL, 1283058921UL, 4230441398UL, 3701238559UL, 1646155473UL, 1418548715UL, 1190006478UL, 500654385UL, 1766924757UL, 3920475367UL, 940574010UL, 922744002UL,
186142284UL, 3131162902UL, 54639113UL, 3031823448UL, 2143051534UL, 1429025284UL, 1487843160UL, 4152687885UL, 2079235652UL, 2447285474UL, 2669283767UL, 3232117829UL, 1601035152UL, 3225501736UL, 2911340385UL, 382319031UL, 1516937595UL, 3508441679UL, 1388990570UL, 1749179860UL, 1924483707UL, 2593474505UL, 2835403456UL, 122872799UL, 2586347240UL, 880588515UL, 4046335279UL, 2958058367UL, 4270737941UL, 1336703451UL, 3390078162UL, 382216945UL,
450517882UL, 460422073UL, 3872117793UL, 803220151UL, 70843412UL, 2066343874UL, 250339760UL, 2186373604UL, 564259972UL, 1475436923UL, 1683787449UL, 657986735UL, 1075107552UL, 3692990573UL, 370098873UL, 2615082840UL, 3201950123UL, 2332395402UL, 207483321UL, 622317750UL, 2655424371UL, 3732213278UL, 3151161301UL, 1629139881UL, 352228793UL, 3236724760UL, 3572618926UL, 2703537080UL, 3218957129UL, 3164695888UL, 9775065UL, 685933373UL,
4241612717UL, 1034476784UL, 2035880432UL, 1621920075UL, 3855995181UL, 3010014356UL, 1638490901UL, 2364265378UL, 1509475888UL, 2355603679UL, 1133565821UL, 1450937015UL, 616059115UL, 3666188236UL, 1733804102UL, 3990855695UL, 1238628750UL, 512746184UL, 3900473826UL, 2651059231UL, 2791405051UL, 93474487UL, 2865892488UL, 222759186UL, 2113461797UL, 2178431077UL, 2325598341UL, 3189256113UL, 2505499508UL, 2986990416UL, 2945846737UL, 3487931071UL,
2018175258UL, 2766733928UL, 2428033310UL, 1307115286UL, 175147508UL, 3611190164UL, 1909211603UL, 1033628405UL, 199743319UL, 328621708UL, 3183670050UL, 1680331218UL, 4024297327UL, 3554549067UL, 2119566187UL, 1498503842UL, 3516256046UL, 290361143UL, 950288337UL, 1117344941UL, 2150569143UL, 3182619063UL, 168826051UL, 888858617UL, 35840654UL, 2829539211UL, 645798943UL, 2890882060UL, 3278412778UL, 2249895907UL, 1320858068UL, 1436708568UL,
1794920145UL, 1522426851UL, 1903494122UL, 1928370573UL, 3693049252UL, 1251697758UL, 220280169UL, 433606853UL, 1428961479UL, 3724415861UL, 2707115661UL, 467697583UL, 1616913929UL, 325674890UL, 1448052253UL, 122781510UL, 1689709565UL, 1493452467UL, 2222122038UL, 2177448198UL, 3425723636UL, 3512035688UL, 1283058921UL, 4230441398UL, 3050940272UL, 1646155473UL, 1418548715UL, 1190006478UL, 500654385UL, 1106232UL, 3920475367UL, 940574010UL,
922744002UL, 186142284UL, 4144806511UL, 54639113UL, 3031823448UL, 2143051534UL, 1429025284UL, 2067453848UL, 4152687885UL, 2079235652UL, 2447285474UL, 2669283767UL, 428527087UL, 1601035152UL, 3225501736UL, 2911340385UL, 382319031UL, 2565464472UL, 3508441679UL, 1388990570UL, 1749179860UL, 1924483707UL, 1737735237UL, 2835403456UL, 122872799UL, 2586347240UL, 880588515UL, 597822462UL, 2958058367UL, 4270737941UL, 1336703451UL, 3390078162UL,
2532634475UL, 450517882UL, 460422073UL, 3872117793UL, 803220151UL, 801648827UL, 2066343874UL, 250339760UL, 2186373604UL, 564259972UL, 3417948976UL, 1683787449UL, 657986735UL, 1075107552UL, 3692990573UL, 2235306692UL, 2615082840UL, 3201950123UL, 2332395402UL, 207483321UL, 699310933UL, 2655424371UL, 3732213278UL, 3151161301UL, 1629139881UL, 1152704006UL, 3236724760UL, 3572618926UL, 2703537080UL, 3218957129UL, 2726926336UL, 9775065UL,
685933373UL, 4241612717UL, 1034476784UL, 2398119652UL, 1621920075UL, 3855995181UL, 3010014356UL, 1638490901UL, 252854480UL, 1509475888UL, 2355603679UL, 1133565821UL, 1450937015UL, 2655911639UL, 3666188236UL, 1733804102UL, 3990855695UL, 1238628750UL, 1115900497UL, 3900473826UL, 2651059231UL, 2791405051UL, 93474487UL, 1862985957UL, 222759186UL, 2113461797UL, 2178431077UL, 2325598341UL, 4179075132UL, 2505499508UL, 2986990416UL, 2945846737UL,
3487931071UL, 564667776UL, 2766733928UL, 2428033310UL, 1307115286UL, 175147508UL, 1759077815UL, 1909211603UL, 1033628405UL, 199743319UL, 328621708UL, 2552816198UL, 1680331218UL, 4024297327UL, 3554549067UL, 2119566187UL, 2267805778UL, 3516256046UL, 290361143UL, 950288337UL, 1117344941UL, 2897506172UL, 3182619063UL, 168826051UL, 888858617UL, 35840654UL, 2035476068UL, 645798943UL, 2890882060UL, 3278412778UL, 2249895907UL, 3278449102UL,
1436708568UL, 1794920145UL, 1522426851UL, 1903494122UL, 1500763736UL, 3693049252UL, 1251697758UL, 220280169UL, 433606853UL, 3914497854UL, 3724415861UL, 2707115661UL, 467697583UL, 1616913929UL, 918435305UL, 1448052253UL, 122781510UL, 1689709565UL, 1493452467UL, 609575172UL, 2177448198UL, 3425723636UL, 3512035688UL, 1283058921UL, 3661181550UL, 3050940272UL, 1646155473UL, 1418548715UL, 1190006478UL, 1047301661UL, 1106232UL, 3920475367UL,
940574010UL, 922744002UL, 2510633517UL, 4144806511UL, 54639113UL, 3031823448UL, 2143051534UL, 3242814908UL, 2067453848UL, 4152687885UL, 2079235652UL, 2447285474UL, 736638210UL, 428527087UL, 1601035152UL, 3225501736UL, 2911340385UL, 1849570436UL, 2565464472UL, 3508441679UL, 1388990570UL, 1749179860UL, 84517579UL, 1737735237UL, 2835403456UL, 122872799UL, 2586347240UL, 4002124614UL, 597822462UL, 2958058367UL, 4270737941UL, 1336703451UL,
3078170472UL, 1186434751UL, 700631413UL, 1497890797UL, 1195347450UL, 2560167391UL, 1116697259UL, 1254138573UL, 747913260UL, 240954704UL, 3107512667UL, 360584144UL, 3422778960UL, 3516528389UL, 3301260366UL, 1254513537UL, 122269053UL, 1579582456UL, 873334104UL, 3918835024UL, 1731872444UL, 1974410416UL, 1811172641UL, 4172523062UL, 4092675777UL, 4124987343UL, 1936078756UL, 1757348689UL, 2694415512UL, 128641660UL, 1744777659UL, 3173116729UL,
983733754UL, 1430789547UL, 701906842UL, 3367232568UL, 3266433501UL, 3572590347UL, 1453272962UL, 2106553114UL, 993786201UL, 2149441250UL, 1295181065UL, 2962229026UL, 3709052556UL, 3255608941UL, 3677730029UL, 483873127UL, 102227292UL, 2626265293UL, 2018984578UL, 2266388762UL, 1191709548UL, 2152725916UL, 583672623UL, 2230473473UL, 1995194269UL, 1740347812UL, 2558095372UL, 3070195183UL, 3023333227UL, 2497183195UL, 1908755188UL, 773027539UL,
3646876518UL, 2272586839UL, 493318726UL, 2107067517UL, 2000805278UL, 2530829636UL, 3183628745UL, 677565332UL, 1497629423UL, 82094920UL, 2214054433UL, 2635367545UL, 470855467UL, 2184853389UL, 2942188934UL, 188335670UL, 3656661644UL, 1883526235UL, 3990873975UL, 1490784356UL, 4047548172UL, 3149642641UL, 3289988179UL, 2590918909UL, 2893039564UL, 2350687346UL, 4252624874UL, 15372456UL, 1614496594UL, 2364847678UL, 2604511825UL, 422365460UL,
4195174772UL, 3266964836UL, 2008671995UL, 54038434UL, 781948549UL, 1276017666UL, 2756376612UL, 2436825273UL, 1711863836UL, 3541493950UL, 3821378841UL, 1007557618UL, 345375815UL, 2081905201UL, 2227278118UL, 1185927141UL, 1082173792UL, 3567361925UL, 1940465859UL, 541632942UL, 1830210248UL, 3757851982UL, 775883450UL, 1666577465UL, 1004944607UL, 878440834UL, 2146344131UL, 4195798476UL, 370164841UL, 3649112729UL, 37066142UL, 2311278904UL,
1935745497UL, 2304799402UL, 4107299626UL, 1348526232UL, 2473609635UL, 3284032699UL, 2374292786UL, 1762329186UL, 857978496UL, 1039346432UL, 2621413355UL, 29961014UL, 3582263091UL, 4268542513UL, 3890612190UL, 3096173646UL, 2026544230UL, 3856142618UL, 2347115934UL, 319800326UL, 3255916105UL, 2430273059UL, 823505311UL, 874255188UL, 1401925393UL, 4203707857UL, 4259159566UL, 2606881118UL, 1978288664UL, 1447576038UL, 3860341401UL, 412510348UL,
},
{
4052471963UL, 683640040UL, 3043876021UL, 3466644483UL, 4222418025UL, 3035140128UL, 1466027937UL, 18198088UL, 3410320851UL, 3040963721UL, 488404231UL, 3157371815UL, 769336092UL, 3240417718UL, 808582581UL, 2075839263UL, 835026995UL, 3123726486UL, 3284240985UL, 1898453053UL, 3606056482UL, 512836002UL, 2715428547UL, 4182302879UL, 1644882480UL, 3160187826UL, 390292489UL, 980889545UL, 2776206633UL, 2482799995UL, 617042280UL, 3501667414UL,
689451808UL, 497018701UL, 238525753UL, 3890163301UL, 896679896UL, 1544533015UL, 3412477225UL, 3116575138UL, 4250402651UL, 3990990746UL, 819056741UL, 1459334146UL, 158377590UL, 3444755752UL, 8230450UL, 1378706455UL, 684191332UL, 3217423797UL, 2842520097UL, 1631477948UL, 2591254230UL, 959644473UL, 1020694107UL, 1748401915UL, 3452514983UL, 3892766171UL, 1227786994UL, 2086180800UL, 2394613217UL, 2091953150UL, 870094953UL, 2306851481UL,
571550601UL, 488878212UL, 873197214UL, 2630100528UL, 2067476907UL, 2162307009UL, 2026119728UL, 115875280UL, 2905867426UL, 248774881UL, 3110900450UL, 2236032812UL, 1888510348UL, 708001855UL, 996960491UL, 3514196956UL, 1407967546UL, 1826568876UL, 3659618284UL, 2614104317UL, 2230066308UL, 1055135881UL, 2537437343UL, 1858044413UL, 2608594891UL, 2750681169UL, 3241939420UL, 3966440877UL, 2375002886UL, 2417753441UL, 1405878685UL, 1081133199UL,
1496940727UL, 382467042UL, 2745477587UL, 1209424459UL, 811187075UL, 1385604734UL, 2623887355UL, 3443875720UL, 394141555UL, 4142998949UL, 4195414618UL, 1489846841UL, 2253433808UL, 1171450286UL, 84131191UL, 4387588UL, 2641405140UL, 3525405389UL, 3273000909UL, 423660319UL, 2366546732UL, 3698878607UL, 2161119729UL, 4263629085UL, 3029102089UL, 2692507376UL, 3266869596UL, 1658012061UL, 1960169440UL, 1002311379UL, 3724446882UL, 2004188516UL,
999513506UL, 2200093802UL, 4141037460UL, 351865836UL, 412875013UL, 1535823315UL, 3880657632UL, 3109944987UL, 3207577548UL, 3462087941UL, 584875517UL, 2635241084UL, 3834145971UL, 1693380373UL, 3524443732UL, 934775214UL, 1960588847UL, 2226778032UL, 1044609478UL, 12199016UL, 1120582000UL, 226430296UL, 665553142UL, 2570993348UL, 1685535237UL, 3325420136UL, 3925248326UL, 2855346376UL, 1205558328UL, 808835317UL, 3295908896UL, 4170076136UL,
2438272365UL, 4052471963UL, 683640040UL, 3043876021UL, 3466644483UL, 1385549869UL, 3035140128UL, 1466027937UL, 18198088UL, 3410320851UL, 2171386836UL, 488404231UL, 3157371815UL, 769336092UL, 3240417718UL, 2921774554UL, 2075839263UL, 835026995UL, 3123726486UL, 3284240985UL, 72352110UL, 3606056482UL, 512836002UL, 2715428547UL, 4182302879UL, 3869483469UL, 3160187826UL, 390292489UL, 980889545UL, 2776206633UL, 1385691983UL, 617042280UL,
3501667414UL, 689451808UL, 497018701UL, 2600411809UL, 3890163301UL, 896679896UL, 1544533015UL, 3412477225UL, 356556378UL, 4250402651UL, 3990990746UL, 819056741UL, 1459334146UL, 199003993UL, 3444755752UL, 8230450UL, 1378706455UL, 684191332UL, 1750733272UL, 2842520097UL, 1631477948UL, 2591254230UL, 959644473UL, 2113375576UL, 1748401915UL, 3452514983UL, 3892766171UL, 1227786994UL, 275473920UL, 2394613217UL, 2091953150UL, 870094953UL,
2306851481UL, 897057645UL, 488878212UL, 873197214UL, 2630100528UL, 2067476907UL, 944114068UL, 2026119728UL, 115875280UL, 2905867426UL, 248774881UL, 989201307UL, 2236032812UL, 1888510348UL, 708001855UL, 996960491UL, 2121706374UL, 1407967546UL, 1826568876UL, 3659618284UL, 2614104317UL, 2931815032UL, 1055135881UL, 2537437343UL, 1858044413UL, 2608594891UL, 1423973935UL, 3241939420UL, 3966440877UL, 2375002886UL, 2417753441UL, 2514473440UL,
1081133199UL, 1496940727UL, 382467042UL, 2745477587UL, 81977310UL, 811187075UL, 1385604734UL, 2623887355UL, 3443875720UL, 2100629879UL, 4142998949UL, 4195414618UL, 1489846841UL, 2253433808UL, 337182869UL, 84131191UL, 4387588UL, 2641405140UL, 3525405389UL, 661876463UL, 423660319UL, 2366546732UL, 3698878607UL, 2161119729UL, 309510684UL, 3029102089UL, 2692507376UL, 3266869596UL, 1658012061UL, 11119541UL, 1002311379UL, 3724446882UL,
2004188516UL, 999513506UL, 3486722046UL, 4141037460UL, 351865836UL, 412875013UL, 1535823315UL, 2818130700UL, 3109944987UL, 3207577548UL, 3462087941UL, 584875517UL, 322875622UL, 3834145971UL, 1693380373UL, 3524443732UL, 934775214UL, 3879414752UL, 2226778032UL, 1044609478UL, 12199016UL, 1120582000UL, 4207259464UL, 665553142UL, 2570993348UL, 1685535237UL, 3325420136UL, 553869152UL, 2855346376UL, 1205558328UL, 808835317UL, 3295908896UL,
470585896UL, 2438272365UL, 4052471963UL, 683640040UL, 3043876021UL, 1588419572UL, 1385549869UL, 3035140128UL, 1466027937UL, 18198088UL, 363815288UL, 2171386836UL, 488404231UL, 3157371815UL, 769336092UL, 2464768302UL, 2921774554UL, 2075839263UL, 835026995UL, 3123726486UL, 4229246330UL, 72352110UL, 3606056482UL, 512836002UL, 2715428547UL, 319830805UL, 3869483469UL, 3160187826UL, 390292489UL, 980889545UL, 2966401462UL, 1385691983UL,
617042280UL, 3501667414UL, 689451808UL, 4047377762UL, 2600411809UL, 3890163301UL, 896679896UL, 1544533015UL, 764316452UL, 356556378UL, 4250402651UL, 3990990746UL, 819056741UL, 965331966UL, 199003993UL, 3444755752UL, 8230450UL, 1378706455UL, 51902971UL, 1750733272UL, 2842520097UL, 1631477948UL, 2591254230UL, 426039404UL, 2113375576UL, 1748401915UL, 3452514983UL, 3892766171UL, 2833368447UL, 275473920UL, 2394613217UL, 2091953150UL,
870094953UL, 3524323828UL, 897057645UL, 488878212UL, 873197214UL, 2630100528UL, 3939852929UL, 944114068UL, 2026119728UL, 115875280UL, 2905867426UL, 3192643919UL, 989201307UL, 2236032812UL, 1888510348UL, 708001855UL, 2166012172UL, 2121706374UL, 1407967546UL, 1826568876UL, 3659618284UL, 135277096UL, 2931815032UL, 1055135881UL, 2537437343UL, 1858044413UL, 2588429924UL, 1423973935UL, 3241939420UL, 3966440877UL, 2375002886UL, 2477142003UL,
2514473440UL, 1081133199UL, 1496940727UL, 382467042UL, 1760129281UL, 81977310UL, 811187075UL, 1385604734UL, 2623887355UL, 4070531513UL, 2100629879UL, 4142998949UL, 4195414618UL, 1489846841UL, 2688068550UL, 337182869UL, 84131191UL, 4387588UL, 2641405140UL, 1837403234UL, 661876463UL, 423660319UL, 2366546732UL, 3698878607UL, 2916121190UL, 309510684UL, 3029102089UL, 2692507376UL, 3266869596UL, 303422295UL, 11119541UL, 1002311379UL,
3724446882UL, 2004188516UL, 2652711421UL, 3486722046UL, 4141037460UL, 351865836UL, 412875013UL, 113149471UL, 2818130700UL, 3109944987UL, 3207577548UL, 3462087941UL, 1443140792UL, 322875622UL, 3834145971UL, 1693380373UL, 3524443732UL, 901891935UL, 3879414752UL, 2226778032UL, 1044609478UL, 12199016UL, 2213168758UL, 4207259464UL, 665553142UL, 2570993348UL, 1685535237UL, 1114492412UL, 553869152UL, 2855346376UL, 1205558328UL, 808835317UL,
3266626294UL, 470585896UL, 2438272365UL, 4052471963UL, 683640040UL, 3581539398UL, 1588419572UL, 1385549869UL, 3035140128UL, 1466027937UL, 4075470388UL, 363815288UL, 2171386836UL, 488404231UL, 3157371815UL, 2759472233UL, 2464768302UL, 2921774554UL, 2075839263UL, 835026995UL, 1030654310UL, 4229246330UL, 72352110UL, 3606056482UL, 512836002UL, 961858496UL, 319830805UL, 3869483469UL, 3160187826UL, 390292489UL, 2366221117UL, 2966401462UL,
1385691983UL, 617042280UL, 3501667414UL, 295865937UL, 4047377762UL, 2600411809UL, 3890163301UL, 896679896UL, 21714884UL, 764316452UL, 356556378UL, 4250402651UL, 3990990746UL, 1012967081UL, 965331966UL, 199003993UL, 3444755752UL, 8230450UL, 1255302023UL, 51902971UL, 1750733272UL, 2842520097UL, 1631477948UL, 2321320272UL, 426039404UL, 2113375576UL, 1748401915UL, 3452514983UL, 2847013518UL, 2833368447UL, 275473920UL, 2394613217UL,
2091953150UL, 1250695522UL, 3524323828UL, 897057645UL, 488878212UL, 873197214UL, 1452317325UL, 3939852929UL, 944114068UL, 2026119728UL, 115875280UL, 4061820350UL, 3192643919UL, 989201307UL, 2236032812UL, 1888510348UL, 3986446165UL, 2166012172UL, 2121706374UL, 1407967546UL, 1826568876UL, 2910745432UL, 135277096UL, 2931815032UL, 1055135881UL, 2537437343UL, 2976455307UL, 2588429924UL, 1423973935UL, 3241939420UL, 3966440877UL, 2418897705UL,
2477142003UL, 2514473440UL, 1081133199UL, 1496940727UL, 1321648771UL, 1760129281UL, 81977310UL, 811187075UL, 1385604734UL, 17644628UL, 4070531513UL, 2100629879UL, 4142998949UL, 4195414618UL, 2697310527UL, 2688068550UL, 337182869UL, 84131191UL, 4387588UL, 1724191700UL, 1837403234UL, 661876463UL, 423660319UL, 2366546732UL, 693430992UL, 2916121190UL, 309510684UL, 3029102089UL, 2692507376UL, 3917396098UL, 303422295UL, 11119541UL,
1002311379UL, 3724446882UL, 841468294UL, 2652711421UL, 3486722046UL, 4141037460UL, 351865836UL, 1733384185UL, 113149471UL, 2818130700UL, 3109944987UL, 3207577548UL, 2326233100UL, 1443140792UL, 322875622UL, 3834145971UL, 1693380373UL, 1580706359UL, 901891935UL, 3879414752UL, 2226778032UL, 1044609478UL, 3805470822UL, 2213168758UL, 4207259464UL, 665553142UL, 2570993348UL, 3406548636UL, 1114492412UL, 553869152UL, 2855346376UL, 1205558328UL,
4287831475UL, 1329654114UL, 2347235746UL, 2477803138UL, 2962371859UL, 3610024283UL, 4197266903UL, 1162294689UL, 1746713323UL, 2815058477UL, 2152552186UL, 4214791071UL, 2382522482UL, 3713914466UL, 3974765132UL, 348354997UL, 1670276150UL, 2173074887UL, 381736894UL, 3866219357UL, 1919366695UL, 3635118824UL, 2298653261UL, 3534332682UL, 1627699897UL, 4168636618UL, 3787938690UL, 2144231271UL, 2067679462UL, 217001062UL, 2308928337UL, 1620415125UL,
3526559172UL, 749451561UL, 2456947371UL, 3543607786UL, 1893824735UL, 962598819UL, 2332807164UL, 1691114891UL, 2543992233UL, 2914780639UL, 1610287145UL, 1700599697UL, 3185174208UL, 552323208UL, 2367242224UL, 3797136972UL, 3415066418UL, 2468049249UL, 1677937401UL, 40445671UL, 2886682530UL, 2585715434UL, 194932329UL, 2994003812UL, 3099556382UL, 680852222UL, 135838738UL, 1371063256UL, 995454898UL, 3754526418UL, 803635682UL, 634588682UL,
3869250783UL, 2442285521UL, 1455637058UL, 570621479UL, 2512681851UL, 1220136924UL, 750260121UL, 2909903038UL, 1582019728UL, 955115170UL, 1608265445UL, 2157390890UL, 2303678604UL, 1568394164UL, 831914289UL, 1971271392UL, 1294799854UL, 1489945167UL, 442427880UL, 1305083700UL, 1211218668UL, 2380073713UL, 2798736785UL, 2193524273UL, 3227386915UL, 1636588977UL, 3612937642UL, 435113647UL, 1591761830UL, 536210039UL, 2475747073UL, 4223795480UL,
1786737271UL, 1444661534UL, 3249410301UL, 3333695212UL, 4169107188UL, 3280638635UL, 702659930UL, 1444127970UL, 225340755UL, 2255629368UL, 746584456UL, 3965677674UL, 2671132955UL, 2080717656UL, 2145343886UL, 3712441197UL, 368422910UL, 1297685674UL, 4076123901UL, 26214470UL, 2948764826UL, 40503299UL, 1198194334UL, 2100063637UL, 1966331612UL, 2189582064UL, 2064696934UL, 1797550642UL, 3469793941UL, 2868963812UL, 851437659UL, 240918534UL,
365060070UL, 3530600064UL, 39695324UL, 1753898837UL, 1286976449UL, 3131971360UL, 2406485219UL, 3365373704UL, 3224113403UL, 1651742834UL, 587601940UL, 1574206085UL, 3739575036UL, 1413669616UL, 38172232UL, 293127854UL, 4126190109UL, 1891744061UL, 787878666UL, 456643669UL, 4228710325UL, 2025132037UL, 1492133135UL, 3122840937UL, 969442079UL, 3272420439UL, 3836126369UL, 1877655562UL, 2766212758UL, 3867984746UL, 3348077578UL, 1841216706UL,
},
{
1676507466UL, 1017841240UL, 2992644565UL, 476936158UL, 2468072723UL, 3113105154UL, 1154120402UL, 460889625UL, 1942263502UL, 1761593999UL, 3020908939UL, 3078194866UL, 310971889UL, 1644896012UL, 3756044556UL, 3549937583UL, 3710822994UL, 3554313733UL, 2174654326UL, 4251063242UL, 2340485150UL, 950951909UL, 4288936895UL, 3744348848UL, 706644559UL, 1085927825UL, 1595992020UL, 3288724966UL, 1367247946UL, 2950094970UL, 3925419886UL, 2628739022UL,
2528254629UL, 3582224789UL, 3907345559UL, 3373329273UL, 4255542251UL, 1185418446UL, 4018656113UL, 2854344020UL, 1381160022UL, 3642438773UL, 4284399225UL, 935780030UL, 4142412144UL, 1263328494UL, 1154237693UL, 2684443667UL, 3067549398UL, 4253090033UL, 1251034970UL, 1874233020UL, 3222830495UL, 3866931656UL, 286048055UL, 3146635362UL, 1436483376UL, 2821876495UL, 3927829532UL, 2648886905UL, 2142862852UL, 1368937545UL, 2647327844UL, 1072219385UL,
2621337706UL, 3543274652UL, 911792564UL, 1204178178UL, 4127214323UL, 2821691380UL, 3101998294UL, 730811902UL, 1989156224UL, 2872353003UL, 278290276UL, 1390223786UL, 2657819643UL, 552729795UL, 1736270535UL, 2759207116UL, 1897013739UL, 3657020278UL, 1387364861UL, 1966588302UL, 1049203087UL, 486446521UL, 3675999281UL, 714737345UL, 686837530UL, 85509025UL, 3609089773UL, 2117061768UL, 3935682560UL, 3859508784UL, 4105287041UL, 1808988481UL,
83680601UL, 1464326680UL, 1657693523UL, 3318062731UL, 1391154023UL, 234460119UL, 3551348221UL, 2245244809UL, 3635923821UL, 2814385745UL, 3497626257UL, 916790795UL, 245338628UL, 2514528380UL, 3711787525UL, 2239286063UL, 1054058916UL, 3963706010UL, 3176203796UL, 2230543409UL, 2173597546UL, 3786733892UL, 1396036965UL, 1038764273UL, 2032556038UL, 3216540537UL, 3298170974UL, 1008892557UL, 141155464UL, 1863766055UL, 3931110690UL, 191299053UL,
2019139711UL, 2409528317UL, 739418419UL, 1377144055UL, 2876702705UL, 3911939673UL, 1197696462UL, 2814009721UL, 600813233UL, 1535885024UL, 1486280357UL, 3084650548UL, 2324695947UL, 2293284974UL, 2036339249UL, 3465600153UL, 1624446108UL, 327866771UL, 3356772175UL, 1826625240UL, 1947102360UL, 3661848193UL, 1421374867UL, 3228945021UL, 1358646008UL, 1067180174UL, 2190741258UL, 643362354UL, 109899594UL, 2064362635UL, 3249674888UL, 2165543887UL,
4180291913UL, 1676507466UL, 1017841240UL, 2992644565UL, 476936158UL, 3608467942UL, 3113105154UL, 1154120402UL, 460889625UL, 1942263502UL, 1862994005UL, 3020908939UL, 3078194866UL, 310971889UL, 1644896012UL, 693774191UL, 3549937583UL, 3710822994UL, 3554313733UL, 2174654326UL, 37658897UL, 2340485150UL, 950951909UL, 4288936895UL, 3744348848UL, 2258231402UL, 1085927825UL, 1595992020UL, 3288724966UL, 1367247946UL, 3850509554UL, 3925419886UL,
2628739022UL, 2528254629UL, 3582224789UL, 3124287811UL, 3373329273UL, 4255542251UL, 1185418446UL, 4018656113UL, 1989726178UL, 1381160022UL, 3642438773UL, 4284399225UL, 935780030UL, 3622052196UL, 1263328494UL, 1154237693UL, 2684443667UL, 3067549398UL, 2786224913UL, 1251034970UL, 1874233020UL, 3222830495UL, 3866931656UL, 1529490307UL, 3146635362UL, 1436483376UL, 2821876495UL, 3927829532UL, 979247444UL, 2142862852UL, 1368937545UL, 2647327844UL,
1072219385UL, 294065371UL, 3543274652UL, 911792564UL, 1204178178UL, 4127214323UL, 103582737UL, 3101998294UL, 730811902UL, 1989156224UL, 2872353003UL, 1885087777UL, 1390223786UL, 2657819643UL, 552729795UL, 1736270535UL, 3325206451UL, 1897013739UL, 3657020278UL, 1387364861UL, 1966588302UL, 2117065739UL, 486446521UL, 3675999281UL, 714737345UL, 686837530UL, 3946214694UL, 3609089773UL, 2117061768UL, 3935682560UL, 3859508784UL, 2916136885UL,
1808988481UL, 83680601UL, 1464326680UL, 1657693523UL, 3438751781UL, 1391154023UL, 234460119UL, 3551348221UL, 2245244809UL, 3948410079UL, 2814385745UL, 3497626257UL, 916790795UL, 245338628UL, 1767303496UL, 3711787525UL, 2239286063UL, 1054058916UL, 3963706010UL, 4140631909UL, 2230543409UL, 2173597546UL, 3786733892UL, 1396036965UL, 1116033475UL, 2032556038UL, 3216540537UL, 3298170974UL, 1008892557UL, 667272562UL, 1863766055UL, 3931110690UL,
191299053UL, 2019139711UL, 272901326UL, 739418419UL, 1377144055UL, 2876702705UL, 3911939673UL, 3839312742UL, 2814009721UL, 600813233UL, 1535885024UL, 1486280357UL, 4256065219UL, 2324695947UL, 2293284974UL, 2036339249UL, 3465600153UL, 1215859603UL, 327866771UL, 3356772175UL, 1826625240UL, 1947102360UL, 4240407984UL, 1421374867UL, 3228945021UL, 1358646008UL, 1067180174UL, 4100357988UL, 643362354UL, 109899594UL, 2064362635UL, 3249674888UL,
2898852084UL, 4180291913UL, 1676507466UL, 1017841240UL, 2992644565UL, 1569683812UL, 3608467942UL, 3113105154UL, 1154120402UL, 460889625UL, 966040649UL, 1862994005UL, 3020908939UL, 3078194866UL, 310971889UL, 786634113UL, 693774191UL, 3549937583UL, 3710822994UL, 3554313733UL, 1578429713UL, 37658897UL, 2340485150UL, 950951909UL, 4288936895UL, 2528123823UL, 2258231402UL, 1085927825UL, 1595992020UL, 3288724966UL, 3544041088UL, 3850509554UL,
3925419886UL, 2628739022UL, 2528254629UL, 2562145937UL, 3124287811UL, 3373329273UL, 4255542251UL, 1185418446UL, 3693565710UL, 1989726178UL, 1381160022UL, 3642438773UL, 4284399225UL, 3271478204UL, 3622052196UL, 1263328494UL, 1154237693UL, 2684443667UL, 3615401444UL, 2786224913UL, 1251034970UL, 1874233020UL, 3222830495UL, 2572413057UL, 1529490307UL, 3146635362UL, 1436483376UL, 2821876495UL, 3993894153UL, 979247444UL, 2142862852UL, 1368937545UL,
2647327844UL, 1353904396UL, 294065371UL, 3543274652UL, 911792564UL, 1204178178UL, 3165709748UL, 103582737UL, 3101998294UL, 730811902UL, 1989156224UL, 893293786UL, 1885087777UL, 1390223786UL, 2657819643UL, 552729795UL, 3388458110UL, 3325206451UL, 1897013739UL, 3657020278UL, 1387364861UL, 3025318046UL, 2117065739UL, 486446521UL, 3675999281UL, 714737345UL, 2085926890UL, 3946214694UL, 3609089773UL, 2117061768UL, 3935682560UL, 868009118UL,
2916136885UL, 1808988481UL, 83680601UL, 1464326680UL, 797410789UL, 3438751781UL, 1391154023UL, 234460119UL, 3551348221UL, 4068940987UL, 3948410079UL, 2814385745UL, 3497626257UL, 916790795UL, 3722456098UL, 1767303496UL, 3711787525UL, 2239286063UL, 1054058916UL, 2030352819UL, 4140631909UL, 2230543409UL, 2173597546UL, 3786733892UL, 3211336683UL, 1116033475UL, 2032556038UL, 3216540537UL, 3298170974UL, 2589589144UL, 667272562UL, 1863766055UL,
3931110690UL, 191299053UL, 1139480458UL, 272901326UL, 739418419UL, 1377144055UL, 2876702705UL, 1954361769UL, 3839312742UL, 2814009721UL, 600813233UL, 1535885024UL, 3587775605UL, 4256065219UL, 2324695947UL, 2293284974UL, 2036339249UL, 1534849280UL, 1215859603UL, 327866771UL, 3356772175UL, 1826625240UL, 720372669UL, 4240407984UL, 1421374867UL, 3228945021UL, 1358646008UL, 3409069246UL, 4100357988UL, 643362354UL, 109899594UL, 2064362635UL,
4243434294UL, 2898852084UL, 4180291913UL, 1676507466UL, 1017841240UL, 3243922356UL, 1569683812UL, 3608467942UL, 3113105154UL, 1154120402UL, 1479311403UL, 966040649UL, 1862994005UL, 3020908939UL, 3078194866UL, 1556392996UL, 786634113UL, 693774191UL, 3549937583UL, 3710822994UL, 920664071UL, 1578429713UL, 37658897UL, 2340485150UL, 950951909UL, 740197415UL, 2528123823UL, 2258231402UL, 1085927825UL, 1595992020UL, 2580760267UL, 3544041088UL,
3850509554UL, 3925419886UL, 2628739022UL, 3867556156UL, 2562145937UL, 3124287811UL, 3373329273UL, 4255542251UL, 3185271749UL, 3693565710UL, 1989726178UL, 1381160022UL, 3642438773UL, 3042165367UL, 3271478204UL, 3622052196UL, 1263328494UL, 1154237693UL, 1016814036UL, 3615401444UL, 2786224913UL, 1251034970UL, 1874233020UL, 2956086971UL, 2572413057UL, 1529490307UL, 3146635362UL, 1436483376UL, 1513970396UL, 3993894153UL, 979247444UL, 2142862852UL,
1368937545UL, 3275665128UL, 1353904396UL, 294065371UL, 3543274652UL, 911792564UL, 2209636872UL, 3165709748UL, 103582737UL, 3101998294UL, 730811902UL, 965151434UL, 893293786UL, 1885087777UL, 1390223786UL, 2657819643UL, 3278634059UL, 3388458110UL, 3325206451UL, 1897013739UL, 3657020278UL, 4293473749UL, 3025318046UL, 2117065739UL, 486446521UL, 3675999281UL, 620561205UL, 2085926890UL, 3946214694UL, 3609089773UL, 2117061768UL, 163384588UL,
868009118UL, 2916136885UL, 1808988481UL, 83680601UL, 10243015UL, 797410789UL, 3438751781UL, 1391154023UL, 234460119UL, 1278218413UL, 4068940987UL, 3948410079UL, 2814385745UL, 3497626257UL, 1233272798UL, 3722456098UL, 1767303496UL, 3711787525UL, 2239286063UL, 3968895688UL, 2030352819UL, 4140631909UL, 2230543409UL, 2173597546UL, 2866251044UL, 3211336683UL, 1116033475UL, 2032556038UL, 3216540537UL, 4233849723UL, 2589589144UL, 667272562UL,
1863766055UL, 3931110690UL, 2468422423UL, 1139480458UL, 272901326UL, 739418419UL, 1377144055UL, 4240143411UL, 1954361769UL, 3839312742UL, 2814009721UL, 600813233UL, 3976840004UL, 3587775605UL, 4256065219UL, 2324695947UL, 2293284974UL, 437604123UL, 1534849280UL, 1215859603UL, 327866771UL, 3356772175UL, 2757237699UL, 720372669UL, 4240407984UL, 1421374867UL, 3228945021UL, 3284801305UL, 3409069246UL, 4100357988UL, 643362354UL, 109899594UL,
1301585321UL, 2528806870UL, 1838904064UL, 448772403UL, 1097849740UL, 1899994097UL, 618309123UL, 1911948510UL, 2309256224UL, 1861398151UL, 905306403UL, 1067595802UL, 36868624UL, 3780886191UL, 835126206UL, 3190251977UL, 2672497726UL, 2085944002UL, 2912993968UL, 2493776706UL, 667136329UL, 1474890786UL, 2383346554UL, 943528949UL, 3376706013UL, 2495573574UL, 144956345UL, 793159960UL, 1591274917UL, 477107637UL, 1383815442UL, 67384899UL,
2355242218UL, 1687409818UL, 3801093871UL, 2108217811UL, 3455908733UL, 4172160797UL, 3935534685UL, 631067839UL, 1187677548UL, 2280856137UL, 3020767646UL, 2063176246UL, 3736904984UL, 2952933848UL, 2975164686UL, 4144473303UL, 34670977UL, 1250976509UL, 3484166554UL, 1532744745UL, 225700994UL, 1878713627UL, 2122358980UL, 1456610194UL, 2917522161UL, 2818947075UL, 102678939UL, 53743858UL, 2095250656UL, 4023979225UL, 3094092874UL, 4128760696UL,
3411610028UL, 3020200609UL, 2225866341UL, 586320946UL, 63813522UL, 1238216159UL, 2825692263UL, 2169937231UL, 3298517640UL, 1542128261UL, 2205544184UL, 1258655704UL, 2629012083UL, 4113650203UL, 3198617867UL, 2742310794UL, 3372657381UL, 3115904410UL, 1948638822UL, 1123521744UL, 1080429281UL, 4086706732UL, 4142693211UL, 817377147UL, 2570194641UL, 26001503UL, 2861456160UL, 4185725555UL, 2573003804UL, 1618628779UL, 2588489212UL, 3996192609UL,
1555844274UL, 1003123505UL, 1326350123UL, 1130583849UL, 3017128756UL, 74119042UL, 4041266437UL, 1938014170UL, 3528465794UL, 4203969698UL, 1913054398UL, 3617979809UL, 2218810167UL, 2453899816UL, 1997423206UL, 477446533UL, 303090065UL, 757937082UL, 1523238256UL, 3140505311UL, 1422588701UL, 3642014639UL, 1740624195UL, 1276017154UL, 3072526193UL, 3675105122UL, 1335122682UL, 4080595263UL, 2308519420UL, 3299182769UL, 1461978532UL, 3098694217UL,
2982399822UL, 3088698511UL, 586759229UL, 3548750902UL, 1449857891UL, 2866451663UL, 2525162286UL, 57294602UL, 4107991297UL, 1214672265UL, 2940391280UL, 4285346034UL, 3338216759UL, 737207923UL, 4264163846UL, 59219141UL, 2300024654UL, 1876616814UL, 1976543605UL, 783571061UL, 1724699622UL, 1967524469UL, 1650309916UL, 3322257631UL, 3975521122UL, 273342162UL, 1156754241UL, 185315896UL, 3368133921UL, 66314655UL, 4153777915UL, 3519901897UL,
},
{
3672467167UL, 68684525UL, 1738833632UL, 3081329135UL, 2583806115UL, 2291130512UL, 503032614UL, 3658059597UL, 571493931UL, 685537959UL, 3498787788UL, 422428426UL, 3879256913UL, 1173158320UL, 4000800121UL, 298972869UL, 1718342816UL, 2541691685UL, 2490502642UL, 2321452806UL, 4223212804UL, 1812334632UL, 3717655725UL, 4238191852UL, 3001307165UL, 2621896355UL, 2572404999UL, 3590094954UL, 760765206UL, 2293618001UL, 1392353032UL, 1733137169UL,
2674005018UL, 4067961151UL, 1505710487UL, 451078217UL, 2591688848UL, 12635611UL, 507045428UL, 694822241UL, 1789383090UL, 1140183890UL, 1720695967UL, 1994318191UL, 3340349873UL, 2793804971UL, 1054433135UL, 2345087879UL, 3179939285UL, 1651968615UL, 1793223686UL, 1055357758UL, 914271617UL, 483007580UL, 2127727816UL, 2754998083UL, 3179053982UL, 598442002UL, 1950227301UL, 213053613UL, 3566888111UL, 2832258993UL, 4260365359UL, 443662829UL,
1706542890UL, 3852730296UL, 3643260763UL, 2163607277UL, 1812905006UL, 171529637UL, 215187467UL, 2369406909UL, 1929000706UL, 2572441025UL, 2133955541UL, 810692262UL, 1337974799UL, 4030350704UL, 2159178715UL, 3769451556UL, 1026825278UL, 593628480UL, 1817383139UL, 878832429UL, 2253876350UL, 203612980UL, 2102950440UL, 3407143936UL, 1912362251UL, 1595387637UL, 2827580539UL, 305467658UL, 3292706746UL, 44135525UL, 4001933553UL, 3697343089UL,
760470915UL, 587414402UL, 1419378814UL, 2852774010UL, 3891626781UL, 2757016765UL, 1090707384UL, 3997074427UL, 1047182100UL, 2855539022UL, 36229159UL, 1591415533UL, 3471572739UL, 1237952140UL, 2614469314UL, 213338525UL, 886212578UL, 2620301943UL, 713590207UL, 2430496777UL, 1198164420UL, 2644841698UL, 3654164701UL, 36283572UL, 1461695896UL, 1770331341UL, 1641501876UL, 3470919184UL, 3181021559UL, 3053795110UL, 3533531372UL, 3134337355UL,
668308383UL, 388340999UL, 3221275220UL, 1589659138UL, 294382235UL, 1447443579UL, 690177534UL, 1799726917UL, 2838977761UL, 4172949119UL, 2360858031UL, 159385920UL, 2248389027UL, 1790015671UL, 3925738275UL, 1049918544UL, 4107349511UL, 1619955951UL, 4188275966UL, 1672572975UL, 2672697497UL, 1863413666UL, 747724021UL, 4037561738UL, 1605940213UL, 445253292UL, 3362434828UL, 610898209UL, 1473244091UL, 735444769UL, 1540599852UL, 2449351720UL,
1032410949UL, 3672467167UL, 68684525UL, 1738833632UL, 3081329135UL, 519684794UL, 2291130512UL, 503032614UL, 3658059597UL, 571493931UL, 2400186105UL, 3498787788UL, 422428426UL, 3879256913UL, 1173158320UL, 4120704752UL, 298972869UL, 1718342816UL, 2541691685UL, 2490502642UL, 1686027891UL, 4223212804UL, 1812334632UL, 3717655725UL, 4238191852UL, 642431972UL, 2621896355UL, 2572404999UL, 3590094954UL, 760765206UL, 2949609717UL, 1392353032UL,
1733137169UL, 2674005018UL, 4067961151UL, 1526077846UL, 451078217UL, 2591688848UL, 12635611UL, 507045428UL, 2417951415UL, 1789383090UL, 1140183890UL, 1720695967UL, 1994318191UL, 3465605863UL, 2793804971UL, 1054433135UL, 2345087879UL, 3179939285UL, 3079297626UL, 1793223686UL, 1055357758UL, 914271617UL, 483007580UL, 306802527UL, 2754998083UL, 3179053982UL, 598442002UL, 1950227301UL, 2473418737UL, 3566888111UL, 2832258993UL, 4260365359UL,
443662829UL, 2097776414UL, 3852730296UL, 3643260763UL, 2163607277UL, 1812905006UL, 3957721904UL, 215187467UL, 2369406909UL, 1929000706UL, 2572441025UL, 3779486126UL, 810692262UL, 1337974799UL, 4030350704UL, 2159178715UL, 1127012865UL, 1026825278UL, 593628480UL, 1817383139UL, 878832429UL, 361018423UL, 203612980UL, 2102950440UL, 3407143936UL, 1912362251UL, 1475218277UL, 2827580539UL, 305467658UL, 3292706746UL, 44135525UL, 1900092336UL,
3697343089UL, 760470915UL, 587414402UL, 1419378814UL, 343303227UL, 3891626781UL, 2757016765UL, 1090707384UL, 3997074427UL, 745490961UL, 2855539022UL, 36229159UL, 1591415533UL, 3471572739UL, 3920625546UL, 2614469314UL, 213338525UL, 886212578UL, 2620301943UL, 827771411UL, 2430496777UL, 1198164420UL, 2644841698UL, 3654164701UL, 2747674190UL, 1461695896UL, 1770331341UL, 1641501876UL, 3470919184UL, 919857376UL, 3053795110UL, 3533531372UL,
3134337355UL, 668308383UL, 201138876UL, 3221275220UL, 1589659138UL, 294382235UL, 1447443579UL, 4211579707UL, 1799726917UL, 2838977761UL, 4172949119UL, 2360858031UL, 416103844UL, 2248389027UL, 1790015671UL, 3925738275UL, 1049918544UL, 3481887924UL, 1619955951UL, 4188275966UL, 1672572975UL, 2672697497UL, 564854400UL, 747724021UL, 4037561738UL, 1605940213UL, 445253292UL, 604900912UL, 610898209UL, 1473244091UL, 735444769UL, 1540599852UL,
3036173307UL, 1032410949UL, 3672467167UL, 68684525UL, 1738833632UL, 973022696UL, 519684794UL, 2291130512UL, 503032614UL, 3658059597UL, 1500301452UL, 2400186105UL, 3498787788UL, 422428426UL, 3879256913UL, 3923611748UL, 4120704752UL, 298972869UL, 1718342816UL, 2541691685UL, 2323881484UL, 1686027891UL, 4223212804UL, 1812334632UL, 3717655725UL, 2109094458UL, 642431972UL, 2621896355UL, 2572404999UL, 3590094954UL, 1837882537UL, 2949609717UL,
1392353032UL, 1733137169UL, 2674005018UL, 3252348987UL, 1526077846UL, 451078217UL, 2591688848UL, 12635611UL, 3971261781UL, 2417951415UL, 1789383090UL, 1140183890UL, 1720695967UL, 2906966040UL, 3465605863UL, 2793804971UL, 1054433135UL, 2345087879UL, 915518921UL, 3079297626UL, 1793223686UL, 1055357758UL, 914271617UL, 791633499UL, 306802527UL, 2754998083UL, 3179053982UL, 598442002UL, 324402573UL, 2473418737UL, 3566888111UL, 2832258993UL,
4260365359UL, 2168046398UL, 2097776414UL, 3852730296UL, 3643260763UL, 2163607277UL, 2595175979UL, 3957721904UL, 215187467UL, 2369406909UL, 1929000706UL, 657446369UL, 3779486126UL, 810692262UL, 1337974799UL, 4030350704UL, 1865557469UL, 1127012865UL, 1026825278UL, 593628480UL, 1817383139UL, 3414354529UL, 361018423UL, 203612980UL, 2102950440UL, 3407143936UL, 1739372987UL, 1475218277UL, 2827580539UL, 305467658UL, 3292706746UL, 825045562UL,
1900092336UL, 3697343089UL, 760470915UL, 587414402UL, 2000637694UL, 343303227UL, 3891626781UL, 2757016765UL, 1090707384UL, 4015377800UL, 745490961UL, 2855539022UL, 36229159UL, 1591415533UL, 2208656873UL, 3920625546UL, 2614469314UL, 213338525UL, 886212578UL, 2729976209UL, 827771411UL, 2430496777UL, 1198164420UL, 2644841698UL, 1922667440UL, 2747674190UL, 1461695896UL, 1770331341UL, 1641501876UL, 357535311UL, 919857376UL, 3053795110UL,
3533531372UL, 3134337355UL, 1004072597UL, 201138876UL, 3221275220UL, 1589659138UL, 294382235UL, 1148950143UL, 4211579707UL, 1799726917UL, 2838977761UL, 4172949119UL, 892664404UL, 416103844UL, 2248389027UL, 1790015671UL, 3925738275UL, 2612357890UL, 3481887924UL, 1619955951UL, 4188275966UL, 1672572975UL, 2005534713UL, 564854400UL, 747724021UL, 4037561738UL, 1605940213UL, 2620990454UL, 604900912UL, 610898209UL, 1473244091UL, 735444769UL,
3571225334UL, 3036173307UL, 1032410949UL, 3672467167UL, 68684525UL, 3327351604UL, 973022696UL, 519684794UL, 2291130512UL, 503032614UL, 3814902238UL, 1500301452UL, 2400186105UL, 3498787788UL, 422428426UL, 1756753750UL, 3923611748UL, 4120704752UL, 298972869UL, 1718342816UL, 652903081UL, 2323881484UL, 1686027891UL, 4223212804UL, 1812334632UL, 1599640566UL, 2109094458UL, 642431972UL, 2621896355UL, 2572404999UL, 1668409355UL, 1837882537UL,
2949609717UL, 1392353032UL, 1733137169UL, 3691709793UL, 3252348987UL, 1526077846UL, 451078217UL, 2591688848UL, 3353622601UL, 3971261781UL, 2417951415UL, 1789383090UL, 1140183890UL, 4113853791UL, 2906966040UL, 3465605863UL, 2793804971UL, 1054433135UL, 2195882948UL, 915518921UL, 3079297626UL, 1793223686UL, 1055357758UL, 898713552UL, 791633499UL, 306802527UL, 2754998083UL, 3179053982UL, 2469350088UL, 324402573UL, 2473418737UL, 3566888111UL,
2832258993UL, 1377718274UL, 2168046398UL, 2097776414UL, 3852730296UL, 3643260763UL, 3492388484UL, 2595175979UL, 3957721904UL, 215187467UL, 2369406909UL, 4243449339UL, 657446369UL, 3779486126UL, 810692262UL, 1337974799UL, 3960230785UL, 1865557469UL, 1127012865UL, 1026825278UL, 593628480UL, 732793312UL, 3414354529UL, 361018423UL, 203612980UL, 2102950440UL, 2401792405UL, 1739372987UL, 1475218277UL, 2827580539UL, 305467658UL, 2454275289UL,
825045562UL, 1900092336UL, 3697343089UL, 760470915UL, 2146882409UL, 2000637694UL, 343303227UL, 3891626781UL, 2757016765UL, 3997473261UL, 4015377800UL, 745490961UL, 2855539022UL, 36229159UL, 2375394427UL, 2208656873UL, 3920625546UL, 2614469314UL, 213338525UL, 2055366274UL, 2729976209UL, 827771411UL, 2430496777UL, 1198164420UL, 1789631187UL, 1922667440UL, 2747674190UL, 1461695896UL, 1770331341UL, 4284442852UL, 357535311UL, 919857376UL,
3053795110UL, 3533531372UL, 2124270060UL, 1004072597UL, 201138876UL, 3221275220UL, 1589659138UL, 1418386120UL, 1148950143UL, 4211579707UL, 1799726917UL, 2838977761UL, 3540708069UL, 892664404UL, 416103844UL, 2248389027UL, 1790015671UL, 3936883UL, 2612357890UL, 3481887924UL, 1619955951UL, 4188275966UL, 2963623483UL, 2005534713UL, 564854400UL, 747724021UL, 4037561738UL, 3431155922UL, 2620990454UL, 604900912UL, 610898209UL, 1473244091UL,
3880001339UL, 2879060316UL, 3300897679UL, 3960972039UL, 3201086624UL, 3814462934UL, 3426650044UL, 1930881632UL, 1981178788UL, 2956279691UL, 4272406256UL, 372705521UL, 1359389771UL, 1590302979UL, 3940206208UL, 3817999127UL, 2527835456UL, 2739078164UL, 716997849UL, 3235607043UL, 2550297745UL, 3688700200UL, 354502605UL, 2285793656UL, 2339138034UL, 3912354142UL, 2262255668UL, 469322622UL, 1319943359UL, 1916101235UL, 200441823UL, 509436982UL,
2160284593UL, 1687919695UL, 4153615582UL, 495735041UL, 3694469424UL, 2086893117UL, 4223008799UL, 105344742UL, 1698033424UL, 1149223145UL, 4183918790UL, 4176151950UL, 415739351UL, 817762972UL, 3768072560UL, 1931430949UL, 2698979439UL, 3481477932UL, 1994322914UL, 4078299950UL, 1268233995UL, 3254069145UL, 91029129UL, 498234704UL, 1636613942UL, 3710087092UL, 3876816560UL, 3510446387UL, 3870169008UL, 1370156410UL, 2442498047UL, 2324396523UL,
1258730334UL, 621954739UL, 1053015373UL, 491820717UL, 3386515432UL, 2203703266UL, 120167176UL, 2383669740UL, 1038666440UL, 2927342870UL, 3583197824UL, 1236241846UL, 2474675929UL, 679052891UL, 2451259584UL, 2177706146UL, 606842882UL, 3546980104UL, 2289281509UL, 353873434UL, 2041926837UL, 1238346748UL, 2729109726UL, 2843938395UL, 2938124210UL, 2554443866UL, 1494477920UL, 693378319UL, 2020963566UL, 2000385949UL, 3744098787UL, 650307220UL,
2631327075UL, 1529128757UL, 595871428UL, 3206666562UL, 458062987UL, 875238192UL, 3729317374UL, 1368843921UL, 3478430230UL, 3234384578UL, 3232435428UL, 321359326UL, 994274524UL, 361184397UL, 4285497594UL, 915263578UL, 1486882838UL, 9988613UL, 829077170UL, 677216046UL, 4141828204UL, 165804609UL, 1086678519UL, 2933434608UL, 1351662802UL, 2640085040UL, 2611502932UL, 2033698714UL, 2008873254UL, 3995557835UL, 1020873906UL, 67873555UL,
2230337823UL, 1263800417UL, 1148712155UL, 3985159589UL, 2979503513UL, 2854714997UL, 1539343345UL, 2751484352UL, 1569100732UL, 2020758949UL, 2126757134UL, 3426641899UL, 2808587825UL, 1953320148UL, 1096398464UL, 1502907172UL, 3751230087UL, 765557661UL, 765290990UL, 3056075500UL, 2040620632UL, 422573751UL, 3613558930UL, 1741145769UL, 273531216UL, 837238736UL, 494297893UL, 2903251124UL, 1636782182UL, 4256592784UL, 3652746656UL, 4258393217UL,
},

};

static unsigned int precalc_xorwow_matrix_host[8][800] = {
{
850664906UL, 2293210629UL, 1517805917UL, 1215500405UL, 1612415445UL, 645388200UL, 824349799UL, 3517232886UL, 4075591755UL, 3089899292UL, 4249786064UL, 3811424903UL, 1100783479UL, 53649761UL, 2817264826UL, 3159462529UL, 1654848550UL, 950025444UL, 3095510002UL, 4080567211UL, 4111078399UL, 3241719305UL, 2788212779UL, 4256963770UL, 2426893717UL, 4190211142UL, 1420776905UL, 3780537969UL, 1102912875UL, 1657948873UL, 3354905256UL, 2519610308UL,
515777663UL, 3396785394UL, 1832603711UL, 1154211550UL, 1915690212UL, 1933919046UL, 789578337UL, 337961173UL, 1359089498UL, 2249086205UL, 3417955173UL, 862571348UL, 528120760UL, 1265685672UL, 1970052076UL, 3585976752UL, 3645339918UL, 312171257UL, 1360991400UL, 1994321680UL, 2327168468UL, 2540437053UL, 1180483641UL, 2217962701UL, 182726833UL, 590204372UL, 1904496495UL, 2545607041UL, 3697978033UL, 1084030545UL, 3397906968UL, 2192325323UL,
2704204176UL, 1069092002UL, 2364406907UL, 1578647245UL, 3561974633UL, 3437665426UL, 1464127305UL, 1616628807UL, 2243114101UL, 3639967880UL, 1702613633UL, 2437350057UL, 39991274UL, 2024323584UL, 3795072940UL, 3604530798UL, 443099203UL, 643536212UL, 1919517328UL, 3931285769UL, 427935569UL, 276421624UL, 2492081750UL, 262729512UL, 3088549877UL, 2922650665UL, 1816283755UL, 4246096489UL, 842575914UL, 1460435650UL, 3050522190UL, 2640849794UL,
3697925816UL, 3465779075UL, 3856929655UL, 1365559780UL, 2897029415UL, 2747033756UL, 3611830629UL, 1891542518UL, 1897590206UL, 437451803UL, 677924906UL, 123809117UL, 3940574372UL, 687640291UL, 3488484529UL, 470218446UL, 1092571016UL, 1537938503UL, 1073323937UL, 611300083UL, 3809285994UL, 3975678726UL, 925845389UL, 2514775760UL, 2859302390UL, 2761919483UL, 993285307UL, 164095287UL, 3736193671UL, 2078946336UL, 1418537059UL, 1202525920UL,
4234029440UL, 1313593624UL, 2484428922UL, 1833969372UL, 661495122UL, 2217907395UL, 2795045321UL, 2950835531UL, 1402379354UL, 351314168UL, 1902476749UL, 1914974334UL, 2873973176UL, 1321203603UL, 3316118265UL, 3282193947UL, 1342191737UL, 793441242UL, 3281524559UL, 296088733UL, 487851702UL, 712098215UL, 1388727135UL, 1705533557UL, 3557800292UL, 399729516UL, 1355829467UL, 291276309UL, 421164833UL, 1318404599UL, 2064519128UL, 1161612642UL,
2076623594UL, 850664906UL, 2293210629UL, 1517805917UL, 1215500405UL, 3847487204UL, 645388200UL, 824349799UL, 3517232886UL, 4075591755UL, 2755872609UL, 4249786064UL, 3811424903UL, 1100783479UL, 53649761UL, 1417544262UL, 3159462529UL, 1654848550UL, 950025444UL, 3095510002UL, 1908900347UL, 4111078399UL, 3241719305UL, 2788212779UL, 4256963770UL, 3750258343UL, 4190211142UL, 1420776905UL, 3780537969UL, 1102912875UL, 1690550UL, 3354905256UL,
2519610308UL, 515777663UL, 3396785394UL, 2658162202UL, 1154211550UL, 1915690212UL, 1933919046UL, 789578337UL, 189880016UL, 1359089498UL, 2249086205UL, 3417955173UL, 862571348UL, 998719835UL, 1265685672UL, 1970052076UL, 3585976752UL, 3645339918UL, 2973042959UL, 1360991400UL, 1994321680UL, 2327168468UL, 2540437053UL, 2283905032UL, 2217962701UL, 182726833UL, 590204372UL, 1904496495UL, 110719262UL, 3697978033UL, 1084030545UL, 3397906968UL,
2192325323UL, 4133333579UL, 1069092002UL, 2364406907UL, 1578647245UL, 3561974633UL, 3629845331UL, 1464127305UL, 1616628807UL, 2243114101UL, 3639967880UL, 3256744141UL, 2437350057UL, 39991274UL, 2024323584UL, 3795072940UL, 1024703328UL, 443099203UL, 643536212UL, 1919517328UL, 3931285769UL, 2755167056UL, 276421624UL, 2492081750UL, 262729512UL, 3088549877UL, 2817867653UL, 1816283755UL, 4246096489UL, 842575914UL, 1460435650UL, 2276077438UL,
2640849794UL, 3697925816UL, 3465779075UL, 3856929655UL, 130551477UL, 2897029415UL, 2747033756UL, 3611830629UL, 1891542518UL, 804565809UL, 437451803UL, 677924906UL, 123809117UL, 3940574372UL, 2446610749UL, 3488484529UL, 470218446UL, 1092571016UL, 1537938503UL, 1502147484UL, 611300083UL, 3809285994UL, 3975678726UL, 925845389UL, 872826112UL, 2859302390UL, 2761919483UL, 993285307UL, 164095287UL, 3901654538UL, 2078946336UL, 1418537059UL,
1202525920UL, 4234029440UL, 704759480UL, 2484428922UL, 1833969372UL, 661495122UL, 2217907395UL, 3287413716UL, 2950835531UL, 1402379354UL, 351314168UL, 1902476749UL, 2033316109UL, 2873973176UL, 1321203603UL, 3316118265UL, 3282193947UL, 1316780684UL, 793441242UL, 3281524559UL, 296088733UL, 487851702UL, 314311643UL, 1388727135UL, 1705533557UL, 3557800292UL, 399729516UL, 1660074989UL, 291276309UL, 421164833UL, 1318404599UL, 2064519128UL,
3156334112UL, 2076623594UL, 850664906UL, 2293210629UL, 1517805917UL, 335452425UL, 3847487204UL, 645388200UL, 824349799UL, 3517232886UL, 954487767UL, 2755872609UL, 4249786064UL, 3811424903UL, 1100783479UL, 3408594583UL, 1417544262UL, 3159462529UL, 1654848550UL, 950025444UL, 324339737UL, 1908900347UL, 4111078399UL, 3241719305UL, 2788212779UL, 1890540205UL, 3750258343UL, 4190211142UL, 1420776905UL, 3780537969UL, 3716648585UL, 1690550UL,
3354905256UL, 2519610308UL, 515777663UL, 3758156132UL, 2658162202UL, 1154211550UL, 1915690212UL, 1933919046UL, 844149171UL, 189880016UL, 1359089498UL, 2249086205UL, 3417955173UL, 1031812215UL, 998719835UL, 1265685672UL, 1970052076UL, 3585976752UL, 3174204115UL, 2973042959UL, 1360991400UL, 1994321680UL, 2327168468UL, 714016907UL, 2283905032UL, 2217962701UL, 182726833UL, 590204372UL, 2151450260UL, 110719262UL, 3697978033UL, 1084030545UL,
3397906968UL, 767772303UL, 4133333579UL, 1069092002UL, 2364406907UL, 1578647245UL, 42955292UL, 3629845331UL, 1464127305UL, 1616628807UL, 2243114101UL, 3222189776UL, 3256744141UL, 2437350057UL, 39991274UL, 2024323584UL, 3142424684UL, 1024703328UL, 443099203UL, 643536212UL, 1919517328UL, 918511196UL, 2755167056UL, 276421624UL, 2492081750UL, 262729512UL, 4246877536UL, 2817867653UL, 1816283755UL, 4246096489UL, 842575914UL, 1425765936UL,
2276077438UL, 2640849794UL, 3697925816UL, 3465779075UL, 1491702526UL, 130551477UL, 2897029415UL, 2747033756UL, 3611830629UL, 1844578694UL, 804565809UL, 437451803UL, 677924906UL, 123809117UL, 3419189841UL, 2446610749UL, 3488484529UL, 470218446UL, 1092571016UL, 3272535988UL, 1502147484UL, 611300083UL, 3809285994UL, 3975678726UL, 2853681168UL, 872826112UL, 2859302390UL, 2761919483UL, 993285307UL, 1434560128UL, 3901654538UL, 2078946336UL,
1418537059UL, 1202525920UL, 2530097881UL, 704759480UL, 2484428922UL, 1833969372UL, 661495122UL, 503878844UL, 3287413716UL, 2950835531UL, 1402379354UL, 351314168UL, 4131886119UL, 2033316109UL, 2873973176UL, 1321203603UL, 3316118265UL, 237900321UL, 1316780684UL, 793441242UL, 3281524559UL, 296088733UL, 1730738847UL, 314311643UL, 1388727135UL, 1705533557UL, 3557800292UL, 1553835665UL, 1660074989UL, 291276309UL, 421164833UL, 1318404599UL,
964731488UL, 3156334112UL, 2076623594UL, 850664906UL, 2293210629UL, 1105350579UL, 335452425UL, 3847487204UL, 645388200UL, 824349799UL, 2789953706UL, 954487767UL, 2755872609UL, 4249786064UL, 3811424903UL, 3937839949UL, 3408594583UL, 1417544262UL, 3159462529UL, 1654848550UL, 624060530UL, 324339737UL, 1908900347UL, 4111078399UL, 3241719305UL, 2294919498UL, 1890540205UL, 3750258343UL, 4190211142UL, 1420776905UL, 2279133729UL, 3716648585UL,
1690550UL, 3354905256UL, 2519610308UL, 3563975602UL, 3758156132UL, 2658162202UL, 1154211550UL, 1915690212UL, 3505586122UL, 844149171UL, 189880016UL, 1359089498UL, 2249086205UL, 2389487504UL, 1031812215UL, 998719835UL, 1265685672UL, 1970052076UL, 2798611919UL, 3174204115UL, 2973042959UL, 1360991400UL, 1994321680UL, 1684134678UL, 714016907UL, 2283905032UL, 2217962701UL, 182726833UL, 1734988742UL, 2151450260UL, 110719262UL, 3697978033UL,
1084030545UL, 159906818UL, 767772303UL, 4133333579UL, 1069092002UL, 2364406907UL, 1290801202UL, 42955292UL, 3629845331UL, 1464127305UL, 1616628807UL, 987794861UL, 3222189776UL, 3256744141UL, 2437350057UL, 39991274UL, 3644076751UL, 3142424684UL, 1024703328UL, 443099203UL, 643536212UL, 1487589384UL, 918511196UL, 2755167056UL, 276421624UL, 2492081750UL, 137688638UL, 4246877536UL, 2817867653UL, 1816283755UL, 4246096489UL, 1518475380UL,
1425765936UL, 2276077438UL, 2640849794UL, 3697925816UL, 4226506771UL, 1491702526UL, 130551477UL, 2897029415UL, 2747033756UL, 2033599579UL, 1844578694UL, 804565809UL, 437451803UL, 677924906UL, 2749065512UL, 3419189841UL, 2446610749UL, 3488484529UL, 470218446UL, 290444026UL, 3272535988UL, 1502147484UL, 611300083UL, 3809285994UL, 2546040767UL, 2853681168UL, 872826112UL, 2859302390UL, 2761919483UL, 4097961150UL, 1434560128UL, 3901654538UL,
2078946336UL, 1418537059UL, 2725734455UL, 2530097881UL, 704759480UL, 2484428922UL, 1833969372UL, 3999408333UL, 503878844UL, 3287413716UL, 2950835531UL, 1402379354UL, 3861442503UL, 4131886119UL, 2033316109UL, 2873973176UL, 1321203603UL, 1267331405UL, 237900321UL, 1316780684UL, 793441242UL, 3281524559UL, 1273427916UL, 1730738847UL, 314311643UL, 1388727135UL, 1705533557UL, 1474310231UL, 1553835665UL, 1660074989UL, 291276309UL, 421164833UL,
3884815658UL, 3088049345UL, 3307042227UL, 3228948601UL, 1717605083UL, 1864502063UL, 3799516572UL, 2372822470UL, 2691586476UL, 1172840854UL, 1577099080UL, 870101866UL, 2139291021UL, 406996656UL, 255568268UL, 897760202UL, 674745664UL, 885214361UL, 3753233375UL, 3015215223UL, 1711461259UL, 3241363282UL, 2125360928UL, 2493601640UL, 2350228245UL, 3434627328UL, 2095642963UL, 3360932494UL, 3287396242UL, 4070512427UL, 3415702664UL, 1958354224UL,
3280206940UL, 3929504236UL, 3390499817UL, 4144225735UL, 3621750606UL, 3205006592UL, 3495743785UL, 269239326UL, 2181299371UL, 2898796651UL, 2613623219UL, 3988711298UL, 2162437858UL, 949553433UL, 3289670000UL, 3559525307UL, 3366925567UL, 2112148665UL, 955626393UL, 1790865381UL, 699223558UL, 3889584301UL, 1020750250UL, 4105283899UL, 2295851818UL, 4045668915UL, 2224770025UL, 766386910UL, 4265157386UL, 89139307UL, 2099710177UL, 1012450874UL,
1875492446UL, 1927399417UL, 767450812UL, 654474783UL, 4265293038UL, 4041215389UL, 4102336947UL, 4263617328UL, 2135826340UL, 2317231535UL, 3773895729UL, 403151111UL, 1400693138UL, 4255050194UL, 755369466UL, 2325764302UL, 2617301159UL, 4165707294UL, 1206304709UL, 2415645397UL, 4276004841UL, 1457022279UL, 662660652UL, 795140282UL, 828519889UL, 805830562UL, 1179976369UL, 2212548232UL, 755708248UL, 1034682071UL, 899950902UL, 1906046264UL,
1861009040UL, 310711525UL, 920739741UL, 2322414272UL, 3179236470UL, 81822135UL, 4111390320UL, 1800166783UL, 112253014UL, 688771939UL, 1050990794UL, 3124647483UL, 287052171UL, 1363630156UL, 3447798279UL, 1405733552UL, 3075862538UL, 1682808202UL, 1595154222UL, 1173705692UL, 680713285UL, 2748212230UL, 568610527UL, 3434965538UL, 1114942930UL, 2835858745UL, 2575992250UL, 3243355150UL, 2127580225UL, 1855934450UL, 3915941751UL, 2228679809UL,
1514780124UL, 1506688039UL, 1033083295UL, 793807083UL, 1120681149UL, 4105670165UL, 3999570340UL, 2083020131UL, 1213356023UL, 3684882757UL, 3375797774UL, 3577986103UL, 2092046164UL, 2593847443UL, 1826450612UL, 367828409UL, 3198272513UL, 1941316667UL, 943707510UL, 907134807UL, 2020457947UL, 1462193665UL, 2964617539UL, 4216491663UL, 2625270800UL, 2395371467UL, 3691003028UL, 3659016793UL, 2381847054UL, 3513105567UL, 3013019506UL, 2731245927UL,
},
{
1680024716UL, 2112340059UL, 3387475367UL, 2080916186UL, 1431532386UL, 3907378472UL, 2636491350UL, 2176128529UL, 2236616671UL, 3736851460UL, 2604001339UL, 3893075234UL, 3495918635UL, 4116370522UL, 1384310379UL, 3660102574UL, 2030233939UL, 2759207091UL, 49347923UL, 97526506UL, 2566932710UL, 1566181275UL, 3127827248UL, 578401670UL, 1499229308UL, 2581732444UL, 279715551UL, 809690877UL, 1438444015UL, 878935323UL, 1495277039UL, 3417305339UL,
2858903785UL, 3074075088UL, 603749086UL, 2370669734UL, 391683868UL, 3933465331UL, 2884128106UL, 1478317876UL, 1864988335UL, 2925823809UL, 4133578805UL, 218104493UL, 368652174UL, 1998600344UL, 1109346044UL, 1716435313UL, 415435111UL, 91393686UL, 2536620737UL, 1440068573UL, 481874870UL, 142128108UL, 988825519UL, 2077118779UL, 2858045339UL, 4068162251UL, 115593872UL, 1364244587UL, 3550167006UL, 3728768059UL, 1772423685UL, 2504624145UL,
248732306UL, 1412607307UL, 4081166331UL, 154438218UL, 1652901877UL, 3932533490UL, 3142799969UL, 3154073676UL, 3112018078UL, 2757873595UL, 2364830126UL, 2855791484UL, 793851407UL, 507785167UL, 263713916UL, 4060700051UL, 3291978358UL, 1584226715UL, 2546417990UL, 450747961UL, 2951067700UL, 2706009093UL, 1788578194UL, 4030171132UL, 2610979903UL, 573420740UL, 4269115622UL, 2180305819UL, 2646894726UL, 716649335UL, 3875715683UL, 853428184UL,
2436760738UL, 4190071217UL, 2754423535UL, 540698101UL, 4082489821UL, 741976046UL, 267559495UL, 1591532642UL, 2500610323UL, 3203248679UL, 147312102UL, 2772368222UL, 1412987047UL, 2295185573UL, 1932341300UL, 898396308UL, 1837129999UL, 3113914292UL, 2613354524UL, 3141601915UL, 276087167UL, 1887389351UL, 757801450UL, 3752353732UL, 2745818074UL, 1442953464UL, 3802648347UL, 223728071UL, 2169947402UL, 1338125300UL, 3642174036UL, 2794462634UL,
2326349851UL, 862746036UL, 3577092599UL, 627103363UL, 552173564UL, 4142604459UL, 2310329406UL, 583522272UL, 189323282UL, 1217612313UL, 73550248UL, 2434692829UL, 2757269706UL, 2392210091UL, 3032922600UL, 3573904125UL, 2897178037UL, 2632631469UL, 3085332665UL, 3775619904UL, 2563291734UL, 1351375865UL, 4043427793UL, 1803743084UL, 3112116579UL, 522940594UL, 2690374983UL, 2613871529UL, 3810037031UL, 1765642390UL, 534554747UL, 1930852049UL,
2264349344UL, 1680024716UL, 2112340059UL, 3387475367UL, 2080916186UL, 75966494UL, 3907378472UL, 2636491350UL, 2176128529UL, 2236616671UL, 2372987046UL, 2604001339UL, 3893075234UL, 3495918635UL, 4116370522UL, 534929913UL, 3660102574UL, 2030233939UL, 2759207091UL, 49347923UL, 987575186UL, 2566932710UL, 1566181275UL, 3127827248UL, 578401670UL, 3731513754UL, 2581732444UL, 279715551UL, 809690877UL, 1438444015UL, 2185866850UL, 1495277039UL,
3417305339UL, 2858903785UL, 3074075088UL, 4198538376UL, 2370669734UL, 391683868UL, 3933465331UL, 2884128106UL, 1400216510UL, 1864988335UL, 2925823809UL, 4133578805UL, 218104493UL, 2798390374UL, 1998600344UL, 1109346044UL, 1716435313UL, 415435111UL, 1892535124UL, 2536620737UL, 1440068573UL, 481874870UL, 142128108UL, 329082740UL, 2077118779UL, 2858045339UL, 4068162251UL, 115593872UL, 2644000449UL, 3550167006UL, 3728768059UL, 1772423685UL,
2504624145UL, 2140118619UL, 1412607307UL, 4081166331UL, 154438218UL, 1652901877UL, 3804911318UL, 3142799969UL, 3154073676UL, 3112018078UL, 2757873595UL, 50297646UL, 2855791484UL, 793851407UL, 507785167UL, 263713916UL, 3324588195UL, 3291978358UL, 1584226715UL, 2546417990UL, 450747961UL, 3455625012UL, 2706009093UL, 1788578194UL, 4030171132UL, 2610979903UL, 3835380965UL, 4269115622UL, 2180305819UL, 2646894726UL, 716649335UL, 2607142354UL,
853428184UL, 2436760738UL, 4190071217UL, 2754423535UL, 456808691UL, 4082489821UL, 741976046UL, 267559495UL, 1591532642UL, 2722205042UL, 3203248679UL, 147312102UL, 2772368222UL, 1412987047UL, 1950543946UL, 1932341300UL, 898396308UL, 1837129999UL, 3113914292UL, 428616392UL, 3141601915UL, 276087167UL, 1887389351UL, 757801450UL, 963534966UL, 2745818074UL, 1442953464UL, 3802648347UL, 223728071UL, 229039300UL, 1338125300UL, 3642174036UL,
2794462634UL, 2326349851UL, 206115203UL, 3577092599UL, 627103363UL, 552173564UL, 4142604459UL, 1492461846UL, 583522272UL, 189323282UL, 1217612313UL, 73550248UL, 3552211807UL, 2757269706UL, 2392210091UL, 3032922600UL, 3573904125UL, 810640644UL, 2632631469UL, 3085332665UL, 3775619904UL, 2563291734UL, 922608790UL, 4043427793UL, 1803743084UL, 3112116579UL, 522940594UL, 1785093944UL, 2613871529UL, 3810037031UL, 1765642390UL, 534554747UL,
3528050076UL, 2264349344UL, 1680024716UL, 2112340059UL, 3387475367UL, 3295682653UL, 75966494UL, 3907378472UL, 2636491350UL, 2176128529UL, 3574915532UL, 2372987046UL, 2604001339UL, 3893075234UL, 3495918635UL, 1280296085UL, 534929913UL, 3660102574UL, 2030233939UL, 2759207091UL, 299776535UL, 987575186UL, 2566932710UL, 1566181275UL, 3127827248UL, 3874691533UL, 3731513754UL, 2581732444UL, 279715551UL, 809690877UL, 3100791084UL, 2185866850UL,
1495277039UL, 3417305339UL, 2858903785UL, 1310351481UL, 4198538376UL, 2370669734UL, 391683868UL, 3933465331UL, 2749085130UL, 1400216510UL, 1864988335UL, 2925823809UL, 4133578805UL, 3352814594UL, 2798390374UL, 1998600344UL, 1109346044UL, 1716435313UL, 1571752941UL, 1892535124UL, 2536620737UL, 1440068573UL, 481874870UL, 2485033697UL, 329082740UL, 2077118779UL, 2858045339UL, 4068162251UL, 3837440666UL, 2644000449UL, 3550167006UL, 3728768059UL,
1772423685UL, 1176559812UL, 2140118619UL, 1412607307UL, 4081166331UL, 154438218UL, 2902622972UL, 3804911318UL, 3142799969UL, 3154073676UL, 3112018078UL, 2403391233UL, 50297646UL, 2855791484UL, 793851407UL, 507785167UL, 2351826747UL, 3324588195UL, 3291978358UL, 1584226715UL, 2546417990UL, 746876926UL, 3455625012UL, 2706009093UL, 1788578194UL, 4030171132UL, 3779307353UL, 3835380965UL, 4269115622UL, 2180305819UL, 2646894726UL, 2602235234UL,
2607142354UL, 853428184UL, 2436760738UL, 4190071217UL, 2066757692UL, 456808691UL, 4082489821UL, 741976046UL, 267559495UL, 3001080633UL, 2722205042UL, 3203248679UL, 147312102UL, 2772368222UL, 89950260UL, 1950543946UL, 1932341300UL, 898396308UL, 1837129999UL, 947911286UL, 428616392UL, 3141601915UL, 276087167UL, 1887389351UL, 2583987247UL, 963534966UL, 2745818074UL, 1442953464UL, 3802648347UL, 4229124441UL, 229039300UL, 1338125300UL,
3642174036UL, 2794462634UL, 2472155633UL, 206115203UL, 3577092599UL, 627103363UL, 552173564UL, 2586882739UL, 1492461846UL, 583522272UL, 189323282UL, 1217612313UL, 3501549884UL, 3552211807UL, 2757269706UL, 2392210091UL, 3032922600UL, 740675778UL, 810640644UL, 2632631469UL, 3085332665UL, 3775619904UL, 3643289881UL, 922608790UL, 4043427793UL, 1803743084UL, 3112116579UL, 2213337398UL, 1785093944UL, 2613871529UL, 3810037031UL, 1765642390UL,
762472016UL, 3528050076UL, 2264349344UL, 1680024716UL, 2112340059UL, 1372272974UL, 3295682653UL, 75966494UL, 3907378472UL, 2636491350UL, 3117471955UL, 3574915532UL, 2372987046UL, 2604001339UL, 3893075234UL, 915576383UL, 1280296085UL, 534929913UL, 3660102574UL, 2030233939UL, 346368350UL, 299776535UL, 987575186UL, 2566932710UL, 1566181275UL, 3535223896UL, 3874691533UL, 3731513754UL, 2581732444UL, 279715551UL, 2456894951UL, 3100791084UL,
2185866850UL, 1495277039UL, 3417305339UL, 1618871086UL, 1310351481UL, 4198538376UL, 2370669734UL, 391683868UL, 2009676005UL, 2749085130UL, 1400216510UL, 1864988335UL, 2925823809UL, 58955107UL, 3352814594UL, 2798390374UL, 1998600344UL, 1109346044UL, 3273979614UL, 1571752941UL, 1892535124UL, 2536620737UL, 1440068573UL, 1174168447UL, 2485033697UL, 329082740UL, 2077118779UL, 2858045339UL, 4062921629UL, 3837440666UL, 2644000449UL, 3550167006UL,
3728768059UL, 2642133401UL, 1176559812UL, 2140118619UL, 1412607307UL, 4081166331UL, 3124905304UL, 2902622972UL, 3804911318UL, 3142799969UL, 3154073676UL, 1449454613UL, 2403391233UL, 50297646UL, 2855791484UL, 793851407UL, 3514201526UL, 2351826747UL, 3324588195UL, 3291978358UL, 1584226715UL, 3636681672UL, 746876926UL, 3455625012UL, 2706009093UL, 1788578194UL, 3451519459UL, 3779307353UL, 3835380965UL, 4269115622UL, 2180305819UL, 3987989524UL,
2602235234UL, 2607142354UL, 853428184UL, 2436760738UL, 2151617107UL, 2066757692UL, 456808691UL, 4082489821UL, 741976046UL, 3590081269UL, 3001080633UL, 2722205042UL, 3203248679UL, 147312102UL, 3432947806UL, 89950260UL, 1950543946UL, 1932341300UL, 898396308UL, 3828432864UL, 947911286UL, 428616392UL, 3141601915UL, 276087167UL, 2517666433UL, 2583987247UL, 963534966UL, 2745818074UL, 1442953464UL, 2223986807UL, 4229124441UL, 229039300UL,
1338125300UL, 3642174036UL, 1053796945UL, 2472155633UL, 206115203UL, 3577092599UL, 627103363UL, 1113276084UL, 2586882739UL, 1492461846UL, 583522272UL, 189323282UL, 1490604990UL, 3501549884UL, 3552211807UL, 2757269706UL, 2392210091UL, 3545407532UL, 740675778UL, 810640644UL, 2632631469UL, 3085332665UL, 755862267UL, 3643289881UL, 922608790UL, 4043427793UL, 1803743084UL, 1954166630UL, 2213337398UL, 1785093944UL, 2613871529UL, 3810037031UL,
3042935707UL, 3162182177UL, 2791346436UL, 1901925289UL, 863100941UL, 3367519168UL, 1972623238UL, 3664303070UL, 604922059UL, 3026817982UL, 1436412310UL, 4096180631UL, 1597561857UL, 4206212303UL, 4127914332UL, 3228677359UL, 3985733659UL, 3597290113UL, 4251197894UL, 3451370603UL, 609679338UL, 3360835257UL, 1372239885UL, 638572328UL, 3806422284UL, 3974147336UL, 1804280837UL, 4209089291UL, 2021797469UL, 3557188838UL, 409727186UL, 2114649178UL,
687702120UL, 2542445992UL, 1235991799UL, 460479179UL, 2008348175UL, 887884478UL, 3942327811UL, 2999928223UL, 4171339789UL, 2286339235UL, 1293442231UL, 1575942850UL, 76122475UL, 1440527701UL, 2006558403UL, 1544148172UL, 895899367UL, 681826913UL, 4094701935UL, 3995413790UL, 1027509154UL, 2264990896UL, 1938238113UL, 213430250UL, 222469320UL, 609726517UL, 3581538106UL, 492802663UL, 120480843UL, 1720004062UL, 1132674507UL, 911082758UL,
2909148131UL, 566658805UL, 3964114445UL, 3483602509UL, 1793438750UL, 165562604UL, 3641830063UL, 2394205521UL, 3404874822UL, 1672998096UL, 916151953UL, 1141264477UL, 3171661340UL, 3803396219UL, 3018337382UL, 1863902683UL, 2474641928UL, 3250365071UL, 3897886220UL, 1219701051UL, 51332576UL, 1358614881UL, 1707407492UL, 3670647816UL, 923357625UL, 343687395UL, 3991339686UL, 3913575403UL, 1267727936UL, 4001357856UL, 3820224848UL, 2942896724UL,
3505936742UL, 1403285299UL, 1992762049UL, 567748449UL, 2202721585UL, 2781324216UL, 1724850068UL, 2408314541UL, 3073975813UL, 3992810029UL, 2475242354UL, 540562053UL, 2185198943UL, 3759352041UL, 3373885614UL, 1132999410UL, 1097554565UL, 4089342358UL, 3239542922UL, 2451748646UL, 407290679UL, 3188103200UL, 1708016248UL, 26848241UL, 2796711130UL, 3090711568UL, 4068389322UL, 3420916085UL, 3137567033UL, 2877819818UL, 22133454UL, 4629160UL,
3703695249UL, 1920151708UL, 1175452162UL, 130015299UL, 3331834713UL, 1099225384UL, 689254331UL, 1851083761UL, 2654970209UL, 3259297936UL, 3742819314UL, 3524284766UL, 2291819083UL, 3494031861UL, 16242889UL, 3545082774UL, 1997878108UL, 777447699UL, 4244916543UL, 3508640253UL, 3782278393UL, 2107258964UL, 2139074576UL, 1383217899UL, 2337934322UL, 3181899620UL, 1285955765UL, 2989610020UL, 3326862146UL, 1168587380UL, 801203532UL, 3020809957UL,
},
{
3810471203UL, 1017064446UL, 1595207573UL, 441087832UL, 3326746890UL, 3294064431UL, 167972517UL, 3625210015UL, 1011845006UL, 2980240819UL, 1778354660UL, 3041730987UL, 1598611350UL, 2015169745UL, 2321724978UL, 3390812967UL, 2432904511UL, 113261909UL, 3957193232UL, 3806115908UL, 2965828929UL, 2035392295UL, 3500116619UL, 2881232416UL, 1672212265UL, 1607201428UL, 425148945UL, 1262591961UL, 2221781268UL, 4215047456UL, 2148245850UL, 2787488981UL,
1077262192UL, 2085467561UL, 3053954888UL, 3584435116UL, 3013084787UL, 287099941UL, 1290407232UL, 4078552287UL, 2658945475UL, 4251530898UL, 2403086478UL, 2884923598UL, 3545110453UL, 4105390090UL, 343200643UL, 3189888821UL, 4086304363UL, 3466483195UL, 259435633UL, 2846377387UL, 497258846UL, 272775541UL, 985737911UL, 2957688879UL, 2180784344UL, 3434619542UL, 3643384838UL, 2228652440UL, 3107480718UL, 2208729807UL, 596436263UL, 3255120711UL,
3248886970UL, 519242965UL, 602979109UL, 1619614UL, 1391563565UL, 56262588UL, 1584463910UL, 1849038201UL, 728022295UL, 848624947UL, 1813827408UL, 428214945UL, 1246345586UL, 4213351865UL, 168985863UL, 456608054UL, 4277869380UL, 3886828599UL, 2264054549UL, 3110967170UL, 3138175314UL, 2649164828UL, 3369378320UL, 3648350039UL, 3524848759UL, 1468470706UL, 3558859222UL, 2669673235UL, 831851874UL, 4285651092UL, 4224147373UL, 1088456706UL,
231954609UL, 3118005852UL, 225508069UL, 883105389UL, 856371341UL, 2001356578UL, 639336670UL, 2363501707UL, 3622399552UL, 4024065226UL, 1093546838UL, 4263608561UL, 1852072422UL, 425195042UL, 2441102396UL, 296426333UL, 384641750UL, 3559334435UL, 1757327033UL, 1016016207UL, 3595686646UL, 24777793UL, 623926105UL, 2169195923UL, 1779396793UL, 646997837UL, 1459728476UL, 2644865980UL, 1994581089UL, 3956278544UL, 919592580UL, 2153558858UL,
2029633394UL, 3837501009UL, 4016560170UL, 484838096UL, 3652199054UL, 1971790561UL, 605295089UL, 637470291UL, 278970544UL, 3574824693UL, 295866521UL, 1755035156UL, 2542341803UL, 1588716357UL, 1502596918UL, 4124554133UL, 3547049843UL, 1768033045UL, 1531734630UL, 101448323UL, 3233017580UL, 1793222944UL, 3187853500UL, 186000900UL, 803444571UL, 2820254958UL, 2009384608UL, 2384668855UL, 2222812920UL, 633608665UL, 2028480056UL, 1258028235UL,
545095949UL, 3810471203UL, 1017064446UL, 1595207573UL, 441087832UL, 899068662UL, 3294064431UL, 167972517UL, 3625210015UL, 1011845006UL, 3951305793UL, 1778354660UL, 3041730987UL, 1598611350UL, 2015169745UL, 1885149424UL, 3390812967UL, 2432904511UL, 113261909UL, 3957193232UL, 3953443155UL, 2965828929UL, 2035392295UL, 3500116619UL, 2881232416UL, 329153573UL, 1607201428UL, 425148945UL, 1262591961UL, 2221781268UL, 78028761UL, 2148245850UL,
2787488981UL, 1077262192UL, 2085467561UL, 647235899UL, 3584435116UL, 3013084787UL, 287099941UL, 1290407232UL, 1467385694UL, 2658945475UL, 4251530898UL, 2403086478UL, 2884923598UL, 3489351040UL, 4105390090UL, 343200643UL, 3189888821UL, 4086304363UL, 3521512280UL, 259435633UL, 2846377387UL, 497258846UL, 272775541UL, 1367093111UL, 2957688879UL, 2180784344UL, 3434619542UL, 3643384838UL, 411877686UL, 3107480718UL, 2208729807UL, 596436263UL,
3255120711UL, 584605030UL, 519242965UL, 602979109UL, 1619614UL, 1391563565UL, 3902518209UL, 1584463910UL, 1849038201UL, 728022295UL, 848624947UL, 1932969318UL, 428214945UL, 1246345586UL, 4213351865UL, 168985863UL, 2770345237UL, 4277869380UL, 3886828599UL, 2264054549UL, 3110967170UL, 2953581033UL, 2649164828UL, 3369378320UL, 3648350039UL, 3524848759UL, 2380353977UL, 3558859222UL, 2669673235UL, 831851874UL, 4285651092UL, 1214052447UL,
1088456706UL, 231954609UL, 3118005852UL, 225508069UL, 1766983646UL, 856371341UL, 2001356578UL, 639336670UL, 2363501707UL, 1782816591UL, 4024065226UL, 1093546838UL, 4263608561UL, 1852072422UL, 1149716600UL, 2441102396UL, 296426333UL, 384641750UL, 3559334435UL, 2391309970UL, 1016016207UL, 3595686646UL, 24777793UL, 623926105UL, 362098678UL, 1779396793UL, 646997837UL, 1459728476UL, 2644865980UL, 3238673748UL, 3956278544UL, 919592580UL,
2153558858UL, 2029633394UL, 115778559UL, 4016560170UL, 484838096UL, 3652199054UL, 1971790561UL, 737357475UL, 637470291UL, 278970544UL, 3574824693UL, 295866521UL, 3989745853UL, 2542341803UL, 1588716357UL, 1502596918UL, 4124554133UL, 3016849744UL, 1768033045UL, 1531734630UL, 101448323UL, 3233017580UL, 4157527581UL, 3187853500UL, 186000900UL, 803444571UL, 2820254958UL, 1980528062UL, 2384668855UL, 2222812920UL, 633608665UL, 2028480056UL,
3166710281UL, 545095949UL, 3810471203UL, 1017064446UL, 1595207573UL, 693962828UL, 899068662UL, 3294064431UL, 167972517UL, 3625210015UL, 1486040398UL, 3951305793UL, 1778354660UL, 3041730987UL, 1598611350UL, 2859363132UL, 1885149424UL, 3390812967UL, 2432904511UL, 113261909UL, 664880478UL, 3953443155UL, 2965828929UL, 2035392295UL, 3500116619UL, 558081801UL, 329153573UL, 1607201428UL, 425148945UL, 1262591961UL, 3716247699UL, 78028761UL,
2148245850UL, 2787488981UL, 1077262192UL, 4206362947UL, 647235899UL, 3584435116UL, 3013084787UL, 287099941UL, 2536781098UL, 1467385694UL, 2658945475UL, 4251530898UL, 2403086478UL, 3075072413UL, 3489351040UL, 4105390090UL, 343200643UL, 3189888821UL, 2540485172UL, 3521512280UL, 259435633UL, 2846377387UL, 497258846UL, 2442427327UL, 1367093111UL, 2957688879UL, 2180784344UL, 3434619542UL, 1593967423UL, 411877686UL, 3107480718UL, 2208729807UL,
596436263UL, 1048686529UL, 584605030UL, 519242965UL, 602979109UL, 1619614UL, 2072745381UL, 3902518209UL, 1584463910UL, 1849038201UL, 728022295UL, 846033949UL, 1932969318UL, 428214945UL, 1246345586UL, 4213351865UL, 1066373275UL, 2770345237UL, 4277869380UL, 3886828599UL, 2264054549UL, 1877859690UL, 2953581033UL, 2649164828UL, 3369378320UL, 3648350039UL, 2537763389UL, 2380353977UL, 3558859222UL, 2669673235UL, 831851874UL, 522748140UL,
1214052447UL, 1088456706UL, 231954609UL, 3118005852UL, 1381269315UL, 1766983646UL, 856371341UL, 2001356578UL, 639336670UL, 667275675UL, 1782816591UL, 4024065226UL, 1093546838UL, 4263608561UL, 2057337961UL, 1149716600UL, 2441102396UL, 296426333UL, 384641750UL, 340523210UL, 2391309970UL, 1016016207UL, 3595686646UL, 24777793UL, 3094832341UL, 362098678UL, 1779396793UL, 646997837UL, 1459728476UL, 1169681568UL, 3238673748UL, 3956278544UL,
919592580UL, 2153558858UL, 388335108UL, 115778559UL, 4016560170UL, 484838096UL, 3652199054UL, 1764858181UL, 737357475UL, 637470291UL, 278970544UL, 3574824693UL, 3671458900UL, 3989745853UL, 2542341803UL, 1588716357UL, 1502596918UL, 2102871406UL, 3016849744UL, 1768033045UL, 1531734630UL, 101448323UL, 3964942332UL, 4157527581UL, 3187853500UL, 186000900UL, 803444571UL, 3425652083UL, 1980528062UL, 2384668855UL, 2222812920UL, 633608665UL,
3035373876UL, 3166710281UL, 545095949UL, 3810471203UL, 1017064446UL, 669282349UL, 693962828UL, 899068662UL, 3294064431UL, 167972517UL, 2007256988UL, 1486040398UL, 3951305793UL, 1778354660UL, 3041730987UL, 2827768941UL, 2859363132UL, 1885149424UL, 3390812967UL, 2432904511UL, 3700915653UL, 664880478UL, 3953443155UL, 2965828929UL, 2035392295UL, 1461208330UL, 558081801UL, 329153573UL, 1607201428UL, 425148945UL, 1700881129UL, 3716247699UL,
78028761UL, 2148245850UL, 2787488981UL, 2706775080UL, 4206362947UL, 647235899UL, 3584435116UL, 3013084787UL, 2958545221UL, 2536781098UL, 1467385694UL, 2658945475UL, 4251530898UL, 2241012567UL, 3075072413UL, 3489351040UL, 4105390090UL, 343200643UL, 490164649UL, 2540485172UL, 3521512280UL, 259435633UL, 2846377387UL, 4073611831UL, 2442427327UL, 1367093111UL, 2957688879UL, 2180784344UL, 1835510773UL, 1593967423UL, 411877686UL, 3107480718UL,
2208729807UL, 3306732468UL, 1048686529UL, 584605030UL, 519242965UL, 602979109UL, 2978864605UL, 2072745381UL, 3902518209UL, 1584463910UL, 1849038201UL, 3284115169UL, 846033949UL, 1932969318UL, 428214945UL, 1246345586UL, 194166002UL, 1066373275UL, 2770345237UL, 4277869380UL, 3886828599UL, 1874087886UL, 1877859690UL, 2953581033UL, 2649164828UL, 3369378320UL, 4145454028UL, 2537763389UL, 2380353977UL, 3558859222UL, 2669673235UL, 739345884UL,
522748140UL, 1214052447UL, 1088456706UL, 231954609UL, 3605603781UL, 1381269315UL, 1766983646UL, 856371341UL, 2001356578UL, 2049940324UL, 667275675UL, 1782816591UL, 4024065226UL, 1093546838UL, 152524382UL, 2057337961UL, 1149716600UL, 2441102396UL, 296426333UL, 3195130788UL, 340523210UL, 2391309970UL, 1016016207UL, 3595686646UL, 180492441UL, 3094832341UL, 362098678UL, 1779396793UL, 646997837UL, 2458167607UL, 1169681568UL, 3238673748UL,
3956278544UL, 919592580UL, 3421005218UL, 388335108UL, 115778559UL, 4016560170UL, 484838096UL, 2649676374UL, 1764858181UL, 737357475UL, 637470291UL, 278970544UL, 2236401278UL, 3671458900UL, 3989745853UL, 2542341803UL, 1588716357UL, 1241570134UL, 2102871406UL, 3016849744UL, 1768033045UL, 1531734630UL, 1765654724UL, 3964942332UL, 4157527581UL, 3187853500UL, 186000900UL, 2189716659UL, 3425652083UL, 1980528062UL, 2384668855UL, 2222812920UL,
3955466207UL, 2426547616UL, 3846752458UL, 3015538636UL, 2342593365UL, 3613176865UL, 3484860981UL, 4278370194UL, 1979143878UL, 1159739458UL, 3714038404UL, 396530346UL, 3276617756UL, 3293940597UL, 4050183149UL, 1418571985UL, 402563753UL, 2702853013UL, 2289900621UL, 2267058511UL, 3482161995UL, 3375026019UL, 1988640267UL, 3674438074UL, 4124612310UL, 1057883705UL, 434730475UL, 3210959778UL, 4102029739UL, 2140938750UL, 3176753074UL, 2356971512UL,
3969685288UL, 1556275580UL, 2648433428UL, 3959375381UL, 478841344UL, 1496991528UL, 3309714981UL, 569990368UL, 3660587501UL, 2550379574UL, 1177519842UL, 2652707373UL, 543943404UL, 1912551128UL, 2278132032UL, 1484596780UL, 3570913985UL, 2982401320UL, 1413776035UL, 3177275459UL, 3036211597UL, 1091740466UL, 3448424311UL, 1445187645UL, 3205024875UL, 3135795254UL, 823738729UL, 3742134467UL, 4066657438UL, 1226311678UL, 2403605393UL, 537573634UL,
3457409768UL, 1940233423UL, 1761431281UL, 1129427309UL, 2443661283UL, 3200814257UL, 4094866249UL, 2666869754UL, 604785127UL, 2213464116UL, 3002782918UL, 468024929UL, 2490681314UL, 3666681384UL, 1583346053UL, 3049668798UL, 3592153237UL, 2573082448UL, 3082970021UL, 1461796708UL, 832526980UL, 3728763274UL, 355291229UL, 4029588456UL, 832358279UL, 2125298737UL, 3681181038UL, 3245535160UL, 1333342738UL, 1868897492UL, 446790068UL, 1278093154UL,
2090118615UL, 4158925515UL, 4062165914UL, 822726809UL, 1154960183UL, 286518382UL, 1170424276UL, 2554691236UL, 3674133415UL, 2765714969UL, 2330865375UL, 1908307334UL, 3537287082UL, 410252600UL, 3977128218UL, 424210327UL, 2919071615UL, 2715518134UL, 64568844UL, 480972649UL, 2488797168UL, 1302817038UL, 2213995265UL, 4229997295UL, 2200797852UL, 109368057UL, 3033807022UL, 1907400078UL, 645977948UL, 1410909090UL, 3700787906UL, 3375062371UL,
629087832UL, 1344281719UL, 4249981139UL, 3457543297UL, 1218556849UL, 864222854UL, 1458445945UL, 914545469UL, 3451164212UL, 1088025757UL, 1129933985UL, 953788883UL, 2406172924UL, 170364546UL, 3505490646UL, 1027553899UL, 2864067776UL, 436854871UL, 1342782209UL, 761167471UL, 2660173631UL, 4159507498UL, 4172028400UL, 2442254644UL, 2110123720UL, 2315991253UL, 873066601UL, 1725470559UL, 3831299052UL, 678672031UL, 1585431329UL, 3495750550UL,
},
{
1998393432UL, 2665389278UL, 3989307699UL, 3267631636UL, 3861682977UL, 3243522970UL, 1243992413UL, 2200497260UL, 3821883021UL, 4187123083UL, 3451270040UL, 3044132745UL, 2101287249UL, 2340839784UL, 227040990UL, 1724350416UL, 3228881240UL, 3123386528UL, 4279362126UL, 3098224464UL, 2635534069UL, 3622906431UL, 206207480UL, 1894245533UL, 2152374527UL, 1011223653UL, 7271757UL, 2972858087UL, 207942127UL, 3355362797UL, 2593296740UL, 174093751UL,
3713822176UL, 4212355586UL, 3335605224UL, 1171716408UL, 2867257989UL, 1522213957UL, 2016192462UL, 4229688395UL, 2174928148UL, 1468226225UL, 3938290338UL, 493240317UL, 3229423344UL, 2585475729UL, 3112454413UL, 1881171707UL, 2555908056UL, 1997546352UL, 380428329UL, 3341885423UL, 3307510279UL, 3519476676UL, 3613100811UL, 2555826262UL, 109341943UL, 2382715395UL, 3883409616UL, 1593551879UL, 2163678014UL, 3379783137UL, 2810374300UL, 1516064864UL,
561144874UL, 316017838UL, 1899237567UL, 70857401UL, 3435185465UL, 4234661323UL, 2580352177UL, 32879620UL, 4171670150UL, 1986234067UL, 3589478191UL, 2073132526UL, 2603712175UL, 377997975UL, 2474419397UL, 3110698341UL, 812664089UL, 1778922726UL, 1686111212UL, 972784138UL, 3936486236UL, 2711468739UL, 423435866UL, 1661961159UL, 802312780UL, 1868728136UL, 1760295704UL, 3357409828UL, 215039860UL, 683184627UL, 4019111064UL, 3609261689UL,
2167554309UL, 1831085281UL, 3389357802UL, 4193421575UL, 628277197UL, 2900207619UL, 993609502UL, 3429627083UL, 2636466084UL, 3652352199UL, 1780133580UL, 1670387713UL, 4086070210UL, 4004540729UL, 783029246UL, 2165667566UL, 1739001057UL, 377639972UL, 1102689625UL, 1945278055UL, 3941185940UL, 3685368326UL, 1881761572UL, 2201338934UL, 801752UL, 2729497735UL, 492844690UL, 2998826141UL, 3844964457UL, 3679088359UL, 2196391660UL, 4222269404UL,
357321611UL, 3727170055UL, 1819614072UL, 2348798457UL, 4294366646UL, 1952884323UL, 3574345216UL, 2040734807UL, 232392443UL, 4183498179UL, 2614866055UL, 112120292UL, 3624018350UL, 3340709877UL, 3097507723UL, 1268833488UL, 3570501956UL, 3338260086UL, 293812421UL, 3683058169UL, 1147960351UL, 283731890UL, 2171233479UL, 1830154455UL, 4036602681UL, 1996981699UL, 132803834UL, 40256165UL, 2158110401UL, 3575159090UL, 3196553513UL, 3559872992UL,
3402884675UL, 1998393432UL, 2665389278UL, 3989307699UL, 3267631636UL, 3617519767UL, 3243522970UL, 1243992413UL, 2200497260UL, 3821883021UL, 3715729085UL, 3451270040UL, 3044132745UL, 2101287249UL, 2340839784UL, 3173635549UL, 1724350416UL, 3228881240UL, 3123386528UL, 4279362126UL, 2287520039UL, 2635534069UL, 3622906431UL, 206207480UL, 1894245533UL, 96723416UL, 1011223653UL, 7271757UL, 2972858087UL, 207942127UL, 1668335352UL, 2593296740UL,
174093751UL, 3713822176UL, 4212355586UL, 49226793UL, 1171716408UL, 2867257989UL, 1522213957UL, 2016192462UL, 118712412UL, 2174928148UL, 1468226225UL, 3938290338UL, 493240317UL, 3788174304UL, 2585475729UL, 3112454413UL, 1881171707UL, 2555908056UL, 3351139844UL, 380428329UL, 3341885423UL, 3307510279UL, 3519476676UL, 1368994724UL, 2555826262UL, 109341943UL, 2382715395UL, 3883409616UL, 1561509458UL, 2163678014UL, 3379783137UL, 2810374300UL,
1516064864UL, 2313252274UL, 316017838UL, 1899237567UL, 70857401UL, 3435185465UL, 2585770746UL, 2580352177UL, 32879620UL, 4171670150UL, 1986234067UL, 3317983509UL, 2073132526UL, 2603712175UL, 377997975UL, 2474419397UL, 908728599UL, 812664089UL, 1778922726UL, 1686111212UL, 972784138UL, 1992540005UL, 2711468739UL, 423435866UL, 1661961159UL, 802312780UL, 907108769UL, 1760295704UL, 3357409828UL, 215039860UL, 683184627UL, 2806826652UL,
3609261689UL, 2167554309UL, 1831085281UL, 3389357802UL, 2755692689UL, 628277197UL, 2900207619UL, 993609502UL, 3429627083UL, 3605915742UL, 3652352199UL, 1780133580UL, 1670387713UL, 4086070210UL, 3717326627UL, 783029246UL, 2165667566UL, 1739001057UL, 377639972UL, 2355216626UL, 1945278055UL, 3941185940UL, 3685368326UL, 1881761572UL, 4024097818UL, 801752UL, 2729497735UL, 492844690UL, 2998826141UL, 2719601647UL, 3679088359UL, 2196391660UL,
4222269404UL, 357321611UL, 1319821972UL, 1819614072UL, 2348798457UL, 4294366646UL, 1952884323UL, 3573866689UL, 2040734807UL, 232392443UL, 4183498179UL, 2614866055UL, 440744432UL, 3624018350UL, 3340709877UL, 3097507723UL, 1268833488UL, 224895395UL, 3338260086UL, 293812421UL, 3683058169UL, 1147960351UL, 3433425235UL, 2171233479UL, 1830154455UL, 4036602681UL, 1996981699UL, 2875889721UL, 40256165UL, 2158110401UL, 3575159090UL, 3196553513UL,
1094082574UL, 3402884675UL, 1998393432UL, 2665389278UL, 3989307699UL, 4068940467UL, 3617519767UL, 3243522970UL, 1243992413UL, 2200497260UL, 441678457UL, 3715729085UL, 3451270040UL, 3044132745UL, 2101287249UL, 2181502237UL, 3173635549UL, 1724350416UL, 3228881240UL, 3123386528UL, 1968352124UL, 2287520039UL, 2635534069UL, 3622906431UL, 206207480UL, 2065093599UL, 96723416UL, 1011223653UL, 7271757UL, 2972858087UL, 1094044749UL, 1668335352UL,
2593296740UL, 174093751UL, 3713822176UL, 2887397643UL, 49226793UL, 1171716408UL, 2867257989UL, 1522213957UL, 984348433UL, 118712412UL, 2174928148UL, 1468226225UL, 3938290338UL, 2279430036UL, 3788174304UL, 2585475729UL, 3112454413UL, 1881171707UL, 4247636500UL, 3351139844UL, 380428329UL, 3341885423UL, 3307510279UL, 2887754196UL, 1368994724UL, 2555826262UL, 109341943UL, 2382715395UL, 2836761616UL, 1561509458UL, 2163678014UL, 3379783137UL,
2810374300UL, 1635278016UL, 2313252274UL, 316017838UL, 1899237567UL, 70857401UL, 3481535811UL, 2585770746UL, 2580352177UL, 32879620UL, 4171670150UL, 2248003250UL, 3317983509UL, 2073132526UL, 2603712175UL, 377997975UL, 3286162818UL, 908728599UL, 812664089UL, 1778922726UL, 1686111212UL, 4024815755UL, 1992540005UL, 2711468739UL, 423435866UL, 1661961159UL, 2257259057UL, 907108769UL, 1760295704UL, 3357409828UL, 215039860UL, 3917391198UL,
2806826652UL, 3609261689UL, 2167554309UL, 1831085281UL, 4238043113UL, 2755692689UL, 628277197UL, 2900207619UL, 993609502UL, 2036092353UL, 3605915742UL, 3652352199UL, 1780133580UL, 1670387713UL, 118446953UL, 3717326627UL, 783029246UL, 2165667566UL, 1739001057UL, 203160626UL, 2355216626UL, 1945278055UL, 3941185940UL, 3685368326UL, 546361979UL, 4024097818UL, 801752UL, 2729497735UL, 492844690UL, 1023017124UL, 2719601647UL, 3679088359UL,
2196391660UL, 4222269404UL, 621859651UL, 1319821972UL, 1819614072UL, 2348798457UL, 4294366646UL, 1114888560UL, 3573866689UL, 2040734807UL, 232392443UL, 4183498179UL, 3959504609UL, 440744432UL, 3624018350UL, 3340709877UL, 3097507723UL, 3613295037UL, 224895395UL, 3338260086UL, 293812421UL, 3683058169UL, 1655305863UL, 3433425235UL, 2171233479UL, 1830154455UL, 4036602681UL, 3731384097UL, 2875889721UL, 40256165UL, 2158110401UL, 3575159090UL,
1847744924UL, 1094082574UL, 3402884675UL, 1998393432UL, 2665389278UL, 3781866777UL, 4068940467UL, 3617519767UL, 3243522970UL, 1243992413UL, 2723708256UL, 441678457UL, 3715729085UL, 3451270040UL, 3044132745UL, 4013832842UL, 2181502237UL, 3173635549UL, 1724350416UL, 3228881240UL, 2092292494UL, 1968352124UL, 2287520039UL, 2635534069UL, 3622906431UL, 3186333458UL, 2065093599UL, 96723416UL, 1011223653UL, 7271757UL, 649658033UL, 1094044749UL,
1668335352UL, 2593296740UL, 174093751UL, 4159420309UL, 2887397643UL, 49226793UL, 1171716408UL, 2867257989UL, 2590077953UL, 984348433UL, 118712412UL, 2174928148UL, 1468226225UL, 1065322711UL, 2279430036UL, 3788174304UL, 2585475729UL, 3112454413UL, 3932517386UL, 4247636500UL, 3351139844UL, 380428329UL, 3341885423UL, 1285273904UL, 2887754196UL, 1368994724UL, 2555826262UL, 109341943UL, 2318470582UL, 2836761616UL, 1561509458UL, 2163678014UL,
3379783137UL, 674658583UL, 1635278016UL, 2313252274UL, 316017838UL, 1899237567UL, 2192372173UL, 3481535811UL, 2585770746UL, 2580352177UL, 32879620UL, 300323274UL, 2248003250UL, 3317983509UL, 2073132526UL, 2603712175UL, 3086543917UL, 3286162818UL, 908728599UL, 812664089UL, 1778922726UL, 2263290659UL, 4024815755UL, 1992540005UL, 2711468739UL, 423435866UL, 819027349UL, 2257259057UL, 907108769UL, 1760295704UL, 3357409828UL, 1142221093UL,
3917391198UL, 2806826652UL, 3609261689UL, 2167554309UL, 4108155875UL, 4238043113UL, 2755692689UL, 628277197UL, 2900207619UL, 3041719497UL, 2036092353UL, 3605915742UL, 3652352199UL, 1780133580UL, 2397410862UL, 118446953UL, 3717326627UL, 783029246UL, 2165667566UL, 2721690354UL, 203160626UL, 2355216626UL, 1945278055UL, 3941185940UL, 2768842108UL, 546361979UL, 4024097818UL, 801752UL, 2729497735UL, 4045063232UL, 1023017124UL, 2719601647UL,
3679088359UL, 2196391660UL, 2666107451UL, 621859651UL, 1319821972UL, 1819614072UL, 2348798457UL, 3555102623UL, 1114888560UL, 3573866689UL, 2040734807UL, 232392443UL, 3359040541UL, 3959504609UL, 440744432UL, 3624018350UL, 3340709877UL, 1477919696UL, 3613295037UL, 224895395UL, 3338260086UL, 293812421UL, 4210187101UL, 1655305863UL, 3433425235UL, 2171233479UL, 1830154455UL, 4150241150UL, 3731384097UL, 2875889721UL, 40256165UL, 2158110401UL,
3350246687UL, 455561037UL, 2250400255UL, 3192153445UL, 3258870230UL, 1500391873UL, 4142878334UL, 1155955691UL, 1483275844UL, 4189436981UL, 323745948UL, 1976017426UL, 2804626790UL, 2717553615UL, 2315409034UL, 954508235UL, 3845175920UL, 3999878682UL, 1247696432UL, 1743319509UL, 2998248398UL, 3694350012UL, 4072006361UL, 191306987UL, 2816321878UL, 1324077734UL, 1083060006UL, 3406855480UL, 1619622379UL, 2160350UL, 3302238190UL, 3368021261UL,
3685228564UL, 3863934685UL, 771728612UL, 854205233UL, 2304696695UL, 421449207UL, 1265752117UL, 3852292419UL, 305345788UL, 1540622105UL, 1904883477UL, 833469256UL, 134406680UL, 3012455058UL, 4035477953UL, 2925192459UL, 1559200592UL, 3851612860UL, 718484562UL, 1377960276UL, 1586892849UL, 1361298269UL, 3417917896UL, 1281324499UL, 1012538763UL, 1350578667UL, 3946475598UL, 2982283954UL, 3548792804UL, 284542749UL, 1194648577UL, 3087899716UL,
3966595444UL, 2088330116UL, 3641652062UL, 327128507UL, 593906557UL, 1092448919UL, 2459189516UL, 4053392241UL, 3356198248UL, 2352376508UL, 470648997UL, 1017041256UL, 3234172340UL, 3928191489UL, 3266226858UL, 4219289150UL, 1229098319UL, 4275351308UL, 2720777751UL, 3566728718UL, 638322822UL, 2369792461UL, 2869492261UL, 3120083828UL, 1890399556UL, 3309991008UL, 3785452464UL, 4128660314UL, 3726791982UL, 167177896UL, 461294981UL, 3988638998UL,
2937794823UL, 3981029822UL, 1111681402UL, 2015965721UL, 7261806UL, 2669786265UL, 1083582734UL, 3270228881UL, 3892235938UL, 2695872715UL, 4246051290UL, 3214293333UL, 343604199UL, 3215604888UL, 661024127UL, 2931754053UL, 3787840039UL, 2053363765UL, 363432336UL, 112334132UL, 2871797223UL, 138911320UL, 3981126938UL, 2027332192UL, 1804730644UL, 590150270UL, 641538574UL, 6802174UL, 3551446076UL, 3908480472UL, 1004531022UL, 2097228524UL,
1919074232UL, 154482247UL, 121437972UL, 1215661323UL, 1178068273UL, 1097220699UL, 2823681422UL, 262636065UL, 2943371149UL, 1768780720UL, 3866040605UL, 1855991583UL, 3988248086UL, 629223947UL, 3380612330UL, 3552916762UL, 197596340UL, 573801686UL, 2049230598UL, 2910471867UL, 2686314264UL, 1726228846UL, 3516983332UL, 726840185UL, 1241204222UL, 2237574317UL, 70568042UL, 1932610099UL, 2221862221UL, 1510378092UL, 4050391637UL, 4077539568UL,
},
{
3872117793UL, 803220151UL, 70843412UL, 1661103032UL, 1976811457UL, 2186373604UL, 564259972UL, 1475436923UL, 2260980893UL, 4245534505UL, 1075107552UL, 3692990573UL, 370098873UL, 4045905424UL, 2420395420UL, 2332395402UL, 207483321UL, 622317750UL, 3004242500UL, 833623111UL, 3151161301UL, 1629139881UL, 352228793UL, 2439953368UL, 3183333619UL, 2703537080UL, 3218957129UL, 3164695888UL, 1741641842UL, 963394141UL, 4241612717UL, 1034476784UL,
2035880432UL, 3977821313UL, 1543311495UL, 3010014356UL, 1638490901UL, 2364265378UL, 3420329129UL, 333361555UL, 1133565821UL, 1450937015UL, 616059115UL, 3216393887UL, 3041978455UL, 3990855695UL, 1238628750UL, 512746184UL, 3256670217UL, 1616316512UL, 2791405051UL, 93474487UL, 2865892488UL, 1901471398UL, 2930857966UL, 2178431077UL, 2325598341UL, 3189256113UL, 1302432091UL, 808592927UL, 2945846737UL, 3487931071UL, 2018175258UL, 752981057UL,
1097082589UL, 1307115286UL, 175147508UL, 3611190164UL, 850238914UL, 3318706185UL, 199743319UL, 328621708UL, 3183670050UL, 3609998315UL, 4075306371UL, 3554549067UL, 2119566187UL, 1498503842UL, 1261870696UL, 2216745780UL, 950288337UL, 1117344941UL, 2150569143UL, 2899286760UL, 1594966374UL, 888858617UL, 35840654UL, 2829539211UL, 2511395669UL, 3607190544UL, 3278412778UL, 2249895907UL, 1320858068UL, 3576889788UL, 266766189UL, 1522426851UL,
1903494122UL, 1928370573UL, 2628132591UL, 3322025904UL, 220280169UL, 433606853UL, 1428961479UL, 986074592UL, 2128892987UL, 467697583UL, 1616913929UL, 325674890UL, 444442578UL, 649166208UL, 1689709565UL, 1493452467UL, 2222122038UL, 121114616UL, 2134348225UL, 3512035688UL, 1283058921UL, 4230441398UL, 3701238559UL, 337534132UL, 1418548715UL, 1190006478UL, 500654385UL, 1766924757UL, 1944680746UL, 940574010UL, 922744002UL, 186142284UL,
3131162902UL, 1693891092UL, 3031823448UL, 2143051534UL, 1429025284UL, 1487843160UL, 3606456133UL, 2079235652UL, 2447285474UL, 2669283767UL, 3232117829UL, 2490054343UL, 3225501736UL, 2911340385UL, 382319031UL, 1516937595UL, 622543191UL, 1388990570UL, 1749179860UL, 1924483707UL, 2593474505UL, 472539197UL, 122872799UL, 2586347240UL, 880588515UL, 4046335279UL, 1712182607UL, 4270737941UL, 1336703451UL, 3390078162UL, 382216945UL, 3733326081UL,
460422073UL, 3872117793UL, 803220151UL, 70843412UL, 1661103032UL, 250339760UL, 2186373604UL, 564259972UL, 1475436923UL, 2260980893UL, 657986735UL, 1075107552UL, 3692990573UL, 370098873UL, 4045905424UL, 3201950123UL, 2332395402UL, 207483321UL, 622317750UL, 3004242500UL, 3732213278UL, 3151161301UL, 1629139881UL, 352228793UL, 2439953368UL, 3572618926UL, 2703537080UL, 3218957129UL, 3164695888UL, 1741641842UL, 685933373UL, 4241612717UL,
1034476784UL, 2035880432UL, 3977821313UL, 3855995181UL, 3010014356UL, 1638490901UL, 2364265378UL, 3420329129UL, 2355603679UL, 1133565821UL, 1450937015UL, 616059115UL, 3216393887UL, 1733804102UL, 3990855695UL, 1238628750UL, 512746184UL, 3256670217UL, 2651059231UL, 2791405051UL, 93474487UL, 2865892488UL, 1901471398UL, 2113461797UL, 2178431077UL, 2325598341UL, 3189256113UL, 1302432091UL, 2986990416UL, 2945846737UL, 3487931071UL, 2018175258UL,
752981057UL, 2428033310UL, 1307115286UL, 175147508UL, 3611190164UL, 850238914UL, 1033628405UL, 199743319UL, 328621708UL, 3183670050UL, 3609998315UL, 4024297327UL, 3554549067UL, 2119566187UL, 1498503842UL, 1261870696UL, 290361143UL, 950288337UL, 1117344941UL, 2150569143UL, 2899286760UL, 168826051UL, 888858617UL, 35840654UL, 2829539211UL, 2511395669UL, 2890882060UL, 3278412778UL, 2249895907UL, 1320858068UL, 3576889788UL, 1794920145UL,
1522426851UL, 1903494122UL, 1928370573UL, 2628132591UL, 1251697758UL, 220280169UL, 433606853UL, 1428961479UL, 986074592UL, 2707115661UL, 467697583UL, 1616913929UL, 325674890UL, 444442578UL, 122781510UL, 1689709565UL, 1493452467UL, 2222122038UL, 121114616UL, 3425723636UL, 3512035688UL, 1283058921UL, 4230441398UL, 3701238559UL, 1646155473UL, 1418548715UL, 1190006478UL, 500654385UL, 1766924757UL, 3920475367UL, 940574010UL, 922744002UL,
186142284UL, 3131162902UL, 54639113UL, 3031823448UL, 2143051534UL, 1429025284UL, 1487843160UL, 4152687885UL, 2079235652UL, 2447285474UL, 2669283767UL, 3232117829UL, 1601035152UL, 3225501736UL, 2911340385UL, 382319031UL, 1516937595UL, 3508441679UL, 1388990570UL, 1749179860UL, 1924483707UL, 2593474505UL, 2835403456UL, 122872799UL, 2586347240UL, 880588515UL, 4046335279UL, 2958058367UL, 4270737941UL, 1336703451UL, 3390078162UL, 382216945UL,
450517882UL, 460422073UL, 3872117793UL, 803220151UL, 70843412UL, 2066343874UL, 250339760UL, 2186373604UL, 564259972UL, 1475436923UL, 1683787449UL, 657986735UL, 1075107552UL, 3692990573UL, 370098873UL, 2615082840UL, 3201950123UL, 2332395402UL, 207483321UL, 622317750UL, 2655424371UL, 3732213278UL, 3151161301UL, 1629139881UL, 352228793UL, 3236724760UL, 3572618926UL, 2703537080UL, 3218957129UL, 3164695888UL, 9775065UL, 685933373UL,
4241612717UL, 1034476784UL, 2035880432UL, 1621920075UL, 3855995181UL, 3010014356UL, 1638490901UL, 2364265378UL, 1509475888UL, 2355603679UL, 1133565821UL, 1450937015UL, 616059115UL, 3666188236UL, 1733804102UL, 3990855695UL, 1238628750UL, 512746184UL, 3900473826UL, 2651059231UL, 2791405051UL, 93474487UL, 2865892488UL, 222759186UL, 2113461797UL, 2178431077UL, 2325598341UL, 3189256113UL, 2505499508UL, 2986990416UL, 2945846737UL, 3487931071UL,
2018175258UL, 2766733928UL, 2428033310UL, 1307115286UL, 175147508UL, 3611190164UL, 1909211603UL, 1033628405UL, 199743319UL, 328621708UL, 3183670050UL, 1680331218UL, 4024297327UL, 3554549067UL, 2119566187UL, 1498503842UL, 3516256046UL, 290361143UL, 950288337UL, 1117344941UL, 2150569143UL, 3182619063UL, 168826051UL, 888858617UL, 35840654UL, 2829539211UL, 645798943UL, 2890882060UL, 3278412778UL, 2249895907UL, 1320858068UL, 1436708568UL,
1794920145UL, 1522426851UL, 1903494122UL, 1928370573UL, 3693049252UL, 1251697758UL, 220280169UL, 433606853UL, 1428961479UL, 3724415861UL, 2707115661UL, 467697583UL, 1616913929UL, 325674890UL, 1448052253UL, 122781510UL, 1689709565UL, 1493452467UL, 2222122038UL, 2177448198UL, 3425723636UL, 3512035688UL, 1283058921UL, 4230441398UL, 3050940272UL, 1646155473UL, 1418548715UL, 1190006478UL, 500654385UL, 1106232UL, 3920475367UL, 940574010UL,
922744002UL, 186142284UL, 4144806511UL, 54639113UL, 3031823448UL, 2143051534UL, 1429025284UL, 2067453848UL, 4152687885UL, 2079235652UL, 2447285474UL, 2669283767UL, 428527087UL, 1601035152UL, 3225501736UL, 2911340385UL, 382319031UL, 2565464472UL, 3508441679UL, 1388990570UL, 1749179860UL, 1924483707UL, 1737735237UL, 2835403456UL, 122872799UL, 2586347240UL, 880588515UL, 597822462UL, 2958058367UL, 4270737941UL, 1336703451UL, 3390078162UL,
2532634475UL, 450517882UL, 460422073UL, 3872117793UL, 803220151UL, 801648827UL, 2066343874UL, 250339760UL, 2186373604UL, 564259972UL, 3417948976UL, 1683787449UL, 657986735UL, 1075107552UL, 3692990573UL, 2235306692UL, 2615082840UL, 3201950123UL, 2332395402UL, 207483321UL, 699310933UL, 2655424371UL, 3732213278UL, 3151161301UL, 1629139881UL, 1152704006UL, 3236724760UL, 3572618926UL, 2703537080UL, 3218957129UL, 2726926336UL, 9775065UL,
685933373UL, 4241612717UL, 1034476784UL, 2398119652UL, 1621920075UL, 3855995181UL, 3010014356UL, 1638490901UL, 252854480UL, 1509475888UL, 2355603679UL, 1133565821UL, 1450937015UL, 2655911639UL, 3666188236UL, 1733804102UL, 3990855695UL, 1238628750UL, 1115900497UL, 3900473826UL, 2651059231UL, 2791405051UL, 93474487UL, 1862985957UL, 222759186UL, 2113461797UL, 2178431077UL, 2325598341UL, 4179075132UL, 2505499508UL, 2986990416UL, 2945846737UL,
3487931071UL, 564667776UL, 2766733928UL, 2428033310UL, 1307115286UL, 175147508UL, 1759077815UL, 1909211603UL, 1033628405UL, 199743319UL, 328621708UL, 2552816198UL, 1680331218UL, 4024297327UL, 3554549067UL, 2119566187UL, 2267805778UL, 3516256046UL, 290361143UL, 950288337UL, 1117344941UL, 2897506172UL, 3182619063UL, 168826051UL, 888858617UL, 35840654UL, 2035476068UL, 645798943UL, 2890882060UL, 3278412778UL, 2249895907UL, 3278449102UL,
1436708568UL, 1794920145UL, 1522426851UL, 1903494122UL, 1500763736UL, 3693049252UL, 1251697758UL, 220280169UL, 433606853UL, 3914497854UL, 3724415861UL, 2707115661UL, 467697583UL, 1616913929UL, 918435305UL, 1448052253UL, 122781510UL, 1689709565UL, 1493452467UL, 609575172UL, 2177448198UL, 3425723636UL, 3512035688UL, 1283058921UL, 3661181550UL, 3050940272UL, 1646155473UL, 1418548715UL, 1190006478UL, 1047301661UL, 1106232UL, 3920475367UL,
940574010UL, 922744002UL, 2510633517UL, 4144806511UL, 54639113UL, 3031823448UL, 2143051534UL, 3242814908UL, 2067453848UL, 4152687885UL, 2079235652UL, 2447285474UL, 736638210UL, 428527087UL, 1601035152UL, 3225501736UL, 2911340385UL, 1849570436UL, 2565464472UL, 3508441679UL, 1388990570UL, 1749179860UL, 84517579UL, 1737735237UL, 2835403456UL, 122872799UL, 2586347240UL, 4002124614UL, 597822462UL, 2958058367UL, 4270737941UL, 1336703451UL,
3078170472UL, 1186434751UL, 700631413UL, 1497890797UL, 1195347450UL, 2560167391UL, 1116697259UL, 1254138573UL, 747913260UL, 240954704UL, 3107512667UL, 360584144UL, 3422778960UL, 3516528389UL, 3301260366UL, 1254513537UL, 122269053UL, 1579582456UL, 873334104UL, 3918835024UL, 1731872444UL, 1974410416UL, 1811172641UL, 4172523062UL, 4092675777UL, 4124987343UL, 1936078756UL, 1757348689UL, 2694415512UL, 128641660UL, 1744777659UL, 3173116729UL,
983733754UL, 1430789547UL, 701906842UL, 3367232568UL, 3266433501UL, 3572590347UL, 1453272962UL, 2106553114UL, 993786201UL, 2149441250UL, 1295181065UL, 2962229026UL, 3709052556UL, 3255608941UL, 3677730029UL, 483873127UL, 102227292UL, 2626265293UL, 2018984578UL, 2266388762UL, 1191709548UL, 2152725916UL, 583672623UL, 2230473473UL, 1995194269UL, 1740347812UL, 2558095372UL, 3070195183UL, 3023333227UL, 2497183195UL, 1908755188UL, 773027539UL,
3646876518UL, 2272586839UL, 493318726UL, 2107067517UL, 2000805278UL, 2530829636UL, 3183628745UL, 677565332UL, 1497629423UL, 82094920UL, 2214054433UL, 2635367545UL, 470855467UL, 2184853389UL, 2942188934UL, 188335670UL, 3656661644UL, 1883526235UL, 3990873975UL, 1490784356UL, 4047548172UL, 3149642641UL, 3289988179UL, 2590918909UL, 2893039564UL, 2350687346UL, 4252624874UL, 15372456UL, 1614496594UL, 2364847678UL, 2604511825UL, 422365460UL,
4195174772UL, 3266964836UL, 2008671995UL, 54038434UL, 781948549UL, 1276017666UL, 2756376612UL, 2436825273UL, 1711863836UL, 3541493950UL, 3821378841UL, 1007557618UL, 345375815UL, 2081905201UL, 2227278118UL, 1185927141UL, 1082173792UL, 3567361925UL, 1940465859UL, 541632942UL, 1830210248UL, 3757851982UL, 775883450UL, 1666577465UL, 1004944607UL, 878440834UL, 2146344131UL, 4195798476UL, 370164841UL, 3649112729UL, 37066142UL, 2311278904UL,
1935745497UL, 2304799402UL, 4107299626UL, 1348526232UL, 2473609635UL, 3284032699UL, 2374292786UL, 1762329186UL, 857978496UL, 1039346432UL, 2621413355UL, 29961014UL, 3582263091UL, 4268542513UL, 3890612190UL, 3096173646UL, 2026544230UL, 3856142618UL, 2347115934UL, 319800326UL, 3255916105UL, 2430273059UL, 823505311UL, 874255188UL, 1401925393UL, 4203707857UL, 4259159566UL, 2606881118UL, 1978288664UL, 1447576038UL, 3860341401UL, 412510348UL,
},
{
4052471963UL, 683640040UL, 3043876021UL, 3466644483UL, 4222418025UL, 3035140128UL, 1466027937UL, 18198088UL, 3410320851UL, 3040963721UL, 488404231UL, 3157371815UL, 769336092UL, 3240417718UL, 808582581UL, 2075839263UL, 835026995UL, 3123726486UL, 3284240985UL, 1898453053UL, 3606056482UL, 512836002UL, 2715428547UL, 4182302879UL, 1644882480UL, 3160187826UL, 390292489UL, 980889545UL, 2776206633UL, 2482799995UL, 617042280UL, 3501667414UL,
689451808UL, 497018701UL, 238525753UL, 3890163301UL, 896679896UL, 1544533015UL, 3412477225UL, 3116575138UL, 4250402651UL, 3990990746UL, 819056741UL, 1459334146UL, 158377590UL, 3444755752UL, 8230450UL, 1378706455UL, 684191332UL, 3217423797UL, 2842520097UL, 1631477948UL, 2591254230UL, 959644473UL, 1020694107UL, 1748401915UL, 3452514983UL, 3892766171UL, 1227786994UL, 2086180800UL, 2394613217UL, 2091953150UL, 870094953UL, 2306851481UL,
571550601UL, 488878212UL, 873197214UL, 2630100528UL, 2067476907UL, 2162307009UL, 2026119728UL, 115875280UL, 2905867426UL, 248774881UL, 3110900450UL, 2236032812UL, 1888510348UL, 708001855UL, 996960491UL, 3514196956UL, 1407967546UL, 1826568876UL, 3659618284UL, 2614104317UL, 2230066308UL, 1055135881UL, 2537437343UL, 1858044413UL, 2608594891UL, 2750681169UL, 3241939420UL, 3966440877UL, 2375002886UL, 2417753441UL, 1405878685UL, 1081133199UL,
1496940727UL, 382467042UL, 2745477587UL, 1209424459UL, 811187075UL, 1385604734UL, 2623887355UL, 3443875720UL, 394141555UL, 4142998949UL, 4195414618UL, 1489846841UL, 2253433808UL, 1171450286UL, 84131191UL, 4387588UL, 2641405140UL, 3525405389UL, 3273000909UL, 423660319UL, 2366546732UL, 3698878607UL, 2161119729UL, 4263629085UL, 3029102089UL, 2692507376UL, 3266869596UL, 1658012061UL, 1960169440UL, 1002311379UL, 3724446882UL, 2004188516UL,
999513506UL, 2200093802UL, 4141037460UL, 351865836UL, 412875013UL, 1535823315UL, 3880657632UL, 3109944987UL, 3207577548UL, 3462087941UL, 584875517UL, 2635241084UL, 3834145971UL, 1693380373UL, 3524443732UL, 934775214UL, 1960588847UL, 2226778032UL, 1044609478UL, 12199016UL, 1120582000UL, 226430296UL, 665553142UL, 2570993348UL, 1685535237UL, 3325420136UL, 3925248326UL, 2855346376UL, 1205558328UL, 808835317UL, 3295908896UL, 4170076136UL,
2438272365UL, 4052471963UL, 683640040UL, 3043876021UL, 3466644483UL, 1385549869UL, 3035140128UL, 1466027937UL, 18198088UL, 3410320851UL, 2171386836UL, 488404231UL, 3157371815UL, 769336092UL, 3240417718UL, 2921774554UL, 2075839263UL, 835026995UL, 3123726486UL, 3284240985UL, 72352110UL, 3606056482UL, 512836002UL, 2715428547UL, 4182302879UL, 3869483469UL, 3160187826UL, 390292489UL, 980889545UL, 2776206633UL, 1385691983UL, 617042280UL,
3501667414UL, 689451808UL, 497018701UL, 2600411809UL, 3890163301UL, 896679896UL, 1544533015UL, 3412477225UL, 356556378UL, 4250402651UL, 3990990746UL, 819056741UL, 1459334146UL, 199003993UL, 3444755752UL, 8230450UL, 1378706455UL, 684191332UL, 1750733272UL, 2842520097UL, 1631477948UL, 2591254230UL, 959644473UL, 2113375576UL, 1748401915UL, 3452514983UL, 3892766171UL, 1227786994UL, 275473920UL, 2394613217UL, 2091953150UL, 870094953UL,
2306851481UL, 897057645UL, 488878212UL, 873197214UL, 2630100528UL, 2067476907UL, 944114068UL, 2026119728UL, 115875280UL, 2905867426UL, 248774881UL, 989201307UL, 2236032812UL, 1888510348UL, 708001855UL, 996960491UL, 2121706374UL, 1407967546UL, 1826568876UL, 3659618284UL, 2614104317UL, 2931815032UL, 1055135881UL, 2537437343UL, 1858044413UL, 2608594891UL, 1423973935UL, 3241939420UL, 3966440877UL, 2375002886UL, 2417753441UL, 2514473440UL,
1081133199UL, 1496940727UL, 382467042UL, 2745477587UL, 81977310UL, 811187075UL, 1385604734UL, 2623887355UL, 3443875720UL, 2100629879UL, 4142998949UL, 4195414618UL, 1489846841UL, 2253433808UL, 337182869UL, 84131191UL, 4387588UL, 2641405140UL, 3525405389UL, 661876463UL, 423660319UL, 2366546732UL, 3698878607UL, 2161119729UL, 309510684UL, 3029102089UL, 2692507376UL, 3266869596UL, 1658012061UL, 11119541UL, 1002311379UL, 3724446882UL,
2004188516UL, 999513506UL, 3486722046UL, 4141037460UL, 351865836UL, 412875013UL, 1535823315UL, 2818130700UL, 3109944987UL, 3207577548UL, 3462087941UL, 584875517UL, 322875622UL, 3834145971UL, 1693380373UL, 3524443732UL, 934775214UL, 3879414752UL, 2226778032UL, 1044609478UL, 12199016UL, 1120582000UL, 4207259464UL, 665553142UL, 2570993348UL, 1685535237UL, 3325420136UL, 553869152UL, 2855346376UL, 1205558328UL, 808835317UL, 3295908896UL,
470585896UL, 2438272365UL, 4052471963UL, 683640040UL, 3043876021UL, 1588419572UL, 1385549869UL, 3035140128UL, 1466027937UL, 18198088UL, 363815288UL, 2171386836UL, 488404231UL, 3157371815UL, 769336092UL, 2464768302UL, 2921774554UL, 2075839263UL, 835026995UL, 3123726486UL, 4229246330UL, 72352110UL, 3606056482UL, 512836002UL, 2715428547UL, 319830805UL, 3869483469UL, 3160187826UL, 390292489UL, 980889545UL, 2966401462UL, 1385691983UL,
617042280UL, 3501667414UL, 689451808UL, 4047377762UL, 2600411809UL, 3890163301UL, 896679896UL, 1544533015UL, 764316452UL, 356556378UL, 4250402651UL, 3990990746UL, 819056741UL, 965331966UL, 199003993UL, 3444755752UL, 8230450UL, 1378706455UL, 51902971UL, 1750733272UL, 2842520097UL, 1631477948UL, 2591254230UL, 426039404UL, 2113375576UL, 1748401915UL, 3452514983UL, 3892766171UL, 2833368447UL, 275473920UL, 2394613217UL, 2091953150UL,
870094953UL, 3524323828UL, 897057645UL, 488878212UL, 873197214UL, 2630100528UL, 3939852929UL, 944114068UL, 2026119728UL, 115875280UL, 2905867426UL, 3192643919UL, 989201307UL, 2236032812UL, 1888510348UL, 708001855UL, 2166012172UL, 2121706374UL, 1407967546UL, 1826568876UL, 3659618284UL, 135277096UL, 2931815032UL, 1055135881UL, 2537437343UL, 1858044413UL, 2588429924UL, 1423973935UL, 3241939420UL, 3966440877UL, 2375002886UL, 2477142003UL,
2514473440UL, 1081133199UL, 1496940727UL, 382467042UL, 1760129281UL, 81977310UL, 811187075UL, 1385604734UL, 2623887355UL, 4070531513UL, 2100629879UL, 4142998949UL, 4195414618UL, 1489846841UL, 2688068550UL, 337182869UL, 84131191UL, 4387588UL, 2641405140UL, 1837403234UL, 661876463UL, 423660319UL, 2366546732UL, 3698878607UL, 2916121190UL, 309510684UL, 3029102089UL, 2692507376UL, 3266869596UL, 303422295UL, 11119541UL, 1002311379UL,
3724446882UL, 2004188516UL, 2652711421UL, 3486722046UL, 4141037460UL, 351865836UL, 412875013UL, 113149471UL, 2818130700UL, 3109944987UL, 3207577548UL, 3462087941UL, 1443140792UL, 322875622UL, 3834145971UL, 1693380373UL, 3524443732UL, 901891935UL, 3879414752UL, 2226778032UL, 1044609478UL, 12199016UL, 2213168758UL, 4207259464UL, 665553142UL, 2570993348UL, 1685535237UL, 1114492412UL, 553869152UL, 2855346376UL, 1205558328UL, 808835317UL,
3266626294UL, 470585896UL, 2438272365UL, 4052471963UL, 683640040UL, 3581539398UL, 1588419572UL, 1385549869UL, 3035140128UL, 1466027937UL, 4075470388UL, 363815288UL, 2171386836UL, 488404231UL, 3157371815UL, 2759472233UL, 2464768302UL, 2921774554UL, 2075839263UL, 835026995UL, 1030654310UL, 4229246330UL, 72352110UL, 3606056482UL, 512836002UL, 961858496UL, 319830805UL, 3869483469UL, 3160187826UL, 390292489UL, 2366221117UL, 2966401462UL,
1385691983UL, 617042280UL, 3501667414UL, 295865937UL, 4047377762UL, 2600411809UL, 3890163301UL, 896679896UL, 21714884UL, 764316452UL, 356556378UL, 4250402651UL, 3990990746UL, 1012967081UL, 965331966UL, 199003993UL, 3444755752UL, 8230450UL, 1255302023UL, 51902971UL, 1750733272UL, 2842520097UL, 1631477948UL, 2321320272UL, 426039404UL, 2113375576UL, 1748401915UL, 3452514983UL, 2847013518UL, 2833368447UL, 275473920UL, 2394613217UL,
2091953150UL, 1250695522UL, 3524323828UL, 897057645UL, 488878212UL, 873197214UL, 1452317325UL, 3939852929UL, 944114068UL, 2026119728UL, 115875280UL, 4061820350UL, 3192643919UL, 989201307UL, 2236032812UL, 1888510348UL, 3986446165UL, 2166012172UL, 2121706374UL, 1407967546UL, 1826568876UL, 2910745432UL, 135277096UL, 2931815032UL, 1055135881UL, 2537437343UL, 2976455307UL, 2588429924UL, 1423973935UL, 3241939420UL, 3966440877UL, 2418897705UL,
2477142003UL, 2514473440UL, 1081133199UL, 1496940727UL, 1321648771UL, 1760129281UL, 81977310UL, 811187075UL, 1385604734UL, 17644628UL, 4070531513UL, 2100629879UL, 4142998949UL, 4195414618UL, 2697310527UL, 2688068550UL, 337182869UL, 84131191UL, 4387588UL, 1724191700UL, 1837403234UL, 661876463UL, 423660319UL, 2366546732UL, 693430992UL, 2916121190UL, 309510684UL, 3029102089UL, 2692507376UL, 3917396098UL, 303422295UL, 11119541UL,
1002311379UL, 3724446882UL, 841468294UL, 2652711421UL, 3486722046UL, 4141037460UL, 351865836UL, 1733384185UL, 113149471UL, 2818130700UL, 3109944987UL, 3207577548UL, 2326233100UL, 1443140792UL, 322875622UL, 3834145971UL, 1693380373UL, 1580706359UL, 901891935UL, 3879414752UL, 2226778032UL, 1044609478UL, 3805470822UL, 2213168758UL, 4207259464UL, 665553142UL, 2570993348UL, 3406548636UL, 1114492412UL, 553869152UL, 2855346376UL, 1205558328UL,
4287831475UL, 1329654114UL, 2347235746UL, 2477803138UL, 2962371859UL, 3610024283UL, 4197266903UL, 1162294689UL, 1746713323UL, 2815058477UL, 2152552186UL, 4214791071UL, 2382522482UL, 3713914466UL, 3974765132UL, 348354997UL, 1670276150UL, 2173074887UL, 381736894UL, 3866219357UL, 1919366695UL, 3635118824UL, 2298653261UL, 3534332682UL, 1627699897UL, 4168636618UL, 3787938690UL, 2144231271UL, 2067679462UL, 217001062UL, 2308928337UL, 1620415125UL,
3526559172UL, 749451561UL, 2456947371UL, 3543607786UL, 1893824735UL, 962598819UL, 2332807164UL, 1691114891UL, 2543992233UL, 2914780639UL, 1610287145UL, 1700599697UL, 3185174208UL, 552323208UL, 2367242224UL, 3797136972UL, 3415066418UL, 2468049249UL, 1677937401UL, 40445671UL, 2886682530UL, 2585715434UL, 194932329UL, 2994003812UL, 3099556382UL, 680852222UL, 135838738UL, 1371063256UL, 995454898UL, 3754526418UL, 803635682UL, 634588682UL,
3869250783UL, 2442285521UL, 1455637058UL, 570621479UL, 2512681851UL, 1220136924UL, 750260121UL, 2909903038UL, 1582019728UL, 955115170UL, 1608265445UL, 2157390890UL, 2303678604UL, 1568394164UL, 831914289UL, 1971271392UL, 1294799854UL, 1489945167UL, 442427880UL, 1305083700UL, 1211218668UL, 2380073713UL, 2798736785UL, 2193524273UL, 3227386915UL, 1636588977UL, 3612937642UL, 435113647UL, 1591761830UL, 536210039UL, 2475747073UL, 4223795480UL,
1786737271UL, 1444661534UL, 3249410301UL, 3333695212UL, 4169107188UL, 3280638635UL, 702659930UL, 1444127970UL, 225340755UL, 2255629368UL, 746584456UL, 3965677674UL, 2671132955UL, 2080717656UL, 2145343886UL, 3712441197UL, 368422910UL, 1297685674UL, 4076123901UL, 26214470UL, 2948764826UL, 40503299UL, 1198194334UL, 2100063637UL, 1966331612UL, 2189582064UL, 2064696934UL, 1797550642UL, 3469793941UL, 2868963812UL, 851437659UL, 240918534UL,
365060070UL, 3530600064UL, 39695324UL, 1753898837UL, 1286976449UL, 3131971360UL, 2406485219UL, 3365373704UL, 3224113403UL, 1651742834UL, 587601940UL, 1574206085UL, 3739575036UL, 1413669616UL, 38172232UL, 293127854UL, 4126190109UL, 1891744061UL, 787878666UL, 456643669UL, 4228710325UL, 2025132037UL, 1492133135UL, 3122840937UL, 969442079UL, 3272420439UL, 3836126369UL, 1877655562UL, 2766212758UL, 3867984746UL, 3348077578UL, 1841216706UL,
},
{
1676507466UL, 1017841240UL, 2992644565UL, 476936158UL, 2468072723UL, 3113105154UL, 1154120402UL, 460889625UL, 1942263502UL, 1761593999UL, 3020908939UL, 3078194866UL, 310971889UL, 1644896012UL, 3756044556UL, 3549937583UL, 3710822994UL, 3554313733UL, 2174654326UL, 4251063242UL, 2340485150UL, 950951909UL, 4288936895UL, 3744348848UL, 706644559UL, 1085927825UL, 1595992020UL, 3288724966UL, 1367247946UL, 2950094970UL, 3925419886UL, 2628739022UL,
2528254629UL, 3582224789UL, 3907345559UL, 3373329273UL, 4255542251UL, 1185418446UL, 4018656113UL, 2854344020UL, 1381160022UL, 3642438773UL, 4284399225UL, 935780030UL, 4142412144UL, 1263328494UL, 1154237693UL, 2684443667UL, 3067549398UL, 4253090033UL, 1251034970UL, 1874233020UL, 3222830495UL, 3866931656UL, 286048055UL, 3146635362UL, 1436483376UL, 2821876495UL, 3927829532UL, 2648886905UL, 2142862852UL, 1368937545UL, 2647327844UL, 1072219385UL,
2621337706UL, 3543274652UL, 911792564UL, 1204178178UL, 4127214323UL, 2821691380UL, 3101998294UL, 730811902UL, 1989156224UL, 2872353003UL, 278290276UL, 1390223786UL, 2657819643UL, 552729795UL, 1736270535UL, 2759207116UL, 1897013739UL, 3657020278UL, 1387364861UL, 1966588302UL, 1049203087UL, 486446521UL, 3675999281UL, 714737345UL, 686837530UL, 85509025UL, 3609089773UL, 2117061768UL, 3935682560UL, 3859508784UL, 4105287041UL, 1808988481UL,
83680601UL, 1464326680UL, 1657693523UL, 3318062731UL, 1391154023UL, 234460119UL, 3551348221UL, 2245244809UL, 3635923821UL, 2814385745UL, 3497626257UL, 916790795UL, 245338628UL, 2514528380UL, 3711787525UL, 2239286063UL, 1054058916UL, 3963706010UL, 3176203796UL, 2230543409UL, 2173597546UL, 3786733892UL, 1396036965UL, 1038764273UL, 2032556038UL, 3216540537UL, 3298170974UL, 1008892557UL, 141155464UL, 1863766055UL, 3931110690UL, 191299053UL,
2019139711UL, 2409528317UL, 739418419UL, 1377144055UL, 2876702705UL, 3911939673UL, 1197696462UL, 2814009721UL, 600813233UL, 1535885024UL, 1486280357UL, 3084650548UL, 2324695947UL, 2293284974UL, 2036339249UL, 3465600153UL, 1624446108UL, 327866771UL, 3356772175UL, 1826625240UL, 1947102360UL, 3661848193UL, 1421374867UL, 3228945021UL, 1358646008UL, 1067180174UL, 2190741258UL, 643362354UL, 109899594UL, 2064362635UL, 3249674888UL, 2165543887UL,
4180291913UL, 1676507466UL, 1017841240UL, 2992644565UL, 476936158UL, 3608467942UL, 3113105154UL, 1154120402UL, 460889625UL, 1942263502UL, 1862994005UL, 3020908939UL, 3078194866UL, 310971889UL, 1644896012UL, 693774191UL, 3549937583UL, 3710822994UL, 3554313733UL, 2174654326UL, 37658897UL, 2340485150UL, 950951909UL, 4288936895UL, 3744348848UL, 2258231402UL, 1085927825UL, 1595992020UL, 3288724966UL, 1367247946UL, 3850509554UL, 3925419886UL,
2628739022UL, 2528254629UL, 3582224789UL, 3124287811UL, 3373329273UL, 4255542251UL, 1185418446UL, 4018656113UL, 1989726178UL, 1381160022UL, 3642438773UL, 4284399225UL, 935780030UL, 3622052196UL, 1263328494UL, 1154237693UL, 2684443667UL, 3067549398UL, 2786224913UL, 1251034970UL, 1874233020UL, 3222830495UL, 3866931656UL, 1529490307UL, 3146635362UL, 1436483376UL, 2821876495UL, 3927829532UL, 979247444UL, 2142862852UL, 1368937545UL, 2647327844UL,
1072219385UL, 294065371UL, 3543274652UL, 911792564UL, 1204178178UL, 4127214323UL, 103582737UL, 3101998294UL, 730811902UL, 1989156224UL, 2872353003UL, 1885087777UL, 1390223786UL, 2657819643UL, 552729795UL, 1736270535UL, 3325206451UL, 1897013739UL, 3657020278UL, 1387364861UL, 1966588302UL, 2117065739UL, 486446521UL, 3675999281UL, 714737345UL, 686837530UL, 3946214694UL, 3609089773UL, 2117061768UL, 3935682560UL, 3859508784UL, 2916136885UL,
1808988481UL, 83680601UL, 1464326680UL, 1657693523UL, 3438751781UL, 1391154023UL, 234460119UL, 3551348221UL, 2245244809UL, 3948410079UL, 2814385745UL, 3497626257UL, 916790795UL, 245338628UL, 1767303496UL, 3711787525UL, 2239286063UL, 1054058916UL, 3963706010UL, 4140631909UL, 2230543409UL, 2173597546UL, 3786733892UL, 1396036965UL, 1116033475UL, 2032556038UL, 3216540537UL, 3298170974UL, 1008892557UL, 667272562UL, 1863766055UL, 3931110690UL,
191299053UL, 2019139711UL, 272901326UL, 739418419UL, 1377144055UL, 2876702705UL, 3911939673UL, 3839312742UL, 2814009721UL, 600813233UL, 1535885024UL, 1486280357UL, 4256065219UL, 2324695947UL, 2293284974UL, 2036339249UL, 3465600153UL, 1215859603UL, 327866771UL, 3356772175UL, 1826625240UL, 1947102360UL, 4240407984UL, 1421374867UL, 3228945021UL, 1358646008UL, 1067180174UL, 4100357988UL, 643362354UL, 109899594UL, 2064362635UL, 3249674888UL,
2898852084UL, 4180291913UL, 1676507466UL, 1017841240UL, 2992644565UL, 1569683812UL, 3608467942UL, 3113105154UL, 1154120402UL, 460889625UL, 966040649UL, 1862994005UL, 3020908939UL, 3078194866UL, 310971889UL, 786634113UL, 693774191UL, 3549937583UL, 3710822994UL, 3554313733UL, 1578429713UL, 37658897UL, 2340485150UL, 950951909UL, 4288936895UL, 2528123823UL, 2258231402UL, 1085927825UL, 1595992020UL, 3288724966UL, 3544041088UL, 3850509554UL,
3925419886UL, 2628739022UL, 2528254629UL, 2562145937UL, 3124287811UL, 3373329273UL, 4255542251UL, 1185418446UL, 3693565710UL, 1989726178UL, 1381160022UL, 3642438773UL, 4284399225UL, 3271478204UL, 3622052196UL, 1263328494UL, 1154237693UL, 2684443667UL, 3615401444UL, 2786224913UL, 1251034970UL, 1874233020UL, 3222830495UL, 2572413057UL, 1529490307UL, 3146635362UL, 1436483376UL, 2821876495UL, 3993894153UL, 979247444UL, 2142862852UL, 1368937545UL,
2647327844UL, 1353904396UL, 294065371UL, 3543274652UL, 911792564UL, 1204178178UL, 3165709748UL, 103582737UL, 3101998294UL, 730811902UL, 1989156224UL, 893293786UL, 1885087777UL, 1390223786UL, 2657819643UL, 552729795UL, 3388458110UL, 3325206451UL, 1897013739UL, 3657020278UL, 1387364861UL, 3025318046UL, 2117065739UL, 486446521UL, 3675999281UL, 714737345UL, 2085926890UL, 3946214694UL, 3609089773UL, 2117061768UL, 3935682560UL, 868009118UL,
2916136885UL, 1808988481UL, 83680601UL, 1464326680UL, 797410789UL, 3438751781UL, 1391154023UL, 234460119UL, 3551348221UL, 4068940987UL, 3948410079UL, 2814385745UL, 3497626257UL, 916790795UL, 3722456098UL, 1767303496UL, 3711787525UL, 2239286063UL, 1054058916UL, 2030352819UL, 4140631909UL, 2230543409UL, 2173597546UL, 3786733892UL, 3211336683UL, 1116033475UL, 2032556038UL, 3216540537UL, 3298170974UL, 2589589144UL, 667272562UL, 1863766055UL,
3931110690UL, 191299053UL, 1139480458UL, 272901326UL, 739418419UL, 1377144055UL, 2876702705UL, 1954361769UL, 3839312742UL, 2814009721UL, 600813233UL, 1535885024UL, 3587775605UL, 4256065219UL, 2324695947UL, 2293284974UL, 2036339249UL, 1534849280UL, 1215859603UL, 327866771UL, 3356772175UL, 1826625240UL, 720372669UL, 4240407984UL, 1421374867UL, 3228945021UL, 1358646008UL, 3409069246UL, 4100357988UL, 643362354UL, 109899594UL, 2064362635UL,
4243434294UL, 2898852084UL, 4180291913UL, 1676507466UL, 1017841240UL, 3243922356UL, 1569683812UL, 3608467942UL, 3113105154UL, 1154120402UL, 1479311403UL, 966040649UL, 1862994005UL, 3020908939UL, 3078194866UL, 1556392996UL, 786634113UL, 693774191UL, 3549937583UL, 3710822994UL, 920664071UL, 1578429713UL, 37658897UL, 2340485150UL, 950951909UL, 740197415UL, 2528123823UL, 2258231402UL, 1085927825UL, 1595992020UL, 2580760267UL, 3544041088UL,
3850509554UL, 3925419886UL, 2628739022UL, 3867556156UL, 2562145937UL, 3124287811UL, 3373329273UL, 4255542251UL, 3185271749UL, 3693565710UL, 1989726178UL, 1381160022UL, 3642438773UL, 3042165367UL, 3271478204UL, 3622052196UL, 1263328494UL, 1154237693UL, 1016814036UL, 3615401444UL, 2786224913UL, 1251034970UL, 1874233020UL, 2956086971UL, 2572413057UL, 1529490307UL, 3146635362UL, 1436483376UL, 1513970396UL, 3993894153UL, 979247444UL, 2142862852UL,
1368937545UL, 3275665128UL, 1353904396UL, 294065371UL, 3543274652UL, 911792564UL, 2209636872UL, 3165709748UL, 103582737UL, 3101998294UL, 730811902UL, 965151434UL, 893293786UL, 1885087777UL, 1390223786UL, 2657819643UL, 3278634059UL, 3388458110UL, 3325206451UL, 1897013739UL, 3657020278UL, 4293473749UL, 3025318046UL, 2117065739UL, 486446521UL, 3675999281UL, 620561205UL, 2085926890UL, 3946214694UL, 3609089773UL, 2117061768UL, 163384588UL,
868009118UL, 2916136885UL, 1808988481UL, 83680601UL, 10243015UL, 797410789UL, 3438751781UL, 1391154023UL, 234460119UL, 1278218413UL, 4068940987UL, 3948410079UL, 2814385745UL, 3497626257UL, 1233272798UL, 3722456098UL, 1767303496UL, 3711787525UL, 2239286063UL, 3968895688UL, 2030352819UL, 4140631909UL, 2230543409UL, 2173597546UL, 2866251044UL, 3211336683UL, 1116033475UL, 2032556038UL, 3216540537UL, 4233849723UL, 2589589144UL, 667272562UL,
1863766055UL, 3931110690UL, 2468422423UL, 1139480458UL, 272901326UL, 739418419UL, 1377144055UL, 4240143411UL, 1954361769UL, 3839312742UL, 2814009721UL, 600813233UL, 3976840004UL, 3587775605UL, 4256065219UL, 2324695947UL, 2293284974UL, 437604123UL, 1534849280UL, 1215859603UL, 327866771UL, 3356772175UL, 2757237699UL, 720372669UL, 4240407984UL, 1421374867UL, 3228945021UL, 3284801305UL, 3409069246UL, 4100357988UL, 643362354UL, 109899594UL,
1301585321UL, 2528806870UL, 1838904064UL, 448772403UL, 1097849740UL, 1899994097UL, 618309123UL, 1911948510UL, 2309256224UL, 1861398151UL, 905306403UL, 1067595802UL, 36868624UL, 3780886191UL, 835126206UL, 3190251977UL, 2672497726UL, 2085944002UL, 2912993968UL, 2493776706UL, 667136329UL, 1474890786UL, 2383346554UL, 943528949UL, 3376706013UL, 2495573574UL, 144956345UL, 793159960UL, 1591274917UL, 477107637UL, 1383815442UL, 67384899UL,
2355242218UL, 1687409818UL, 3801093871UL, 2108217811UL, 3455908733UL, 4172160797UL, 3935534685UL, 631067839UL, 1187677548UL, 2280856137UL, 3020767646UL, 2063176246UL, 3736904984UL, 2952933848UL, 2975164686UL, 4144473303UL, 34670977UL, 1250976509UL, 3484166554UL, 1532744745UL, 225700994UL, 1878713627UL, 2122358980UL, 1456610194UL, 2917522161UL, 2818947075UL, 102678939UL, 53743858UL, 2095250656UL, 4023979225UL, 3094092874UL, 4128760696UL,
3411610028UL, 3020200609UL, 2225866341UL, 586320946UL, 63813522UL, 1238216159UL, 2825692263UL, 2169937231UL, 3298517640UL, 1542128261UL, 2205544184UL, 1258655704UL, 2629012083UL, 4113650203UL, 3198617867UL, 2742310794UL, 3372657381UL, 3115904410UL, 1948638822UL, 1123521744UL, 1080429281UL, 4086706732UL, 4142693211UL, 817377147UL, 2570194641UL, 26001503UL, 2861456160UL, 4185725555UL, 2573003804UL, 1618628779UL, 2588489212UL, 3996192609UL,
1555844274UL, 1003123505UL, 1326350123UL, 1130583849UL, 3017128756UL, 74119042UL, 4041266437UL, 1938014170UL, 3528465794UL, 4203969698UL, 1913054398UL, 3617979809UL, 2218810167UL, 2453899816UL, 1997423206UL, 477446533UL, 303090065UL, 757937082UL, 1523238256UL, 3140505311UL, 1422588701UL, 3642014639UL, 1740624195UL, 1276017154UL, 3072526193UL, 3675105122UL, 1335122682UL, 4080595263UL, 2308519420UL, 3299182769UL, 1461978532UL, 3098694217UL,
2982399822UL, 3088698511UL, 586759229UL, 3548750902UL, 1449857891UL, 2866451663UL, 2525162286UL, 57294602UL, 4107991297UL, 1214672265UL, 2940391280UL, 4285346034UL, 3338216759UL, 737207923UL, 4264163846UL, 59219141UL, 2300024654UL, 1876616814UL, 1976543605UL, 783571061UL, 1724699622UL, 1967524469UL, 1650309916UL, 3322257631UL, 3975521122UL, 273342162UL, 1156754241UL, 185315896UL, 3368133921UL, 66314655UL, 4153777915UL, 3519901897UL,
},
{
3672467167UL, 68684525UL, 1738833632UL, 3081329135UL, 2583806115UL, 2291130512UL, 503032614UL, 3658059597UL, 571493931UL, 685537959UL, 3498787788UL, 422428426UL, 3879256913UL, 1173158320UL, 4000800121UL, 298972869UL, 1718342816UL, 2541691685UL, 2490502642UL, 2321452806UL, 4223212804UL, 1812334632UL, 3717655725UL, 4238191852UL, 3001307165UL, 2621896355UL, 2572404999UL, 3590094954UL, 760765206UL, 2293618001UL, 1392353032UL, 1733137169UL,
2674005018UL, 4067961151UL, 1505710487UL, 451078217UL, 2591688848UL, 12635611UL, 507045428UL, 694822241UL, 1789383090UL, 1140183890UL, 1720695967UL, 1994318191UL, 3340349873UL, 2793804971UL, 1054433135UL, 2345087879UL, 3179939285UL, 1651968615UL, 1793223686UL, 1055357758UL, 914271617UL, 483007580UL, 2127727816UL, 2754998083UL, 3179053982UL, 598442002UL, 1950227301UL, 213053613UL, 3566888111UL, 2832258993UL, 4260365359UL, 443662829UL,
1706542890UL, 3852730296UL, 3643260763UL, 2163607277UL, 1812905006UL, 171529637UL, 215187467UL, 2369406909UL, 1929000706UL, 2572441025UL, 2133955541UL, 810692262UL, 1337974799UL, 4030350704UL, 2159178715UL, 3769451556UL, 1026825278UL, 593628480UL, 1817383139UL, 878832429UL, 2253876350UL, 203612980UL, 2102950440UL, 3407143936UL, 1912362251UL, 1595387637UL, 2827580539UL, 305467658UL, 3292706746UL, 44135525UL, 4001933553UL, 3697343089UL,
760470915UL, 587414402UL, 1419378814UL, 2852774010UL, 3891626781UL, 2757016765UL, 1090707384UL, 3997074427UL, 1047182100UL, 2855539022UL, 36229159UL, 1591415533UL, 3471572739UL, 1237952140UL, 2614469314UL, 213338525UL, 886212578UL, 2620301943UL, 713590207UL, 2430496777UL, 1198164420UL, 2644841698UL, 3654164701UL, 36283572UL, 1461695896UL, 1770331341UL, 1641501876UL, 3470919184UL, 3181021559UL, 3053795110UL, 3533531372UL, 3134337355UL,
668308383UL, 388340999UL, 3221275220UL, 1589659138UL, 294382235UL, 1447443579UL, 690177534UL, 1799726917UL, 2838977761UL, 4172949119UL, 2360858031UL, 159385920UL, 2248389027UL, 1790015671UL, 3925738275UL, 1049918544UL, 4107349511UL, 1619955951UL, 4188275966UL, 1672572975UL, 2672697497UL, 1863413666UL, 747724021UL, 4037561738UL, 1605940213UL, 445253292UL, 3362434828UL, 610898209UL, 1473244091UL, 735444769UL, 1540599852UL, 2449351720UL,
1032410949UL, 3672467167UL, 68684525UL, 1738833632UL, 3081329135UL, 519684794UL, 2291130512UL, 503032614UL, 3658059597UL, 571493931UL, 2400186105UL, 3498787788UL, 422428426UL, 3879256913UL, 1173158320UL, 4120704752UL, 298972869UL, 1718342816UL, 2541691685UL, 2490502642UL, 1686027891UL, 4223212804UL, 1812334632UL, 3717655725UL, 4238191852UL, 642431972UL, 2621896355UL, 2572404999UL, 3590094954UL, 760765206UL, 2949609717UL, 1392353032UL,
1733137169UL, 2674005018UL, 4067961151UL, 1526077846UL, 451078217UL, 2591688848UL, 12635611UL, 507045428UL, 2417951415UL, 1789383090UL, 1140183890UL, 1720695967UL, 1994318191UL, 3465605863UL, 2793804971UL, 1054433135UL, 2345087879UL, 3179939285UL, 3079297626UL, 1793223686UL, 1055357758UL, 914271617UL, 483007580UL, 306802527UL, 2754998083UL, 3179053982UL, 598442002UL, 1950227301UL, 2473418737UL, 3566888111UL, 2832258993UL, 4260365359UL,
443662829UL, 2097776414UL, 3852730296UL, 3643260763UL, 2163607277UL, 1812905006UL, 3957721904UL, 215187467UL, 2369406909UL, 1929000706UL, 2572441025UL, 3779486126UL, 810692262UL, 1337974799UL, 4030350704UL, 2159178715UL, 1127012865UL, 1026825278UL, 593628480UL, 1817383139UL, 878832429UL, 361018423UL, 203612980UL, 2102950440UL, 3407143936UL, 1912362251UL, 1475218277UL, 2827580539UL, 305467658UL, 3292706746UL, 44135525UL, 1900092336UL,
3697343089UL, 760470915UL, 587414402UL, 1419378814UL, 343303227UL, 3891626781UL, 2757016765UL, 1090707384UL, 3997074427UL, 745490961UL, 2855539022UL, 36229159UL, 1591415533UL, 3471572739UL, 3920625546UL, 2614469314UL, 213338525UL, 886212578UL, 2620301943UL, 827771411UL, 2430496777UL, 1198164420UL, 2644841698UL, 3654164701UL, 2747674190UL, 1461695896UL, 1770331341UL, 1641501876UL, 3470919184UL, 919857376UL, 3053795110UL, 3533531372UL,
3134337355UL, 668308383UL, 201138876UL, 3221275220UL, 1589659138UL, 294382235UL, 1447443579UL, 4211579707UL, 1799726917UL, 2838977761UL, 4172949119UL, 2360858031UL, 416103844UL, 2248389027UL, 1790015671UL, 3925738275UL, 1049918544UL, 3481887924UL, 1619955951UL, 4188275966UL, 1672572975UL, 2672697497UL, 564854400UL, 747724021UL, 4037561738UL, 1605940213UL, 445253292UL, 604900912UL, 610898209UL, 1473244091UL, 735444769UL, 1540599852UL,
3036173307UL, 1032410949UL, 3672467167UL, 68684525UL, 1738833632UL, 973022696UL, 519684794UL, 2291130512UL, 503032614UL, 3658059597UL, 1500301452UL, 2400186105UL, 3498787788UL, 422428426UL, 3879256913UL, 3923611748UL, 4120704752UL, 298972869UL, 1718342816UL, 2541691685UL, 2323881484UL, 1686027891UL, 4223212804UL, 1812334632UL, 3717655725UL, 2109094458UL, 642431972UL, 2621896355UL, 2572404999UL, 3590094954UL, 1837882537UL, 2949609717UL,
1392353032UL, 1733137169UL, 2674005018UL, 3252348987UL, 1526077846UL, 451078217UL, 2591688848UL, 12635611UL, 3971261781UL, 2417951415UL, 1789383090UL, 1140183890UL, 1720695967UL, 2906966040UL, 3465605863UL, 2793804971UL, 1054433135UL, 2345087879UL, 915518921UL, 3079297626UL, 1793223686UL, 1055357758UL, 914271617UL, 791633499UL, 306802527UL, 2754998083UL, 3179053982UL, 598442002UL, 324402573UL, 2473418737UL, 3566888111UL, 2832258993UL,
4260365359UL, 2168046398UL, 2097776414UL, 3852730296UL, 3643260763UL, 2163607277UL, 2595175979UL, 3957721904UL, 215187467UL, 2369406909UL, 1929000706UL, 657446369UL, 3779486126UL, 810692262UL, 1337974799UL, 4030350704UL, 1865557469UL, 1127012865UL, 1026825278UL, 593628480UL, 1817383139UL, 3414354529UL, 361018423UL, 203612980UL, 2102950440UL, 3407143936UL, 1739372987UL, 1475218277UL, 2827580539UL, 305467658UL, 3292706746UL, 825045562UL,
1900092336UL, 3697343089UL, 760470915UL, 587414402UL, 2000637694UL, 343303227UL, 3891626781UL, 2757016765UL, 1090707384UL, 4015377800UL, 745490961UL, 2855539022UL, 36229159UL, 1591415533UL, 2208656873UL, 3920625546UL, 2614469314UL, 213338525UL, 886212578UL, 2729976209UL, 827771411UL, 2430496777UL, 1198164420UL, 2644841698UL, 1922667440UL, 2747674190UL, 1461695896UL, 1770331341UL, 1641501876UL, 357535311UL, 919857376UL, 3053795110UL,
3533531372UL, 3134337355UL, 1004072597UL, 201138876UL, 3221275220UL, 1589659138UL, 294382235UL, 1148950143UL, 4211579707UL, 1799726917UL, 2838977761UL, 4172949119UL, 892664404UL, 416103844UL, 2248389027UL, 1790015671UL, 3925738275UL, 2612357890UL, 3481887924UL, 1619955951UL, 4188275966UL, 1672572975UL, 2005534713UL, 564854400UL, 747724021UL, 4037561738UL, 1605940213UL, 2620990454UL, 604900912UL, 610898209UL, 1473244091UL, 735444769UL,
3571225334UL, 3036173307UL, 1032410949UL, 3672467167UL, 68684525UL, 3327351604UL, 973022696UL, 519684794UL, 2291130512UL, 503032614UL, 3814902238UL, 1500301452UL, 2400186105UL, 3498787788UL, 422428426UL, 1756753750UL, 3923611748UL, 4120704752UL, 298972869UL, 1718342816UL, 652903081UL, 2323881484UL, 1686027891UL, 4223212804UL, 1812334632UL, 1599640566UL, 2109094458UL, 642431972UL, 2621896355UL, 2572404999UL, 1668409355UL, 1837882537UL,
2949609717UL, 1392353032UL, 1733137169UL, 3691709793UL, 3252348987UL, 1526077846UL, 451078217UL, 2591688848UL, 3353622601UL, 3971261781UL, 2417951415UL, 1789383090UL, 1140183890UL, 4113853791UL, 2906966040UL, 3465605863UL, 2793804971UL, 1054433135UL, 2195882948UL, 915518921UL, 3079297626UL, 1793223686UL, 1055357758UL, 898713552UL, 791633499UL, 306802527UL, 2754998083UL, 3179053982UL, 2469350088UL, 324402573UL, 2473418737UL, 3566888111UL,
2832258993UL, 1377718274UL, 2168046398UL, 2097776414UL, 3852730296UL, 3643260763UL, 3492388484UL, 2595175979UL, 3957721904UL, 215187467UL, 2369406909UL, 4243449339UL, 657446369UL, 3779486126UL, 810692262UL, 1337974799UL, 3960230785UL, 1865557469UL, 1127012865UL, 1026825278UL, 593628480UL, 732793312UL, 3414354529UL, 361018423UL, 203612980UL, 2102950440UL, 2401792405UL, 1739372987UL, 1475218277UL, 2827580539UL, 305467658UL, 2454275289UL,
825045562UL, 1900092336UL, 3697343089UL, 760470915UL, 2146882409UL, 2000637694UL, 343303227UL, 3891626781UL, 2757016765UL, 3997473261UL, 4015377800UL, 745490961UL, 2855539022UL, 36229159UL, 2375394427UL, 2208656873UL, 3920625546UL, 2614469314UL, 213338525UL, 2055366274UL, 2729976209UL, 827771411UL, 2430496777UL, 1198164420UL, 1789631187UL, 1922667440UL, 2747674190UL, 1461695896UL, 1770331341UL, 4284442852UL, 357535311UL, 919857376UL,
3053795110UL, 3533531372UL, 2124270060UL, 1004072597UL, 201138876UL, 3221275220UL, 1589659138UL, 1418386120UL, 1148950143UL, 4211579707UL, 1799726917UL, 2838977761UL, 3540708069UL, 892664404UL, 416103844UL, 2248389027UL, 1790015671UL, 3936883UL, 2612357890UL, 3481887924UL, 1619955951UL, 4188275966UL, 2963623483UL, 2005534713UL, 564854400UL, 747724021UL, 4037561738UL, 3431155922UL, 2620990454UL, 604900912UL, 610898209UL, 1473244091UL,
3880001339UL, 2879060316UL, 3300897679UL, 3960972039UL, 3201086624UL, 3814462934UL, 3426650044UL, 1930881632UL, 1981178788UL, 2956279691UL, 4272406256UL, 372705521UL, 1359389771UL, 1590302979UL, 3940206208UL, 3817999127UL, 2527835456UL, 2739078164UL, 716997849UL, 3235607043UL, 2550297745UL, 3688700200UL, 354502605UL, 2285793656UL, 2339138034UL, 3912354142UL, 2262255668UL, 469322622UL, 1319943359UL, 1916101235UL, 200441823UL, 509436982UL,
2160284593UL, 1687919695UL, 4153615582UL, 495735041UL, 3694469424UL, 2086893117UL, 4223008799UL, 105344742UL, 1698033424UL, 1149223145UL, 4183918790UL, 4176151950UL, 415739351UL, 817762972UL, 3768072560UL, 1931430949UL, 2698979439UL, 3481477932UL, 1994322914UL, 4078299950UL, 1268233995UL, 3254069145UL, 91029129UL, 498234704UL, 1636613942UL, 3710087092UL, 3876816560UL, 3510446387UL, 3870169008UL, 1370156410UL, 2442498047UL, 2324396523UL,
1258730334UL, 621954739UL, 1053015373UL, 491820717UL, 3386515432UL, 2203703266UL, 120167176UL, 2383669740UL, 1038666440UL, 2927342870UL, 3583197824UL, 1236241846UL, 2474675929UL, 679052891UL, 2451259584UL, 2177706146UL, 606842882UL, 3546980104UL, 2289281509UL, 353873434UL, 2041926837UL, 1238346748UL, 2729109726UL, 2843938395UL, 2938124210UL, 2554443866UL, 1494477920UL, 693378319UL, 2020963566UL, 2000385949UL, 3744098787UL, 650307220UL,
2631327075UL, 1529128757UL, 595871428UL, 3206666562UL, 458062987UL, 875238192UL, 3729317374UL, 1368843921UL, 3478430230UL, 3234384578UL, 3232435428UL, 321359326UL, 994274524UL, 361184397UL, 4285497594UL, 915263578UL, 1486882838UL, 9988613UL, 829077170UL, 677216046UL, 4141828204UL, 165804609UL, 1086678519UL, 2933434608UL, 1351662802UL, 2640085040UL, 2611502932UL, 2033698714UL, 2008873254UL, 3995557835UL, 1020873906UL, 67873555UL,
2230337823UL, 1263800417UL, 1148712155UL, 3985159589UL, 2979503513UL, 2854714997UL, 1539343345UL, 2751484352UL, 1569100732UL, 2020758949UL, 2126757134UL, 3426641899UL, 2808587825UL, 1953320148UL, 1096398464UL, 1502907172UL, 3751230087UL, 765557661UL, 765290990UL, 3056075500UL, 2040620632UL, 422573751UL, 3613558930UL, 1741145769UL, 273531216UL, 837238736UL, 494297893UL, 2903251124UL, 1636782182UL, 4256592784UL, 3652746656UL, 4258393217UL,
},

};

static __attribute__((device)) unsigned int precalc_xorwow_offset_matrix[8][800] = {
{
0UL, 0UL, 0UL, 0UL, 3UL, 0UL, 0UL, 0UL, 0UL, 6UL, 0UL, 0UL, 0UL, 0UL, 15UL, 0UL, 0UL, 0UL, 0UL, 30UL, 0UL, 0UL, 0UL, 0UL, 60UL, 0UL, 0UL, 0UL, 0UL, 120UL, 0UL, 0UL,
0UL, 0UL, 240UL, 0UL, 0UL, 0UL, 0UL, 480UL, 0UL, 0UL, 0UL, 0UL, 960UL, 0UL, 0UL, 0UL, 0UL, 1920UL, 0UL, 0UL, 0UL, 0UL, 3840UL, 0UL, 0UL, 0UL, 0UL, 7680UL, 0UL, 0UL, 0UL, 0UL,
15360UL, 0UL, 0UL, 0UL, 0UL, 30720UL, 0UL, 0UL, 0UL, 0UL, 61440UL, 0UL, 0UL, 0UL, 0UL, 122880UL, 0UL, 0UL, 0UL, 0UL, 245760UL, 0UL, 0UL, 0UL, 0UL, 491520UL, 0UL, 0UL, 0UL, 0UL, 983040UL, 0UL,
0UL, 0UL, 0UL, 1966080UL, 0UL, 0UL, 0UL, 0UL, 3932160UL, 0UL, 0UL, 0UL, 0UL, 7864320UL, 0UL, 0UL, 0UL, 0UL, 15728640UL, 0UL, 0UL, 0UL, 0UL, 31457280UL, 0UL, 0UL, 0UL, 0UL, 62914560UL, 0UL, 0UL, 0UL,
0UL, 125829120UL, 0UL, 0UL, 0UL, 0UL, 251658240UL, 0UL, 0UL, 0UL, 0UL, 503316480UL, 0UL, 0UL, 0UL, 0UL, 1006632960UL, 0UL, 0UL, 0UL, 0UL, 2013265920UL, 0UL, 0UL, 0UL, 0UL, 4026531840UL, 0UL, 0UL, 0UL, 0UL, 3758096384UL,
1UL, 0UL, 0UL, 0UL, 0UL, 2UL, 0UL, 0UL, 0UL, 0UL, 4UL, 0UL, 0UL, 0UL, 0UL, 8UL, 0UL, 0UL, 0UL, 0UL, 16UL, 0UL, 0UL, 0UL, 0UL, 32UL, 0UL, 0UL, 0UL, 0UL, 64UL, 0UL,
0UL, 0UL, 0UL, 128UL, 0UL, 0UL, 0UL, 0UL, 256UL, 0UL, 0UL, 0UL, 0UL, 512UL, 0UL, 0UL, 0UL, 0UL, 1024UL, 0UL, 0UL, 0UL, 0UL, 2048UL, 0UL, 0UL, 0UL, 0UL, 4096UL, 0UL, 0UL, 0UL,
0UL, 8192UL, 0UL, 0UL, 0UL, 0UL, 16384UL, 0UL, 0UL, 0UL, 0UL, 32768UL, 0UL, 0UL, 0UL, 0UL, 65536UL, 0UL, 0UL, 0UL, 0UL, 131072UL, 0UL, 0UL, 0UL, 0UL, 262144UL, 0UL, 0UL, 0UL, 0UL, 524288UL,
0UL, 0UL, 0UL, 0UL, 1048576UL, 0UL, 0UL, 0UL, 0UL, 2097152UL, 0UL, 0UL, 0UL, 0UL, 4194304UL, 0UL, 0UL, 0UL, 0UL, 8388608UL, 0UL, 0UL, 0UL, 0UL, 16777216UL, 0UL, 0UL, 0UL, 0UL, 33554432UL, 0UL, 0UL,
0UL, 0UL, 67108864UL, 0UL, 0UL, 0UL, 0UL, 134217728UL, 0UL, 0UL, 0UL, 0UL, 268435456UL, 0UL, 0UL, 0UL, 0UL, 536870912UL, 0UL, 0UL, 0UL, 0UL, 1073741824UL, 0UL, 0UL, 0UL, 0UL, 2147483648UL, 0UL, 0UL, 0UL, 0UL,
0UL, 1UL, 0UL, 0UL, 0UL, 0UL, 2UL, 0UL, 0UL, 0UL, 0UL, 4UL, 0UL, 0UL, 0UL, 0UL, 8UL, 0UL, 0UL, 0UL, 0UL, 16UL, 0UL, 0UL, 0UL, 0UL, 32UL, 0UL, 0UL, 0UL, 0UL, 64UL,
0UL, 0UL, 0UL, 0UL, 128UL, 0UL, 0UL, 0UL, 0UL, 256UL, 0UL, 0UL, 0UL, 0UL, 512UL, 0UL, 0UL, 0UL, 0UL, 1024UL, 0UL, 0UL, 0UL, 0UL, 2048UL, 0UL, 0UL, 0UL, 0UL, 4096UL, 0UL, 0UL,
0UL, 0UL, 8192UL, 0UL, 0UL, 0UL, 0UL, 16384UL, 0UL, 0UL, 0UL, 0UL, 32768UL, 0UL, 0UL, 0UL, 0UL, 65536UL, 0UL, 0UL, 0UL, 0UL, 131072UL, 0UL, 0UL, 0UL, 0UL, 262144UL, 0UL, 0UL, 0UL, 0UL,
524288UL, 0UL, 0UL, 0UL, 0UL, 1048576UL, 0UL, 0UL, 0UL, 0UL, 2097152UL, 0UL, 0UL, 0UL, 0UL, 4194304UL, 0UL, 0UL, 0UL, 0UL, 8388608UL, 0UL, 0UL, 0UL, 0UL, 16777216UL, 0UL, 0UL, 0UL, 0UL, 33554432UL, 0UL,
0UL, 0UL, 0UL, 67108864UL, 0UL, 0UL, 0UL, 0UL, 134217728UL, 0UL, 0UL, 0UL, 0UL, 268435456UL, 0UL, 0UL, 0UL, 0UL, 536870912UL, 0UL, 0UL, 0UL, 0UL, 1073741824UL, 0UL, 0UL, 0UL, 0UL, 2147483648UL, 0UL, 0UL, 0UL,
0UL, 0UL, 1UL, 0UL, 0UL, 0UL, 0UL, 2UL, 0UL, 0UL, 0UL, 0UL, 4UL, 0UL, 0UL, 0UL, 0UL, 8UL, 0UL, 0UL, 0UL, 0UL, 16UL, 0UL, 0UL, 0UL, 0UL, 32UL, 0UL, 0UL, 0UL, 0UL,
64UL, 0UL, 0UL, 0UL, 0UL, 128UL, 0UL, 0UL, 0UL, 0UL, 256UL, 0UL, 0UL, 0UL, 0UL, 512UL, 0UL, 0UL, 0UL, 0UL, 1024UL, 0UL, 0UL, 0UL, 0UL, 2048UL, 0UL, 0UL, 0UL, 0UL, 4096UL, 0UL,
0UL, 0UL, 0UL, 8192UL, 0UL, 0UL, 0UL, 0UL, 16384UL, 0UL, 0UL, 0UL, 0UL, 32768UL, 0UL, 0UL, 0UL, 0UL, 65536UL, 0UL, 0UL, 0UL, 0UL, 131072UL, 0UL, 0UL, 0UL, 0UL, 262144UL, 0UL, 0UL, 0UL,
0UL, 524288UL, 0UL, 0UL, 0UL, 0UL, 1048576UL, 0UL, 0UL, 0UL, 0UL, 2097152UL, 0UL, 0UL, 0UL, 0UL, 4194304UL, 0UL, 0UL, 0UL, 0UL, 8388608UL, 0UL, 0UL, 0UL, 0UL, 16777216UL, 0UL, 0UL, 0UL, 0UL, 33554432UL,
0UL, 0UL, 0UL, 0UL, 67108864UL, 0UL, 0UL, 0UL, 0UL, 134217728UL, 0UL, 0UL, 0UL, 0UL, 268435456UL, 0UL, 0UL, 0UL, 0UL, 536870912UL, 0UL, 0UL, 0UL, 0UL, 1073741824UL, 0UL, 0UL, 0UL, 0UL, 2147483648UL, 0UL, 0UL,
0UL, 0UL, 0UL, 1UL, 17UL, 0UL, 0UL, 0UL, 2UL, 34UL, 0UL, 0UL, 0UL, 4UL, 68UL, 0UL, 0UL, 0UL, 8UL, 136UL, 0UL, 0UL, 0UL, 16UL, 272UL, 0UL, 0UL, 0UL, 32UL, 544UL, 0UL, 0UL,
0UL, 64UL, 1088UL, 0UL, 0UL, 0UL, 128UL, 2176UL, 0UL, 0UL, 0UL, 256UL, 4352UL, 0UL, 0UL, 0UL, 512UL, 8704UL, 0UL, 0UL, 0UL, 1024UL, 17408UL, 0UL, 0UL, 0UL, 2048UL, 34816UL, 0UL, 0UL, 0UL, 4096UL,
69632UL, 0UL, 0UL, 0UL, 8192UL, 139264UL, 0UL, 0UL, 0UL, 16384UL, 278528UL, 0UL, 0UL, 0UL, 32768UL, 557056UL, 0UL, 0UL, 0UL, 65536UL, 1114112UL, 0UL, 0UL, 0UL, 131072UL, 2228224UL, 0UL, 0UL, 0UL, 262144UL, 4456448UL, 0UL,
0UL, 0UL, 524288UL, 8912896UL, 0UL, 0UL, 0UL, 1048576UL, 17825792UL, 0UL, 0UL, 0UL, 2097152UL, 35651584UL, 0UL, 0UL, 0UL, 4194304UL, 71303168UL, 0UL, 0UL, 0UL, 8388608UL, 142606336UL, 0UL, 0UL, 0UL, 16777216UL, 285212672UL, 0UL, 0UL, 0UL,
33554432UL, 570425344UL, 0UL, 0UL, 0UL, 67108864UL, 1140850688UL, 0UL, 0UL, 0UL, 134217728UL, 2281701376UL, 0UL, 0UL, 0UL, 268435456UL, 268435456UL, 0UL, 0UL, 0UL, 536870912UL, 536870912UL, 0UL, 0UL, 0UL, 1073741824UL, 1073741824UL, 0UL, 0UL, 0UL, 2147483648UL, 2147483648UL,
},
{
0UL, 3UL, 51UL, 771UL, 13107UL, 0UL, 6UL, 102UL, 1542UL, 26214UL, 0UL, 15UL, 255UL, 3855UL, 65535UL, 0UL, 30UL, 510UL, 7710UL, 131070UL, 0UL, 60UL, 1020UL, 15420UL, 262140UL, 0UL, 120UL, 2040UL, 30840UL, 524280UL, 0UL, 240UL,
4080UL, 61680UL, 1048560UL, 0UL, 480UL, 8160UL, 123360UL, 2097120UL, 0UL, 960UL, 16320UL, 246720UL, 4194240UL, 0UL, 1920UL, 32640UL, 493440UL, 8388480UL, 0UL, 3840UL, 65280UL, 986880UL, 16776960UL, 0UL, 7680UL, 130560UL, 1973760UL, 33553920UL, 0UL, 15360UL, 261120UL, 3947520UL,
67107840UL, 0UL, 30720UL, 522240UL, 7895040UL, 134215680UL, 0UL, 61440UL, 1044480UL, 15790080UL, 268431360UL, 0UL, 122880UL, 2088960UL, 31580160UL, 536862720UL, 0UL, 245760UL, 4177920UL, 63160320UL, 1073725440UL, 0UL, 491520UL, 8355840UL, 126320640UL, 2147450880UL, 0UL, 983040UL, 16711680UL, 252641280UL, 4294901760UL, 0UL,
1966080UL, 33423360UL, 505282560UL, 4294836224UL, 0UL, 3932160UL, 66846720UL, 1010565120UL, 4294705152UL, 0UL, 7864320UL, 133693440UL, 2021130240UL, 4294443008UL, 0UL, 15728640UL, 267386880UL, 4042260480UL, 4293918720UL, 0UL, 31457280UL, 534773760UL, 3789553664UL, 4292870144UL, 0UL, 62914560UL, 1069547520UL, 3284140032UL, 4290772992UL, 0UL, 125829120UL, 2139095040UL,
2273312768UL, 4286578688UL, 0UL, 251658240UL, 4278190080UL, 251658240UL, 4278190080UL, 0UL, 503316480UL, 4261412864UL, 503316480UL, 4261412864UL, 0UL, 1006632960UL, 4227858432UL, 1006632960UL, 4227858432UL, 0UL, 2013265920UL, 4160749568UL, 2013265920UL, 4160749568UL, 0UL, 4026531840UL, 4026531840UL, 4026531840UL, 4026531840UL, 0UL, 3758096384UL, 3758096384UL, 3758096384UL, 3758096384UL,
0UL, 0UL, 3UL, 51UL, 771UL, 0UL, 0UL, 6UL, 102UL, 1542UL, 0UL, 0UL, 15UL, 255UL, 3855UL, 0UL, 0UL, 30UL, 510UL, 7710UL, 0UL, 0UL, 60UL, 1020UL, 15420UL, 0UL, 0UL, 120UL, 2040UL, 30840UL, 0UL, 0UL,
240UL, 4080UL, 61680UL, 0UL, 0UL, 480UL, 8160UL, 123360UL, 0UL, 0UL, 960UL, 16320UL, 246720UL, 0UL, 0UL, 1920UL, 32640UL, 493440UL, 0UL, 0UL, 3840UL, 65280UL, 986880UL, 0UL, 0UL, 7680UL, 130560UL, 1973760UL, 0UL, 0UL, 15360UL, 261120UL,
3947520UL, 0UL, 0UL, 30720UL, 522240UL, 7895040UL, 0UL, 0UL, 61440UL, 1044480UL, 15790080UL, 0UL, 0UL, 122880UL, 2088960UL, 31580160UL, 0UL, 0UL, 245760UL, 4177920UL, 63160320UL, 0UL, 0UL, 491520UL, 8355840UL, 126320640UL, 0UL, 0UL, 983040UL, 16711680UL, 252641280UL, 0UL,
0UL, 1966080UL, 33423360UL, 505282560UL, 0UL, 0UL, 3932160UL, 66846720UL, 1010565120UL, 0UL, 0UL, 7864320UL, 133693440UL, 2021130240UL, 0UL, 0UL, 15728640UL, 267386880UL, 4042260480UL, 0UL, 0UL, 31457280UL, 534773760UL, 3789553664UL, 0UL, 0UL, 62914560UL, 1069547520UL, 3284140032UL, 0UL, 0UL, 125829120UL,
2139095040UL, 2273312768UL, 0UL, 0UL, 251658240UL, 4278190080UL, 251658240UL, 0UL, 0UL, 503316480UL, 4261412864UL, 503316480UL, 0UL, 0UL, 1006632960UL, 4227858432UL, 1006632960UL, 0UL, 0UL, 2013265920UL, 4160749568UL, 2013265920UL, 0UL, 0UL, 4026531840UL, 4026531840UL, 4026531840UL, 0UL, 0UL, 3758096384UL, 3758096384UL, 3758096384UL,
0UL, 0UL, 0UL, 3UL, 51UL, 0UL, 0UL, 0UL, 6UL, 102UL, 0UL, 0UL, 0UL, 15UL, 255UL, 0UL, 0UL, 0UL, 30UL, 510UL, 0UL, 0UL, 0UL, 60UL, 1020UL, 0UL, 0UL, 0UL, 120UL, 2040UL, 0UL, 0UL,
0UL, 240UL, 4080UL, 0UL, 0UL, 0UL, 480UL, 8160UL, 0UL, 0UL, 0UL, 960UL, 16320UL, 0UL, 0UL, 0UL, 1920UL, 32640UL, 0UL, 0UL, 0UL, 3840UL, 65280UL, 0UL, 0UL, 0UL, 7680UL, 130560UL, 0UL, 0UL, 0UL, 15360UL,
261120UL, 0UL, 0UL, 0UL, 30720UL, 522240UL, 0UL, 0UL, 0UL, 61440UL, 1044480UL, 0UL, 0UL, 0UL, 122880UL, 2088960UL, 0UL, 0UL, 0UL, 245760UL, 4177920UL, 0UL, 0UL, 0UL, 491520UL, 8355840UL, 0UL, 0UL, 0UL, 983040UL, 16711680UL, 0UL,
0UL, 0UL, 1966080UL, 33423360UL, 0UL, 0UL, 0UL, 3932160UL, 66846720UL, 0UL, 0UL, 0UL, 7864320UL, 133693440UL, 0UL, 0UL, 0UL, 15728640UL, 267386880UL, 0UL, 0UL, 0UL, 31457280UL, 534773760UL, 0UL, 0UL, 0UL, 62914560UL, 1069547520UL, 0UL, 0UL, 0UL,
125829120UL, 2139095040UL, 0UL, 0UL, 0UL, 251658240UL, 4278190080UL, 0UL, 0UL, 0UL, 503316480UL, 4261412864UL, 0UL, 0UL, 0UL, 1006632960UL, 4227858432UL, 0UL, 0UL, 0UL, 2013265920UL, 4160749568UL, 0UL, 0UL, 0UL, 4026531840UL, 4026531840UL, 0UL, 0UL, 0UL, 3758096384UL, 3758096384UL,
0UL, 0UL, 0UL, 0UL, 3UL, 0UL, 0UL, 0UL, 0UL, 6UL, 0UL, 0UL, 0UL, 0UL, 15UL, 0UL, 0UL, 0UL, 0UL, 30UL, 0UL, 0UL, 0UL, 0UL, 60UL, 0UL, 0UL, 0UL, 0UL, 120UL, 0UL, 0UL,
0UL, 0UL, 240UL, 0UL, 0UL, 0UL, 0UL, 480UL, 0UL, 0UL, 0UL, 0UL, 960UL, 0UL, 0UL, 0UL, 0UL, 1920UL, 0UL, 0UL, 0UL, 0UL, 3840UL, 0UL, 0UL, 0UL, 0UL, 7680UL, 0UL, 0UL, 0UL, 0UL,
15360UL, 0UL, 0UL, 0UL, 0UL, 30720UL, 0UL, 0UL, 0UL, 0UL, 61440UL, 0UL, 0UL, 0UL, 0UL, 122880UL, 0UL, 0UL, 0UL, 0UL, 245760UL, 0UL, 0UL, 0UL, 0UL, 491520UL, 0UL, 0UL, 0UL, 0UL, 983040UL, 0UL,
0UL, 0UL, 0UL, 1966080UL, 0UL, 0UL, 0UL, 0UL, 3932160UL, 0UL, 0UL, 0UL, 0UL, 7864320UL, 0UL, 0UL, 0UL, 0UL, 15728640UL, 0UL, 0UL, 0UL, 0UL, 31457280UL, 0UL, 0UL, 0UL, 0UL, 62914560UL, 0UL, 0UL, 0UL,
0UL, 125829120UL, 0UL, 0UL, 0UL, 0UL, 251658240UL, 0UL, 0UL, 0UL, 0UL, 503316480UL, 0UL, 0UL, 0UL, 0UL, 1006632960UL, 0UL, 0UL, 0UL, 0UL, 2013265920UL, 0UL, 0UL, 0UL, 0UL, 4026531840UL, 0UL, 0UL, 0UL, 0UL, 3758096384UL,
1UL, 17UL, 257UL, 4369UL, 65537UL, 2UL, 34UL, 514UL, 8738UL, 131074UL, 4UL, 68UL, 1028UL, 17476UL, 262148UL, 8UL, 136UL, 2056UL, 34952UL, 524296UL, 16UL, 272UL, 4112UL, 69904UL, 1048592UL, 32UL, 544UL, 8224UL, 139808UL, 2097184UL, 64UL, 1088UL,
16448UL, 279616UL, 4194368UL, 128UL, 2176UL, 32896UL, 559232UL, 8388736UL, 256UL, 4352UL, 65792UL, 1118464UL, 16777472UL, 512UL, 8704UL, 131584UL, 2236928UL, 33554944UL, 1024UL, 17408UL, 263168UL, 4473856UL, 67109888UL, 2048UL, 34816UL, 526336UL, 8947712UL, 134219776UL, 4096UL, 69632UL, 1052672UL, 17895424UL,
268439552UL, 8192UL, 139264UL, 2105344UL, 35790848UL, 536879104UL, 16384UL, 278528UL, 4210688UL, 71581696UL, 1073758208UL, 32768UL, 557056UL, 8421376UL, 143163392UL, 2147516416UL, 65536UL, 1114112UL, 16842752UL, 286326784UL, 65536UL, 131072UL, 2228224UL, 33685504UL, 572653568UL, 131072UL, 262144UL, 4456448UL, 67371008UL, 1145307136UL, 262144UL, 524288UL,
8912896UL, 134742016UL, 2290614272UL, 524288UL, 1048576UL, 17825792UL, 269484032UL, 286261248UL, 1048576UL, 2097152UL, 35651584UL, 538968064UL, 572522496UL, 2097152UL, 4194304UL, 71303168UL, 1077936128UL, 1145044992UL, 4194304UL, 8388608UL, 142606336UL, 2155872256UL, 2290089984UL, 8388608UL, 16777216UL, 285212672UL, 16777216UL, 285212672UL, 16777216UL, 33554432UL, 570425344UL, 33554432UL,
570425344UL, 33554432UL, 67108864UL, 1140850688UL, 67108864UL, 1140850688UL, 67108864UL, 134217728UL, 2281701376UL, 134217728UL, 2281701376UL, 134217728UL, 268435456UL, 268435456UL, 268435456UL, 268435456UL, 268435456UL, 536870912UL, 536870912UL, 536870912UL, 536870912UL, 536870912UL, 1073741824UL, 1073741824UL, 1073741824UL, 1073741824UL, 1073741824UL, 2147483648UL, 2147483648UL, 2147483648UL, 2147483648UL, 2147483648UL,
},
{
85009117UL, 335741939UL, 1412632518UL, 386859243UL, 1741437244UL, 152139416UL, 403047142UL, 2556825231UL, 505087203UL, 4287193174UL, 335609039UL, 336528191UL, 1425998811UL, 456920088UL, 2832198590UL, 724748988UL, 3625845630UL, 1509824181UL, 3330088197UL, 2710488401UL, 1431742057UL, 1077674236UL, 1140592489UL, 2096905276UL, 3007294393UL, 2863484114UL, 1081606648UL, 1207443154UL, 972585080UL, 2793363314UL, 1432000919UL, 1089470704UL,
1341132452UL, 3019109363UL, 2362285522UL, 1790260014UL, 2178941408UL, 2682264904UL, 1743251430UL, 429603751UL, 359294556UL, 62915520UL, 1069562512UL, 3486502860UL, 859207501UL, 3939814584UL, 125831040UL, 2139125024UL, 2678038424UL, 1718415002UL, 363436400UL, 251662080UL, 4278250048UL, 1061109552UL, 3436830004UL, 3948098272UL, 503324160UL, 4261532800UL, 2122219104UL, 2310257256UL, 380003776UL, 1006648320UL, 4228098304UL, 4244438208UL,
3278337232UL, 3981233024UL, 2013296640UL, 4161229312UL, 4193909120UL, 2530142624UL, 446273280UL, 4026593280UL, 4027491328UL, 871625472UL, 4254978880UL, 4113772032UL, 3758219264UL, 3760015360UL, 2011686400UL, 3946555008UL, 711351296UL, 3221471232UL, 3225063424UL, 4291808256UL, 108481792UL, 2496444416UL, 2147975168UL, 2155159552UL, 4020213760UL, 485399040UL, 3919147008UL, 983040UL, 15351808UL, 255799296UL, 3923588096UL, 322101248UL,
1966080UL, 299139072UL, 511598592UL, 3283773440UL, 3865427968UL, 3932160UL, 4087939072UL, 1023197184UL, 1467273216UL, 214663168UL, 7864320UL, 4149346304UL, 2046394368UL, 3202981888UL, 3650551808UL, 3236954112UL, 1050935296UL, 871563264UL, 2916302848UL, 1932394496UL, 2447376384UL, 1833435136UL, 2011561984UL, 2342944768UL, 643563520UL, 868220928UL, 177209344UL, 4291559424UL, 122486784UL, 2360868864UL, 2004877312UL, 85983232UL,
4019716096UL, 3734634496UL, 3647995904UL, 1056964608UL, 3661627392UL, 254803968UL, 2905866240UL, 1658847232UL, 2113929216UL, 3028287488UL, 3730833408UL, 2322071552UL, 3586129920UL, 4227858432UL, 1761607680UL, 2092957696UL, 80740352UL, 2071986176UL, 4160749568UL, 3523215360UL, 964689920UL, 429916160UL, 3875536896UL, 4026531840UL, 2751463424UL, 1929379840UL, 4081057792UL, 503316480UL, 3758096384UL, 2281701376UL, 4127195136UL, 3397386240UL,
1316635UL, 85009117UL, 335741939UL, 1412632518UL, 386859243UL, 1580547UL, 152139416UL, 403047142UL, 2556825231UL, 505087203UL, 1317672UL, 335609039UL, 336528191UL, 1425998811UL, 456920088UL, 1574501UL, 724748988UL, 3625845630UL, 1509824181UL, 3330088197UL, 15612UL, 1431742057UL, 1077674236UL, 1140592489UL, 2096905276UL, 31224UL, 2863484114UL, 1081606648UL, 1207443154UL, 972585080UL, 62451UL, 1432000919UL,
1089470704UL, 1341132452UL, 3019109363UL, 124902UL, 1790260014UL, 2178941408UL, 2682264904UL, 1743251430UL, 249804UL, 359294556UL, 62915520UL, 1069562512UL, 3486502860UL, 499608UL, 3939814584UL, 125831040UL, 2139125024UL, 2678038424UL, 999216UL, 363436400UL, 251662080UL, 4278250048UL, 1061109552UL, 3223223904UL, 3948098272UL, 503324160UL, 4261532800UL, 2122219104UL, 1077738688UL, 380003776UL, 1006648320UL, 4228098304UL,
4244438208UL, 1081735552UL, 3981233024UL, 2013296640UL, 4161229312UL, 4193909120UL, 1089729280UL, 446273280UL, 4026593280UL, 4027491328UL, 871625472UL, 2179458560UL, 4113772032UL, 3758219264UL, 3760015360UL, 2011686400UL, 63949824UL, 711351296UL, 3221471232UL, 3225063424UL, 4291808256UL, 127899648UL, 2496444416UL, 2147975168UL, 2155159552UL, 4020213760UL, 255799296UL, 3919147008UL, 983040UL, 15351808UL, 255799296UL, 3732824064UL,
322101248UL, 1966080UL, 299139072UL, 511598592UL, 2096939008UL, 3865427968UL, 3932160UL, 4087939072UL, 1023197184UL, 972652544UL, 214663168UL, 7864320UL, 4149346304UL, 2046394368UL, 3019046912UL, 3650551808UL, 3236954112UL, 1050935296UL, 871563264UL, 1743126528UL, 1932394496UL, 2447376384UL, 1833435136UL, 2011561984UL, 3486253056UL, 643563520UL, 868220928UL, 177209344UL, 4291559424UL, 2677538816UL, 2360868864UL, 2004877312UL,
85983232UL, 4019716096UL, 1060110336UL, 3647995904UL, 1056964608UL, 3661627392UL, 254803968UL, 3193962496UL, 1658847232UL, 2113929216UL, 3028287488UL, 3730833408UL, 3166699520UL, 3586129920UL, 4227858432UL, 1761607680UL, 2092957696UL, 3112173568UL, 2071986176UL, 4160749568UL, 3523215360UL, 964689920UL, 1929379840UL, 3875536896UL, 4026531840UL, 2751463424UL, 1929379840UL, 4127195136UL, 503316480UL, 3758096384UL, 2281701376UL, 4127195136UL,
332854UL, 1316635UL, 85009117UL, 335741939UL, 1412632518UL, 596079UL, 1580547UL, 152139416UL, 403047142UL, 2556825231UL, 1316075UL, 1317672UL, 335609039UL, 336528191UL, 1425998811UL, 2824661UL, 1574501UL, 724748988UL, 3625845630UL, 1509824181UL, 5571497UL, 15612UL, 1431742057UL, 1077674236UL, 1140592489UL, 11142994UL, 31224UL, 2863484114UL, 1081606648UL, 1207443154UL, 22285988UL, 62451UL,
1432000919UL, 1089470704UL, 1341132452UL, 44571976UL, 124902UL, 1790260014UL, 2178941408UL, 2682264904UL, 89143952UL, 249804UL, 359294556UL, 62915520UL, 1069562512UL, 178287904UL, 499608UL, 3939814584UL, 125831040UL, 2139125024UL, 356575808UL, 999216UL, 363436400UL, 251662080UL, 4278250048UL, 713151616UL, 3223223904UL, 3948098272UL, 503324160UL, 4261532800UL, 1426303232UL, 1077738688UL, 380003776UL, 1006648320UL,
4228098304UL, 2852606464UL, 1081735552UL, 3981233024UL, 2013296640UL, 4161229312UL, 1410245632UL, 1089729280UL, 446273280UL, 4026593280UL, 4027491328UL, 1746749440UL, 2179458560UL, 4113772032UL, 3758219264UL, 3760015360UL, 272273408UL, 63949824UL, 711351296UL, 3221471232UL, 3225063424UL, 3765772288UL, 127899648UL, 2496444416UL, 2147975168UL, 2155159552UL, 15351808UL, 255799296UL, 3919147008UL, 983040UL, 15351808UL, 3251929088UL,
3732824064UL, 322101248UL, 1966080UL, 299139072UL, 1135149056UL, 2096939008UL, 3865427968UL, 3932160UL, 4087939072UL, 1196556288UL, 972652544UL, 214663168UL, 7864320UL, 4149346304UL, 1319370752UL, 3019046912UL, 3650551808UL, 3236954112UL, 1050935296UL, 2638741504UL, 1743126528UL, 1932394496UL, 2447376384UL, 1833435136UL, 982515712UL, 3486253056UL, 643563520UL, 868220928UL, 177209344UL, 1965031424UL, 2677538816UL, 2360868864UL,
2004877312UL, 85983232UL, 3930062848UL, 1060110336UL, 3647995904UL, 1056964608UL, 3661627392UL, 3565158400UL, 3193962496UL, 1658847232UL, 2113929216UL, 3028287488UL, 2835349504UL, 3166699520UL, 3586129920UL, 4227858432UL, 1761607680UL, 1375731712UL, 3112173568UL, 2071986176UL, 4160749568UL, 3523215360UL, 2751463424UL, 1929379840UL, 3875536896UL, 4026531840UL, 2751463424UL, 2281701376UL, 4127195136UL, 503316480UL, 3758096384UL, 2281701376UL,
5123UL, 332854UL, 1316635UL, 85009117UL, 335741939UL, 6150UL, 596079UL, 1580547UL, 152139416UL, 403047142UL, 5135UL, 1316075UL, 1317672UL, 335609039UL, 336528191UL, 6174UL, 2824661UL, 1574501UL, 724748988UL, 3625845630UL, 60UL, 5571497UL, 15612UL, 1431742057UL, 1077674236UL, 120UL, 11142994UL, 31224UL, 2863484114UL, 1081606648UL, 240UL, 22285988UL,
62451UL, 1432000919UL, 1089470704UL, 480UL, 44571976UL, 124902UL, 1790260014UL, 2178941408UL, 960UL, 89143952UL, 249804UL, 359294556UL, 62915520UL, 1920UL, 178287904UL, 499608UL, 3939814584UL, 125831040UL, 3840UL, 356575808UL, 999216UL, 363436400UL, 251662080UL, 7680UL, 713151616UL, 3223223904UL, 3948098272UL, 503324160UL, 15360UL, 1426303232UL, 1077738688UL, 380003776UL,
1006648320UL, 30720UL, 2852606464UL, 1081735552UL, 3981233024UL, 2013296640UL, 61440UL, 1410245632UL, 1089729280UL, 446273280UL, 4026593280UL, 122880UL, 1746749440UL, 2179458560UL, 4113772032UL, 3758219264UL, 245760UL, 272273408UL, 63949824UL, 711351296UL, 3221471232UL, 491520UL, 3765772288UL, 127899648UL, 2496444416UL, 2147975168UL, 983040UL, 15351808UL, 255799296UL, 3919147008UL, 983040UL, 3223191552UL,
3251929088UL, 3732824064UL, 322101248UL, 1966080UL, 1077673984UL, 1135149056UL, 2096939008UL, 3865427968UL, 3932160UL, 1081606144UL, 1196556288UL, 972652544UL, 214663168UL, 7864320UL, 1089470464UL, 1319370752UL, 3019046912UL, 3650551808UL, 3236954112UL, 2178940928UL, 2638741504UL, 1743126528UL, 1932394496UL, 2447376384UL, 62914560UL, 982515712UL, 3486253056UL, 643563520UL, 868220928UL, 125829120UL, 1965031424UL, 2677538816UL,
2360868864UL, 2004877312UL, 251658240UL, 3930062848UL, 1060110336UL, 3647995904UL, 1056964608UL, 503316480UL, 3565158400UL, 3193962496UL, 1658847232UL, 2113929216UL, 1006632960UL, 2835349504UL, 3166699520UL, 3586129920UL, 4227858432UL, 2013265920UL, 1375731712UL, 3112173568UL, 2071986176UL, 4160749568UL, 4026531840UL, 2751463424UL, 1929379840UL, 3875536896UL, 4026531840UL, 3758096384UL, 2281701376UL, 4127195136UL, 503316480UL, 3758096384UL,
201392209UL, 3423671362UL, 218366296UL, 3713336838UL, 206572594UL, 402785186UL, 2552372100UL, 436928947UL, 3130605370UL, 463476848UL, 262468UL, 4461835UL, 68158800UL, 1158700908UL, 20971524UL, 524680UL, 8919318UL, 136513955UL, 2316537326UL, 25165852UL, 3222274064UL, 3239051564UL, 3494187077UL, 3558090985UL, 3221225500UL, 2149580832UL, 2183135832UL, 2693406858UL, 2821214674UL, 2147483704UL, 4194368UL, 71304368UL,
1091846420UL, 1347462055UL, 64UL, 8388736UL, 142608736UL, 2183692840UL, 2694924110UL, 3221225600UL, 16777472UL, 285217472UL, 72418384UL, 1094880924UL, 1342177536UL, 33554944UL, 570434944UL, 144836768UL, 2189761848UL, 2684355072UL, 67109888UL, 1140869888UL, 289673536UL, 84556400UL, 1073742848UL, 134219776UL, 2281739776UL, 579347072UL, 169112800UL, 2147485696UL, 268439552UL, 268512256UL, 1158694144UL, 69790144UL,
4096UL, 536879104UL, 537024512UL, 2317388288UL, 3360805760UL, 8192UL, 1073758208UL, 1074049024UL, 339809280UL, 1352902400UL, 16384UL, 2147516416UL, 2148098048UL, 3900844032UL, 1632062976UL, 32768UL, 65536UL, 1228800UL, 17059840UL, 311335936UL, 65536UL, 131072UL, 2457600UL, 34119680UL, 622671872UL, 131072UL, 262144UL, 4915200UL, 68239360UL, 1245343744UL, 262144UL, 524288UL,
9830400UL, 136478720UL, 2490687488UL, 524288UL, 1048576UL, 288096256UL, 272957440UL, 954843136UL, 3222274048UL, 2097152UL, 3797417984UL, 545914880UL, 2983428096UL, 2149580800UL, 4194304UL, 78643200UL, 1091829760UL, 2745630720UL, 4194304UL, 3229614080UL, 3378511872UL, 1109917696UL, 2270035968UL, 8388608UL, 1358954496UL, 1119879168UL, 1414529024UL, 513540096UL, 16777216UL, 2717908992UL, 2239758336UL, 2829058048UL,
1027080192UL, 33554432UL, 1140850688UL, 184549376UL, 1363148800UL, 2054160384UL, 3288334336UL, 2281701376UL, 369098752UL, 2726297600UL, 4108320768UL, 2281701376UL, 268435456UL, 738197504UL, 2231369728UL, 968884224UL, 3959422976UL, 536870912UL, 1476395008UL, 167772160UL, 3011510272UL, 3355443200UL, 1073741824UL, 2952790016UL, 335544320UL, 1728053248UL, 2147483648UL, 2147483648UL, 1610612736UL, 3892314112UL, 503316480UL, 0UL,
},
{
1939838472UL, 1412147404UL, 166205219UL, 1757484276UL, 2905930693UL, 2345662040UL, 2845657161UL, 253454719UL, 2661974169UL, 303781080UL, 4075331504UL, 31014156UL, 244538930UL, 3752264221UL, 992575155UL, 219309525UL, 246620060UL, 215640989UL, 4125020723UL, 2016731730UL, 3236558869UL, 297169276UL, 3293566751UL, 1867504216UL, 210423272UL, 2531663658UL, 499723753UL, 1730625896UL, 189236880UL, 3388575408UL, 2433358422UL, 1368961148UL,
3134096848UL, 2827836415UL, 3888822753UL, 4172043647UL, 3379360748UL, 2651760955UL, 1345081091UL, 627692776UL, 189423917UL, 1927379456UL, 4004336944UL, 2995932065UL, 1882016234UL, 2551113616UL, 1576396048UL, 1299792730UL, 2151240795UL, 2154814108UL, 4292139924UL, 3555849728UL, 943986992UL, 3169912733UL, 2631635779UL, 3478094562UL, 1285558544UL, 3716074330UL, 2780749859UL, 3911106510UL, 4175656994UL, 1731832828UL, 1275401375UL, 937322456UL,
3802094750UL, 1145506936UL, 1008905193UL, 1718801768UL, 645739137UL, 1356219146UL, 827886816UL, 1722154800UL, 2242776733UL, 754630810UL, 772070504UL, 249481170UL, 2608123425UL, 2087201889UL, 3200968096UL, 3292110026UL, 841433255UL, 477543427UL, 1878882709UL, 705347364UL, 4003860146UL, 3194913138UL, 2616490007UL, 357561212UL, 2446098297UL, 2955680594UL, 2512991743UL, 637464579UL, 1209132455UL, 1341312804UL, 612108672UL, 2455017713UL,
1749147666UL, 4020226825UL, 2873924220UL, 499405095UL, 1837614076UL, 1227604028UL, 714577577UL, 165950208UL, 442290261UL, 489077752UL, 216760440UL, 42151250UL, 426862080UL, 2810242474UL, 4112075489UL, 3514761468UL, 4101921371UL, 982512636UL, 500792667UL, 4286077681UL, 198050301UL, 1858712743UL, 2913642493UL, 3547545255UL, 3981929169UL, 2944140287UL, 2286578015UL, 3422343167UL, 1239123295UL, 2026367394UL, 3269986302UL, 3028402878UL,
2709637886UL, 1096011710UL, 294584132UL, 3086749695UL, 3324400975UL, 1164394495UL, 4290155855UL, 543687304UL, 4008517630UL, 836370334UL, 1876426750UL, 2362048414UL, 3578325264UL, 3221487612UL, 2671154748UL, 3395518460UL, 2018383420UL, 2131029536UL, 2165829624UL, 697661816UL, 1336049656UL, 3309365624UL, 4259639360UL, 3423548400UL, 2416417776UL, 1633698800UL, 1630071792UL, 41950336UL, 3423478496UL, 2885608160UL, 3943744224UL, 677380832UL,
4179285363UL, 1939838472UL, 1412147404UL, 166205219UL, 1757484276UL, 3838244595UL, 2345662040UL, 2845657161UL, 253454719UL, 2661974169UL, 138737288UL, 4075331504UL, 31014156UL, 244538930UL, 3752264221UL, 1503392345UL, 219309525UL, 246620060UL, 215640989UL, 4125020723UL, 1759481152UL, 3236558869UL, 297169276UL, 3293566751UL, 1867504216UL, 3898070400UL, 2531663658UL, 499723753UL, 1730625896UL, 189236880UL, 2610231010UL, 2433358422UL,
1368961148UL, 3134096848UL, 2827836415UL, 3903474593UL, 4172043647UL, 3379360748UL, 2651760955UL, 1345081091UL, 1267864331UL, 189423917UL, 1927379456UL, 4004336944UL, 2995932065UL, 3452816347UL, 2551113616UL, 1576396048UL, 1299792730UL, 2151240795UL, 1222520631UL, 4292139924UL, 3555849728UL, 943986992UL, 3169912733UL, 3260130211UL, 3478094562UL, 1285558544UL, 3716074330UL, 2780749859UL, 3039362306UL, 4175656994UL, 1731832828UL, 1275401375UL,
937322456UL, 3236754932UL, 1145506936UL, 1008905193UL, 1718801768UL, 645739137UL, 1358079399UL, 827886816UL, 1722154800UL, 2242776733UL, 754630810UL, 1748663943UL, 249481170UL, 2608123425UL, 2087201889UL, 3200968096UL, 698076610UL, 841433255UL, 477543427UL, 1878882709UL, 705347364UL, 3692794996UL, 3194913138UL, 2616490007UL, 357561212UL, 2446098297UL, 2771068186UL, 2512991743UL, 637464579UL, 1209132455UL, 1341312804UL, 27937268UL,
2455017713UL, 1749147666UL, 4020226825UL, 2873924220UL, 1673040956UL, 1837614076UL, 1227604028UL, 714577577UL, 165950208UL, 528340088UL, 489077752UL, 216760440UL, 42151250UL, 426862080UL, 1646215396UL, 4112075489UL, 3514761468UL, 4101921371UL, 982512636UL, 2095821304UL, 4286077681UL, 198050301UL, 1858712743UL, 2913642493UL, 277300160UL, 3981929169UL, 2944140287UL, 2286578015UL, 3422343167UL, 1178044288UL, 2026367394UL, 3269986302UL,
3028402878UL, 2709637886UL, 2234191616UL, 294584132UL, 3086749695UL, 3324400975UL, 1164394495UL, 136978944UL, 543687304UL, 4008517630UL, 836370334UL, 1876426750UL, 3275253760UL, 3578325264UL, 3221487612UL, 2671154748UL, 3395518460UL, 3942394880UL, 2131029536UL, 2165829624UL, 697661816UL, 1336049656UL, 3265045504UL, 4259639360UL, 3423548400UL, 2416417776UL, 1633698800UL, 3943712768UL, 41950336UL, 3423478496UL, 2885608160UL, 3943744224UL,
2293593009UL, 4179285363UL, 1939838472UL, 1412147404UL, 166205219UL, 715714152UL, 3838244595UL, 2345662040UL, 2845657161UL, 253454719UL, 3758048260UL, 138737288UL, 4075331504UL, 31014156UL, 244538930UL, 370671650UL, 1503392345UL, 219309525UL, 246620060UL, 215640989UL, 2219162331UL, 1759481152UL, 3236558869UL, 297169276UL, 3293566751UL, 135243402UL, 3898070400UL, 2531663658UL, 499723753UL, 1730625896UL, 3142293713UL, 2610231010UL,
2433358422UL, 1368961148UL, 3134096848UL, 486949791UL, 3903474593UL, 4172043647UL, 3379360748UL, 2651760955UL, 3172880550UL, 1267864331UL, 189423917UL, 1927379456UL, 4004336944UL, 191463910UL, 3452816347UL, 2551113616UL, 1576396048UL, 1299792730UL, 4411574UL, 1222520631UL, 4292139924UL, 3555849728UL, 943986992UL, 3073348038UL, 3260130211UL, 3478094562UL, 1285558544UL, 3716074330UL, 3098363790UL, 3039362306UL, 4175656994UL, 1731832828UL,
1275401375UL, 468159532UL, 3236754932UL, 1145506936UL, 1008905193UL, 1718801768UL, 1092964081UL, 1358079399UL, 827886816UL, 1722154800UL, 2242776733UL, 53128947UL, 1748663943UL, 249481170UL, 2608123425UL, 2087201889UL, 1960144614UL, 698076610UL, 841433255UL, 477543427UL, 1878882709UL, 1505419004UL, 3692794996UL, 3194913138UL, 2616490007UL, 357561212UL, 2823143358UL, 2771068186UL, 2512991743UL, 637464579UL, 1209132455UL, 1991737212UL,
27937268UL, 2455017713UL, 1749147666UL, 4020226825UL, 2907896812UL, 1673040956UL, 1837614076UL, 1227604028UL, 714577577UL, 3633969112UL, 528340088UL, 489077752UL, 216760440UL, 42151250UL, 2886728356UL, 1646215396UL, 4112075489UL, 3514761468UL, 4101921371UL, 3507686008UL, 2095821304UL, 4286077681UL, 198050301UL, 1858712743UL, 1463806912UL, 277300160UL, 3981929169UL, 2944140287UL, 2286578015UL, 4137888640UL, 1178044288UL, 2026367394UL,
3269986302UL, 3028402878UL, 1276820224UL, 2234191616UL, 294584132UL, 3086749695UL, 3324400975UL, 4274031104UL, 136978944UL, 543687304UL, 4008517630UL, 836370334UL, 2978609152UL, 3275253760UL, 3578325264UL, 3221487612UL, 2671154748UL, 2296777728UL, 3942394880UL, 2131029536UL, 2165829624UL, 697661816UL, 1086645248UL, 3265045504UL, 4259639360UL, 3423548400UL, 2416417776UL, 2295121920UL, 3943712768UL, 41950336UL, 3423478496UL, 2885608160UL,
3290486993UL, 2293593009UL, 4179285363UL, 1939838472UL, 1412147404UL, 3718742914UL, 715714152UL, 3838244595UL, 2345662040UL, 2845657161UL, 3251034248UL, 3758048260UL, 138737288UL, 4075331504UL, 31014156UL, 2257801369UL, 370671650UL, 1503392345UL, 219309525UL, 246620060UL, 1375177854UL, 2219162331UL, 1759481152UL, 3236558869UL, 297169276UL, 2981812236UL, 135243402UL, 3898070400UL, 2531663658UL, 499723753UL, 1103465850UL, 3142293713UL,
2610231010UL, 2433358422UL, 1368961148UL, 2570001060UL, 486949791UL, 3903474593UL, 4172043647UL, 3379360748UL, 1922171925UL, 3172880550UL, 1267864331UL, 189423917UL, 1927379456UL, 1359812359UL, 191463910UL, 3452816347UL, 2551113616UL, 1576396048UL, 2518549525UL, 4411574UL, 1222520631UL, 4292139924UL, 3555849728UL, 949028615UL, 3073348038UL, 3260130211UL, 3478094562UL, 1285558544UL, 4113039486UL, 3098363790UL, 3039362306UL, 4175656994UL,
1731832828UL, 1827471372UL, 468159532UL, 3236754932UL, 1145506936UL, 1008905193UL, 1626341859UL, 1092964081UL, 1358079399UL, 827886816UL, 1722154800UL, 1069547583UL, 53128947UL, 1748663943UL, 249481170UL, 2608123425UL, 3162506114UL, 1960144614UL, 698076610UL, 841433255UL, 477543427UL, 3641706484UL, 1505419004UL, 3692794996UL, 3194913138UL, 2616490007UL, 3623882586UL, 2823143358UL, 2771068186UL, 2512991743UL, 637464579UL, 16785012UL,
1991737212UL, 27937268UL, 2455017713UL, 1749147666UL, 2348825660UL, 2907896812UL, 1673040956UL, 1837614076UL, 1227604028UL, 2579527800UL, 3633969112UL, 528340088UL, 489077752UL, 216760440UL, 3628134628UL, 2886728356UL, 1646215396UL, 4112075489UL, 3514761468UL, 1602085368UL, 3507686008UL, 2095821304UL, 4286077681UL, 198050301UL, 2501362624UL, 1463806912UL, 277300160UL, 3981929169UL, 2944140287UL, 4112467840UL, 4137888640UL, 1178044288UL,
2026367394UL, 3269986302UL, 3356184320UL, 1276820224UL, 2234191616UL, 294584132UL, 3086749695UL, 366387712UL, 4274031104UL, 136978944UL, 543687304UL, 4008517630UL, 1006135296UL, 2978609152UL, 3275253760UL, 3578325264UL, 3221487612UL, 3104844800UL, 2296777728UL, 3942394880UL, 2131029536UL, 2165829624UL, 1874371584UL, 1086645248UL, 3265045504UL, 4259639360UL, 3423548400UL, 2975352832UL, 2295121920UL, 3943712768UL, 41950336UL, 3423478496UL,
989898496UL, 3410688577UL, 2331788830UL, 3546482013UL, 813828841UL, 1865093068UL, 3265457506UL, 3795669738UL, 2119696024UL, 4285651426UL, 3333834629UL, 3451487261UL, 2090324595UL, 1816963648UL, 932961512UL, 2470761029UL, 3401764108UL, 3421619354UL, 4199624502UL, 589386372UL, 879396240UL, 3372470254UL, 2693109296UL, 2424215996UL, 38442268UL, 1882087724UL, 171397600UL, 2024561281UL, 183095586UL, 3282207272UL, 3402177296UL, 1859195498UL,
413109947UL, 2839537944UL, 1632143648UL, 3742715856UL, 388696500UL, 1748703733UL, 3563198567UL, 3826785440UL, 2896086528UL, 3989037829UL, 1478787788UL, 1390277813UL, 2123320736UL, 3416516800UL, 2056564203UL, 2584895011UL, 1605192736UL, 2475623616UL, 3856499712UL, 3439657984UL, 708088129UL, 1501395566UL, 1302184960UL, 1360092352UL, 1645630430UL, 1425230387UL, 3369488824UL, 2979863936UL, 869212432UL, 150548847UL, 1097557362UL, 655939640UL,
316553344UL, 3761918508UL, 3958338094UL, 141744600UL, 1412214640UL, 1859689984UL, 3200680981UL, 3883058679UL, 999801880UL, 3946079738UL, 1876072704UL, 194381849UL, 2177533995UL, 1584707624UL, 3053768410UL, 2593051904UL, 3458076673UL, 4047442835UL, 3545972808UL, 3441793178UL, 194975744UL, 1731731470UL, 4168755162UL, 2628944732UL, 2125675784UL, 3119906816UL, 960774145UL, 2646626078UL, 2152793157UL, 3049156634UL, 672464896UL, 3046932493UL,
3700727536UL, 2152335477UL, 575986696UL, 671940608UL, 2208366608UL, 1454456125UL, 937760016UL, 4103979069UL, 2737668096UL, 1179779104UL, 1030912634UL, 1041902112UL, 2032909434UL, 2274230272UL, 2089025605UL, 3050632421UL, 2428784965UL, 140658149UL, 4254138368UL, 1745354889UL, 711584249UL, 2746523017UL, 2551006457UL, 1100808192UL, 1494221073UL, 3422999489UL, 2696954129UL, 976716737UL, 2653421568UL, 3806331426UL, 3690047362UL, 1481392674UL,
3817015170UL, 2353004544UL, 286262340UL, 2300534532UL, 4206449732UL, 15339268UL, 2894069760UL, 488376456UL, 1489927688UL, 1196583048UL, 652746248UL, 2214592512UL, 69904UL, 1006205200UL, 2322628880UL, 1229515024UL, 2617245696UL, 3423527456UL, 1964953120UL, 4260938272UL, 386199072UL, 1744830464UL, 1342444608UL, 1069330496UL, 2138592320UL, 3185897536UL, 1073741824UL, 1342493824UL, 3780942976UL, 1771066496UL, 2189433984UL, 2147483648UL,
},
{
1804684571UL, 2106089606UL, 1533056158UL, 2870216110UL, 3618155659UL, 3789871366UL, 4246691682UL, 3667072763UL, 1212241769UL, 3152390668UL, 2973497449UL, 2958641966UL, 2088805328UL, 717518631UL, 2401090860UL, 3606967204UL, 952637656UL, 59827581UL, 1291486682UL, 1499453515UL, 2053994857UL, 563998083UL, 4094000396UL, 1163546899UL, 1003843565UL, 654565639UL, 1070907026UL, 4217851863UL, 426034251UL, 1721352737UL, 278404469UL, 3899800390UL,
1063362170UL, 1162348262UL, 3153545093UL, 3249996223UL, 186674553UL, 2616406148UL, 3137968354UL, 1282784965UL, 1495068058UL, 3033760361UL, 2278144523UL, 3192245769UL, 719586342UL, 2602548287UL, 3386583150UL, 355354345UL, 3252815848UL, 2178056037UL, 2283016801UL, 3005955037UL, 3340254490UL, 802791670UL, 251122316UL, 3705188626UL, 1252262272UL, 3989036796UL, 3527490452UL, 2047131255UL, 1447170583UL, 3373930285UL, 2895037457UL, 209341805UL,
1820357643UL, 3712392731UL, 685796521UL, 1322920440UL, 814388470UL, 1357857147UL, 434430265UL, 2650681935UL, 1371566728UL, 58783716UL, 2273435933UL, 3498513198UL, 792571900UL, 1447808772UL, 3513385860UL, 99175889UL, 1105434360UL, 1484146625UL, 3327194068UL, 242672513UL, 3552105593UL, 1425844616UL, 2871928454UL, 1124633561UL, 607610433UL, 2130018608UL, 1610235673UL, 2844230432UL, 2748082340UL, 994392866UL, 450823250UL, 2912535126UL,
2574390988UL, 3974009252UL, 78696582UL, 649682891UL, 3980917176UL, 3221419689UL, 960695436UL, 729221508UL, 358358845UL, 3392407691UL, 472711005UL, 295914899UL, 3005191796UL, 3078521977UL, 3370011868UL, 509135340UL, 1965939519UL, 2086465877UL, 2457949822UL, 1324152522UL, 762289386UL, 3618693997UL, 233730715UL, 2873984650UL, 31168606UL, 3367142977UL, 2851851305UL, 3251660053UL, 4209768406UL, 3298190175UL, 901235185UL, 1564391510UL,
2352686527UL, 1008150482UL, 578573310UL, 3462447127UL, 2482873876UL, 1790221257UL, 2255375608UL, 2335345651UL, 1381450613UL, 2866805101UL, 1495073163UL, 519905259UL, 3184556473UL, 1076378339UL, 2692926127UL, 970097715UL, 4013407916UL, 4014350363UL, 2476927059UL, 1989070516UL, 2640060069UL, 1987784589UL, 1880989003UL, 3861138803UL, 451743296UL, 1987067871UL, 1975657871UL, 3397816882UL, 2309900530UL, 4108425851UL, 4063867233UL, 3319482186UL,
2621772886UL, 1804684571UL, 2106089606UL, 1533056158UL, 2870216110UL, 611557097UL, 3789871366UL, 4246691682UL, 3667072763UL, 1212241769UL, 3389551988UL, 2973497449UL, 2958641966UL, 2088805328UL, 717518631UL, 2460955430UL, 3606967204UL, 952637656UL, 59827581UL, 1291486682UL, 3531087304UL, 2053994857UL, 563998083UL, 4094000396UL, 1163546899UL, 1242934125UL, 654565639UL, 1070907026UL, 4217851863UL, 426034251UL, 3034416129UL, 278404469UL,
3899800390UL, 1063362170UL, 1162348262UL, 4258714417UL, 3249996223UL, 186674553UL, 2616406148UL, 3137968354UL, 639885806UL, 1495068058UL, 3033760361UL, 2278144523UL, 3192245769UL, 4159910300UL, 2602548287UL, 3386583150UL, 355354345UL, 3252815848UL, 1555885880UL, 2283016801UL, 3005955037UL, 3340254490UL, 802791670UL, 2948774612UL, 3705188626UL, 1252262272UL, 3989036796UL, 3527490452UL, 2107826711UL, 1447170583UL, 3373930285UL, 2895037457UL,
209341805UL, 3763367196UL, 3712392731UL, 685796521UL, 1322920440UL, 814388470UL, 1986168339UL, 434430265UL, 2650681935UL, 1371566728UL, 58783716UL, 1423189187UL, 3498513198UL, 792571900UL, 1447808772UL, 3513385860UL, 315969823UL, 1105434360UL, 1484146625UL, 3327194068UL, 242672513UL, 3336228275UL, 1425844616UL, 2871928454UL, 1124633561UL, 607610433UL, 1762052458UL, 1610235673UL, 2844230432UL, 2748082340UL, 994392866UL, 3771702243UL,
2912535126UL, 2574390988UL, 3974009252UL, 78696582UL, 1626628844UL, 3980917176UL, 3221419689UL, 960695436UL, 729221508UL, 382092233UL, 3392407691UL, 472711005UL, 295914899UL, 3005191796UL, 514297204UL, 3370011868UL, 509135340UL, 1965939519UL, 2086465877UL, 3975975091UL, 1324152522UL, 762289386UL, 3618693997UL, 233730715UL, 455322516UL, 31168606UL, 3367142977UL, 2851851305UL, 3251660053UL, 3952189603UL, 3298190175UL, 901235185UL,
1564391510UL, 2352686527UL, 826181452UL, 578573310UL, 3462447127UL, 2482873876UL, 1790221257UL, 1529242773UL, 2335345651UL, 1381450613UL, 2866805101UL, 1495073163UL, 877718651UL, 3184556473UL, 1076378339UL, 2692926127UL, 970097715UL, 299344245UL, 4014350363UL, 2476927059UL, 1989070516UL, 2640060069UL, 3844531327UL, 1880989003UL, 3861138803UL, 451743296UL, 1987067871UL, 3272848161UL, 3397816882UL, 2309900530UL, 4108425851UL, 4063867233UL,
834288064UL, 2621772886UL, 1804684571UL, 2106089606UL, 1533056158UL, 304865970UL, 611557097UL, 3789871366UL, 4246691682UL, 3667072763UL, 2728206193UL, 3389551988UL, 2973497449UL, 2958641966UL, 2088805328UL, 3895037582UL, 2460955430UL, 3606967204UL, 952637656UL, 59827581UL, 2349212526UL, 3531087304UL, 2053994857UL, 563998083UL, 4094000396UL, 4028900485UL, 1242934125UL, 654565639UL, 1070907026UL, 4217851863UL, 1663452176UL, 3034416129UL,
278404469UL, 3899800390UL, 1063362170UL, 2721441405UL, 4258714417UL, 3249996223UL, 186674553UL, 2616406148UL, 4228837490UL, 639885806UL, 1495068058UL, 3033760361UL, 2278144523UL, 2820661772UL, 4159910300UL, 2602548287UL, 3386583150UL, 355354345UL, 1815256314UL, 1555885880UL, 2283016801UL, 3005955037UL, 3340254490UL, 2166514144UL, 2948774612UL, 3705188626UL, 1252262272UL, 3989036796UL, 751187322UL, 2107826711UL, 1447170583UL, 3373930285UL,
2895037457UL, 2809311944UL, 3763367196UL, 3712392731UL, 685796521UL, 1322920440UL, 936300677UL, 1986168339UL, 434430265UL, 2650681935UL, 1371566728UL, 1308015359UL, 1423189187UL, 3498513198UL, 792571900UL, 1447808772UL, 3065349526UL, 315969823UL, 1105434360UL, 1484146625UL, 3327194068UL, 1038676789UL, 3336228275UL, 1425844616UL, 2871928454UL, 1124633561UL, 2956422231UL, 1762052458UL, 1610235673UL, 2844230432UL, 2748082340UL, 3603862093UL,
3771702243UL, 2912535126UL, 2574390988UL, 3974009252UL, 1691332448UL, 1626628844UL, 3980917176UL, 3221419689UL, 960695436UL, 3120142427UL, 382092233UL, 3392407691UL, 472711005UL, 295914899UL, 4101686983UL, 514297204UL, 3370011868UL, 509135340UL, 1965939519UL, 3015736706UL, 3975975091UL, 1324152522UL, 762289386UL, 3618693997UL, 2395097989UL, 455322516UL, 31168606UL, 3367142977UL, 2851851305UL, 30511955UL, 3952189603UL, 3298190175UL,
901235185UL, 1564391510UL, 2606298633UL, 826181452UL, 578573310UL, 3462447127UL, 2482873876UL, 4159642946UL, 1529242773UL, 2335345651UL, 1381450613UL, 2866805101UL, 1782913669UL, 877718651UL, 3184556473UL, 1076378339UL, 2692926127UL, 1730328819UL, 299344245UL, 4014350363UL, 2476927059UL, 1989070516UL, 1425685614UL, 3844531327UL, 1880989003UL, 3861138803UL, 451743296UL, 889237383UL, 3272848161UL, 3397816882UL, 2309900530UL, 4108425851UL,
1155723231UL, 834288064UL, 2621772886UL, 1804684571UL, 2106089606UL, 2387009004UL, 304865970UL, 611557097UL, 3789871366UL, 4246691682UL, 1405709661UL, 2728206193UL, 3389551988UL, 2973497449UL, 2958641966UL, 3183906006UL, 3895037582UL, 2460955430UL, 3606967204UL, 952637656UL, 1345432763UL, 2349212526UL, 3531087304UL, 2053994857UL, 563998083UL, 3749011414UL, 4028900485UL, 1242934125UL, 654565639UL, 1070907026UL, 1072342672UL, 1663452176UL,
3034416129UL, 278404469UL, 3899800390UL, 3566652188UL, 2721441405UL, 4258714417UL, 3249996223UL, 186674553UL, 4001263143UL, 4228837490UL, 639885806UL, 1495068058UL, 3033760361UL, 4278332644UL, 2820661772UL, 4159910300UL, 2602548287UL, 3386583150UL, 838831089UL, 1815256314UL, 1555885880UL, 2283016801UL, 3005955037UL, 3377397178UL, 2166514144UL, 2948774612UL, 3705188626UL, 1252262272UL, 2414422575UL, 751187322UL, 2107826711UL, 1447170583UL,
3373930285UL, 1253755033UL, 2809311944UL, 3763367196UL, 3712392731UL, 685796521UL, 3238624475UL, 936300677UL, 1986168339UL, 434430265UL, 2650681935UL, 1642290570UL, 1308015359UL, 1423189187UL, 3498513198UL, 792571900UL, 173318140UL, 3065349526UL, 315969823UL, 1105434360UL, 1484146625UL, 4103797777UL, 1038676789UL, 3336228275UL, 1425844616UL, 2871928454UL, 1797745765UL, 2956422231UL, 1762052458UL, 1610235673UL, 2844230432UL, 2180656608UL,
3603862093UL, 3771702243UL, 2912535126UL, 2574390988UL, 1183098390UL, 1691332448UL, 1626628844UL, 3980917176UL, 3221419689UL, 2645203959UL, 3120142427UL, 382092233UL, 3392407691UL, 472711005UL, 1659659070UL, 4101686983UL, 514297204UL, 3370011868UL, 509135340UL, 483888155UL, 3015736706UL, 3975975091UL, 1324152522UL, 762289386UL, 1259948064UL, 2395097989UL, 455322516UL, 31168606UL, 3367142977UL, 339990414UL, 30511955UL, 3952189603UL,
3298190175UL, 901235185UL, 3097920065UL, 2606298633UL, 826181452UL, 578573310UL, 3462447127UL, 1548039839UL, 4159642946UL, 1529242773UL, 2335345651UL, 1381450613UL, 2173079994UL, 1782913669UL, 877718651UL, 3184556473UL, 1076378339UL, 1570275057UL, 1730328819UL, 299344245UL, 4014350363UL, 2476927059UL, 1845882881UL, 1425685614UL, 3844531327UL, 1880989003UL, 3861138803UL, 1322409081UL, 889237383UL, 3272848161UL, 3397816882UL, 2309900530UL,
3505447982UL, 3430136873UL, 1319796589UL, 4202423979UL, 3184732284UL, 2910356648UL, 2534615223UL, 3854465731UL, 768821792UL, 2205052576UL, 1348983754UL, 1300250188UL, 2919181738UL, 2520178732UL, 3967243685UL, 2646012002UL, 1784678658UL, 741302051UL, 3464753547UL, 194213376UL, 1482799064UL, 3009673860UL, 680824208UL, 741966796UL, 2381283369UL, 3022877171UL, 1619439814UL, 3961433610UL, 1331297670UL, 1100110820UL, 1311672539UL, 1122110615UL,
4056004850UL, 3413790176UL, 3148768822UL, 1242592694UL, 2925975727UL, 1879285134UL, 334328879UL, 1318235222UL, 3140739559UL, 401691770UL, 3604288404UL, 3686496908UL, 770670945UL, 199139043UL, 2092710473UL, 3914528993UL, 700991333UL, 2375775811UL, 858137308UL, 3490050165UL, 2389078291UL, 1615607459UL, 3027969809UL, 820012549UL, 2085659484UL, 2654485136UL, 2630408646UL, 196481396UL, 1119673274UL, 1026209692UL, 726501622UL, 2940737143UL,
3559571163UL, 2288027726UL, 1039212708UL, 929664536UL, 1061981465UL, 186058675UL, 3537656152UL, 844176796UL, 2996217992UL, 1545798611UL, 3031020656UL, 2248030435UL, 1665857580UL, 2905758082UL, 1269201312UL, 3031275084UL, 4034872841UL, 983632400UL, 4188503190UL, 757119675UL, 2105920865UL, 4281032819UL, 2917801076UL, 3900010013UL, 3910997169UL, 1729751422UL, 562313247UL, 3070846353UL, 2564238664UL, 4050540186UL, 4258833501UL, 2270666053UL,
2207128401UL, 2990540001UL, 797768898UL, 2288390225UL, 3230323685UL, 1974727440UL, 3327301426UL, 289857826UL, 3565889868UL, 2791014422UL, 2021097820UL, 3350378271UL, 3673707591UL, 2610067927UL, 4255789547UL, 2682856590UL, 12563128UL, 1397542366UL, 237149400UL, 2233707508UL, 3875573245UL, 2097374144UL, 175320773UL, 4103445984UL, 4089284323UL, 3610168130UL, 3084915964UL, 680145366UL, 2571684685UL, 1132894909UL, 104640024UL, 193765521UL,
2338202907UL, 895271448UL, 11499099UL, 1798066417UL, 1297412626UL, 2511347162UL, 3140535007UL, 2129963538UL, 700683199UL, 2609700278UL, 2953463279UL, 2290844145UL, 1871316353UL, 3993801787UL, 2219413182UL, 2954453701UL, 231283580UL, 1375331115UL, 207723994UL, 1799562537UL, 2056553564UL, 2513609799UL, 3542459627UL, 3173012714UL, 3923404932UL, 217877755UL, 2095124912UL, 192024370UL, 1168134987UL, 1889598668UL, 3014873069UL, 2033573343UL,
},
{
3465348660UL, 3623545008UL, 3505902593UL, 838034830UL, 1338018789UL, 2595329276UL, 3367746385UL, 3197935201UL, 1439351946UL, 3585085571UL, 4165798087UL, 3634792639UL, 2359485974UL, 2772582925UL, 1110186203UL, 3771562484UL, 1508694157UL, 1564641206UL, 2801985736UL, 2446107936UL, 3849126897UL, 1842973671UL, 944408104UL, 2624631280UL, 2729080685UL, 3737368614UL, 858809173UL, 2289802345UL, 2428186575UL, 3114742765UL, 716011303UL, 3443810690UL,
814132610UL, 517432787UL, 614445393UL, 2930433345UL, 291178098UL, 2117644502UL, 2749446703UL, 311745701UL, 365684723UL, 1705418876UL, 2213749318UL, 4011417220UL, 1842575651UL, 988348831UL, 94258998UL, 2771150272UL, 498058526UL, 1344827813UL, 2961955291UL, 262703473UL, 1404034822UL, 1566595865UL, 2522381203UL, 1706522206UL, 1203054806UL, 1273801539UL, 2070583465UL, 3913449936UL, 3231505231UL, 619636751UL, 3746997351UL, 4103027837UL,
1205468203UL, 3355878253UL, 3433356888UL, 107785753UL, 2779092609UL, 1869691566UL, 2555219983UL, 903319808UL, 3273374169UL, 2538926990UL, 979533870UL, 1356500860UL, 1661983738UL, 1380761625UL, 2919458459UL, 1041142798UL, 1430817627UL, 517007606UL, 1421570516UL, 2371447300UL, 2985632691UL, 3684889351UL, 3873926653UL, 788770697UL, 1854750277UL, 209332297UL, 1137299679UL, 848527832UL, 3850486924UL, 4179307312UL, 2764470693UL, 1353191605UL,
4166891919UL, 2074703841UL, 3373997532UL, 2013528640UL, 701389744UL, 841917592UL, 2065742268UL, 2721848192UL, 2566956680UL, 3122896007UL, 1090761479UL, 921859028UL, 4086736376UL, 1837462309UL, 2579826431UL, 2436217134UL, 839037727UL, 1072086642UL, 614518622UL, 3764758228UL, 1501128342UL, 3669108708UL, 1601407381UL, 2899014005UL, 3268308948UL, 3337564231UL, 1986911578UL, 3379194930UL, 1950365753UL, 2098537451UL, 51515980UL, 1176526086UL,
3213391582UL, 1059745735UL, 2273586703UL, 376085505UL, 1493749800UL, 3970342143UL, 1620925244UL, 2165301314UL, 2332030190UL, 1864098798UL, 276747442UL, 2776569227UL, 2992780663UL, 3027279789UL, 1074555384UL, 3481518659UL, 2499703783UL, 661805703UL, 3782305562UL, 9186074UL, 2357407210UL, 2355922343UL, 2024733363UL, 485434612UL, 862379913UL, 1029706268UL, 1512726310UL, 3834948354UL, 1435892840UL, 3297980694UL, 2831553800UL, 2111416471UL,
711321697UL, 3465348660UL, 3623545008UL, 3505902593UL, 838034830UL, 1553436793UL, 2595329276UL, 3367746385UL, 3197935201UL, 1439351946UL, 3198044157UL, 4165798087UL, 3634792639UL, 2359485974UL, 2772582925UL, 836042976UL, 3771562484UL, 1508694157UL, 1564641206UL, 2801985736UL, 1190371491UL, 3849126897UL, 1842973671UL, 944408104UL, 2624631280UL, 410746791UL, 3737368614UL, 858809173UL, 2289802345UL, 2428186575UL, 1542325976UL, 716011303UL,
3443810690UL, 814132610UL, 517432787UL, 1649301063UL, 2930433345UL, 291178098UL, 2117644502UL, 2749446703UL, 3955511579UL, 365684723UL, 1705418876UL, 2213749318UL, 4011417220UL, 2753632862UL, 988348831UL, 94258998UL, 2771150272UL, 498058526UL, 3314106168UL, 2961955291UL, 262703473UL, 1404034822UL, 1566595865UL, 3590367097UL, 1706522206UL, 1203054806UL, 1273801539UL, 2070583465UL, 2340683261UL, 3231505231UL, 619636751UL, 3746997351UL,
4103027837UL, 2785398766UL, 3355878253UL, 3433356888UL, 107785753UL, 2779092609UL, 1608451840UL, 2555219983UL, 903319808UL, 3273374169UL, 2538926990UL, 645164419UL, 1356500860UL, 1661983738UL, 1380761625UL, 2919458459UL, 2260224548UL, 1430817627UL, 517007606UL, 1421570516UL, 2371447300UL, 1636004496UL, 3684889351UL, 3873926653UL, 788770697UL, 1854750277UL, 1345251011UL, 1137299679UL, 848527832UL, 3850486924UL, 4179307312UL, 3576574608UL,
1353191605UL, 4166891919UL, 2074703841UL, 3373997532UL, 183447754UL, 701389744UL, 841917592UL, 2065742268UL, 2721848192UL, 2109289891UL, 3122896007UL, 1090761479UL, 921859028UL, 4086736376UL, 2212730874UL, 2579826431UL, 2436217134UL, 839037727UL, 1072086642UL, 55934784UL, 3764758228UL, 1501128342UL, 3669108708UL, 1601407381UL, 516550987UL, 3268308948UL, 3337564231UL, 1986911578UL, 3379194930UL, 3973484473UL, 2098537451UL, 51515980UL,
1176526086UL, 3213391582UL, 4251661633UL, 2273586703UL, 376085505UL, 1493749800UL, 3970342143UL, 3190791788UL, 2165301314UL, 2332030190UL, 1864098798UL, 276747442UL, 2991976613UL, 2992780663UL, 3027279789UL, 1074555384UL, 3481518659UL, 1399789494UL, 661805703UL, 3782305562UL, 9186074UL, 2357407210UL, 1942736967UL, 2024733363UL, 485434612UL, 862379913UL, 1029706268UL, 4122704494UL, 3834948354UL, 1435892840UL, 3297980694UL, 2831553800UL,
1210092654UL, 711321697UL, 3465348660UL, 3623545008UL, 3505902593UL, 3443231198UL, 1553436793UL, 2595329276UL, 3367746385UL, 3197935201UL, 1304974987UL, 3198044157UL, 4165798087UL, 3634792639UL, 2359485974UL, 3518323362UL, 836042976UL, 3771562484UL, 1508694157UL, 1564641206UL, 3577633375UL, 1190371491UL, 3849126897UL, 1842973671UL, 944408104UL, 1854555112UL, 410746791UL, 3737368614UL, 858809173UL, 2289802345UL, 3622671731UL, 1542325976UL,
716011303UL, 3443810690UL, 814132610UL, 296197011UL, 1649301063UL, 2930433345UL, 291178098UL, 2117644502UL, 1056271538UL, 3955511579UL, 365684723UL, 1705418876UL, 2213749318UL, 1258535671UL, 2753632862UL, 988348831UL, 94258998UL, 2771150272UL, 3669902097UL, 3314106168UL, 2961955291UL, 262703473UL, 1404034822UL, 1654433938UL, 3590367097UL, 1706522206UL, 1203054806UL, 1273801539UL, 2448138887UL, 2340683261UL, 3231505231UL, 619636751UL,
3746997351UL, 1454088394UL, 2785398766UL, 3355878253UL, 3433356888UL, 107785753UL, 689323470UL, 1608451840UL, 2555219983UL, 903319808UL, 3273374169UL, 1603842392UL, 645164419UL, 1356500860UL, 1661983738UL, 1380761625UL, 2814639423UL, 2260224548UL, 1430817627UL, 517007606UL, 1421570516UL, 1938805701UL, 1636004496UL, 3684889351UL, 3873926653UL, 788770697UL, 4238900666UL, 1345251011UL, 1137299679UL, 848527832UL, 3850486924UL, 108793827UL,
3576574608UL, 1353191605UL, 4166891919UL, 2074703841UL, 3780897861UL, 183447754UL, 701389744UL, 841917592UL, 2065742268UL, 3036602746UL, 2109289891UL, 3122896007UL, 1090761479UL, 921859028UL, 3499985398UL, 2212730874UL, 2579826431UL, 2436217134UL, 839037727UL, 3520354700UL, 55934784UL, 3764758228UL, 1501128342UL, 3669108708UL, 1601010847UL, 516550987UL, 3268308948UL, 3337564231UL, 1986911578UL, 2704241781UL, 3973484473UL, 2098537451UL,
51515980UL, 1176526086UL, 3602010532UL, 4251661633UL, 2273586703UL, 376085505UL, 1493749800UL, 2922957328UL, 3190791788UL, 2165301314UL, 2332030190UL, 1864098798UL, 1649666443UL, 2991976613UL, 2992780663UL, 3027279789UL, 1074555384UL, 2848531519UL, 1399789494UL, 661805703UL, 3782305562UL, 9186074UL, 320781315UL, 1942736967UL, 2024733363UL, 485434612UL, 862379913UL, 3598892066UL, 4122704494UL, 3834948354UL, 1435892840UL, 3297980694UL,
545184652UL, 1210092654UL, 711321697UL, 3465348660UL, 3623545008UL, 1173753045UL, 3443231198UL, 1553436793UL, 2595329276UL, 3367746385UL, 2444634476UL, 1304974987UL, 3198044157UL, 4165798087UL, 3634792639UL, 1837035806UL, 3518323362UL, 836042976UL, 3771562484UL, 1508694157UL, 2899021294UL, 3577633375UL, 1190371491UL, 3849126897UL, 1842973671UL, 1614215215UL, 1854555112UL, 410746791UL, 3737368614UL, 858809173UL, 525745365UL, 3622671731UL,
1542325976UL, 716011303UL, 3443810690UL, 566299749UL, 296197011UL, 1649301063UL, 2930433345UL, 291178098UL, 1987532525UL, 1056271538UL, 3955511579UL, 365684723UL, 1705418876UL, 2321222760UL, 1258535671UL, 2753632862UL, 988348831UL, 94258998UL, 2986060366UL, 3669902097UL, 3314106168UL, 2961955291UL, 262703473UL, 604452796UL, 1654433938UL, 3590367097UL, 1706522206UL, 1203054806UL, 1894894069UL, 2448138887UL, 2340683261UL, 3231505231UL,
619636751UL, 6680729UL, 1454088394UL, 2785398766UL, 3355878253UL, 3433356888UL, 2025591660UL, 689323470UL, 1608451840UL, 2555219983UL, 903319808UL, 3430384385UL, 1603842392UL, 645164419UL, 1356500860UL, 1661983738UL, 2108736152UL, 2814639423UL, 2260224548UL, 1430817627UL, 517007606UL, 2973658959UL, 1938805701UL, 1636004496UL, 3684889351UL, 3873926653UL, 2283691941UL, 4238900666UL, 1345251011UL, 1137299679UL, 848527832UL, 45551112UL,
108793827UL, 3576574608UL, 1353191605UL, 4166891919UL, 3776615962UL, 3780897861UL, 183447754UL, 701389744UL, 841917592UL, 3830639316UL, 3036602746UL, 2109289891UL, 3122896007UL, 1090761479UL, 1931255897UL, 3499985398UL, 2212730874UL, 2579826431UL, 2436217134UL, 3272166055UL, 3520354700UL, 55934784UL, 3764758228UL, 1501128342UL, 1567864246UL, 1601010847UL, 516550987UL, 3268308948UL, 3337564231UL, 3918802424UL, 2704241781UL, 3973484473UL,
2098537451UL, 51515980UL, 3551394489UL, 3602010532UL, 4251661633UL, 2273586703UL, 376085505UL, 885459498UL, 2922957328UL, 3190791788UL, 2165301314UL, 2332030190UL, 3197056515UL, 1649666443UL, 2991976613UL, 2992780663UL, 3027279789UL, 2385348906UL, 2848531519UL, 1399789494UL, 661805703UL, 3782305562UL, 2163075465UL, 320781315UL, 1942736967UL, 2024733363UL, 485434612UL, 2680597981UL, 3598892066UL, 4122704494UL, 3834948354UL, 1435892840UL,
2499644163UL, 2704575422UL, 2579557838UL, 673530532UL, 493730767UL, 1124557747UL, 1908629439UL, 2821949504UL, 1743112513UL, 2849457841UL, 2344409314UL, 3479159262UL, 4260973770UL, 2991970754UL, 3812641863UL, 2229319917UL, 2466968521UL, 1766353737UL, 3216591612UL, 2113272648UL, 364370737UL, 1893001758UL, 2608875275UL, 4224057183UL, 3546705413UL, 1999778009UL, 348872225UL, 2470564216UL, 1417878284UL, 2709790112UL, 3579129936UL, 2137971615UL,
4046639861UL, 2841156930UL, 391544737UL, 2056567354UL, 737657378UL, 3877904725UL, 578930752UL, 1759172471UL, 3383278785UL, 1047197514UL, 649468151UL, 3452867243UL, 1792089520UL, 63936215UL, 3909143729UL, 3753489875UL, 734314122UL, 2490530916UL, 3043874586UL, 1504812057UL, 59001199UL, 2493748676UL, 2552438622UL, 1889694845UL, 3715397860UL, 2817245010UL, 3841049206UL, 816106718UL, 2176130406UL, 640254735UL, 12376903UL, 3000264936UL,
3304116079UL, 1620334094UL, 2109391765UL, 1348210951UL, 2237645681UL, 1207768272UL, 1562894669UL, 2156631655UL, 1387193235UL, 3154858817UL, 633510901UL, 2312190757UL, 402878244UL, 2501565021UL, 2984409334UL, 4167491216UL, 3614267292UL, 3078552271UL, 971722322UL, 3065543880UL, 2307584190UL, 491480322UL, 2068673112UL, 1929780632UL, 178549964UL, 983979983UL, 2769314886UL, 4214442042UL, 2977609682UL, 25450683UL, 3075212658UL, 1571149568UL,
3531670561UL, 42782504UL, 425601306UL, 428715214UL, 497250251UL, 693520802UL, 166426814UL, 1786382125UL, 2712003995UL, 3610802197UL, 2076490757UL, 404822980UL, 3953184772UL, 1655231947UL, 3594351577UL, 3068232274UL, 3771730346UL, 4110519574UL, 3534704897UL, 2375277865UL, 3597780202UL, 3472676002UL, 1350276449UL, 3218248239UL, 3589255283UL, 3253132633UL, 1769885529UL, 3792812294UL, 120332643UL, 1219374788UL, 3608889019UL, 2386099811UL,
858495304UL, 1284785543UL, 331370962UL, 2259419662UL, 2519864134UL, 3194739432UL, 2669074511UL, 2565559140UL, 3378072004UL, 2647801475UL, 265068954UL, 1464416963UL, 1232787612UL, 4160089759UL, 2510685972UL, 670300081UL, 2509357766UL, 1981891975UL, 4161588397UL, 1371924626UL, 44760868UL, 634955171UL, 1187096933UL, 3324788972UL, 3576888559UL, 2801347752UL, 3730298395UL, 1702170762UL, 4206083415UL, 741409141UL, 3649731355UL, 1025429529UL,
},
{
91444490UL, 628576944UL, 4069219862UL, 2253058925UL, 492354082UL, 1191182242UL, 1565180119UL, 2257613723UL, 456055162UL, 605712223UL, 953365104UL, 3104638527UL, 1133984729UL, 2662828416UL, 2134948274UL, 1921384447UL, 843719355UL, 588432962UL, 1734575434UL, 2924140067UL, 483396548UL, 3848838894UL, 3155476556UL, 1760928304UL, 4168059840UL, 3279827269UL, 2644461735UL, 4168565656UL, 3951563569UL, 1276805504UL, 1708974143UL, 1878547888UL,
3465220024UL, 3062086782UL, 2801401651UL, 1510428126UL, 716404149UL, 1646021208UL, 3534932385UL, 1186585561UL, 651997355UL, 282914223UL, 352224857UL, 3764407517UL, 1059868753UL, 1971798134UL, 978904005UL, 976413661UL, 4039544152UL, 498989693UL, 2565125471UL, 2782642813UL, 3537961025UL, 1194967362UL, 169217024UL, 3491609UL, 1319592872UL, 1630206561UL, 2497130840UL, 1685008996UL, 2828944016UL, 3301346775UL, 2893072371UL, 2606559798UL,
4026138031UL, 2664450619UL, 691091062UL, 1079640113UL, 1417637732UL, 4081852209UL, 2197910648UL, 2310382370UL, 1000957047UL, 959936499UL, 2844551811UL, 2272766890UL, 31122394UL, 2742925483UL, 1121884686UL, 57929089UL, 2468361281UL, 2982007782UL, 2371576893UL, 177782593UL, 3603584577UL, 672057044UL, 2108452841UL, 1671338057UL, 3386908223UL, 1243029765UL, 805157552UL, 1271858417UL, 1621249501UL, 1804851492UL, 1321010403UL, 751773221UL,
1517221627UL, 822709871UL, 104533154UL, 3578182264UL, 640541709UL, 421086624UL, 4233576392UL, 3729339369UL, 197460644UL, 773140636UL, 2158026018UL, 1756785611UL, 4011575991UL, 3569445500UL, 736117181UL, 2456162322UL, 1168189787UL, 3651312675UL, 1070291988UL, 268231205UL, 541474497UL, 3316168972UL, 3546990856UL, 830417208UL, 725960194UL, 2044207227UL, 3188997938UL, 2383298579UL, 3350316374UL, 3575011225UL, 1553111865UL, 1285013027UL,
749371711UL, 766611716UL, 598195098UL, 2139882719UL, 2062405428UL, 3634702446UL, 3015263295UL, 223311969UL, 2622859522UL, 3888492701UL, 2955257225UL, 582625650UL, 3563756446UL, 2886083960UL, 1907546514UL, 454650902UL, 3287277541UL, 625828138UL, 2991888140UL, 1935326370UL, 4031152256UL, 702881509UL, 1427632724UL, 1345475301UL, 2577560804UL, 2858595147UL, 2533191188UL, 185662179UL, 536505093UL, 3747894147UL, 111551030UL, 370373207UL,
2293908590UL, 91444490UL, 628576944UL, 4069219862UL, 2253058925UL, 1671484924UL, 1191182242UL, 1565180119UL, 2257613723UL, 456055162UL, 3411094744UL, 953365104UL, 3104638527UL, 1133984729UL, 2662828416UL, 2000630022UL, 1921384447UL, 843719355UL, 588432962UL, 1734575434UL, 3293926122UL, 483396548UL, 3848838894UL, 3155476556UL, 1760928304UL, 146876953UL, 3279827269UL, 2644461735UL, 4168565656UL, 3951563569UL, 3976156700UL, 1708974143UL,
1878547888UL, 3465220024UL, 3062086782UL, 1999154400UL, 1510428126UL, 716404149UL, 1646021208UL, 3534932385UL, 2479551429UL, 651997355UL, 282914223UL, 352224857UL, 3764407517UL, 1275979651UL, 1971798134UL, 978904005UL, 976413661UL, 4039544152UL, 300654823UL, 2565125471UL, 2782642813UL, 3537961025UL, 1194967362UL, 3123973648UL, 3491609UL, 1319592872UL, 1630206561UL, 2497130840UL, 1437913158UL, 2828944016UL, 3301346775UL, 2893072371UL,
2606559798UL, 2153172585UL, 2664450619UL, 691091062UL, 1079640113UL, 1417637732UL, 17137237UL, 2197910648UL, 2310382370UL, 1000957047UL, 959936499UL, 802137134UL, 2272766890UL, 31122394UL, 2742925483UL, 1121884686UL, 3909775167UL, 2468361281UL, 2982007782UL, 2371576893UL, 177782593UL, 3319492525UL, 672057044UL, 2108452841UL, 1671338057UL, 3386908223UL, 1878151473UL, 805157552UL, 1271858417UL, 1621249501UL, 1804851492UL, 3215921223UL,
751773221UL, 1517221627UL, 822709871UL, 104533154UL, 361845001UL, 640541709UL, 421086624UL, 4233576392UL, 3729339369UL, 2655936801UL, 773140636UL, 2158026018UL, 1756785611UL, 4011575991UL, 587202971UL, 736117181UL, 2456162322UL, 1168189787UL, 3651312675UL, 2517883370UL, 268231205UL, 541474497UL, 3316168972UL, 3546990856UL, 2037251305UL, 725960194UL, 2044207227UL, 3188997938UL, 2383298579UL, 2665008587UL, 3575011225UL, 1553111865UL,
1285013027UL, 749371711UL, 2163964019UL, 598195098UL, 2139882719UL, 2062405428UL, 3634702446UL, 2788202059UL, 223311969UL, 2622859522UL, 3888492701UL, 2955257225UL, 740986174UL, 3563756446UL, 2886083960UL, 1907546514UL, 454650902UL, 2426323587UL, 625828138UL, 2991888140UL, 1935326370UL, 4031152256UL, 1831149435UL, 1427632724UL, 1345475301UL, 2577560804UL, 2858595147UL, 3977153945UL, 185662179UL, 536505093UL, 3747894147UL, 111551030UL,
4131587422UL, 2293908590UL, 91444490UL, 628576944UL, 4069219862UL, 2408189350UL, 1671484924UL, 1191182242UL, 1565180119UL, 2257613723UL, 1338069254UL, 3411094744UL, 953365104UL, 3104638527UL, 1133984729UL, 631497759UL, 2000630022UL, 1921384447UL, 843719355UL, 588432962UL, 3280318959UL, 3293926122UL, 483396548UL, 3848838894UL, 3155476556UL, 1777918163UL, 146876953UL, 3279827269UL, 2644461735UL, 4168565656UL, 2786264663UL, 3976156700UL,
1708974143UL, 1878547888UL, 3465220024UL, 2793923820UL, 1999154400UL, 1510428126UL, 716404149UL, 1646021208UL, 3102243824UL, 2479551429UL, 651997355UL, 282914223UL, 352224857UL, 3767702588UL, 1275979651UL, 1971798134UL, 978904005UL, 976413661UL, 1951622548UL, 300654823UL, 2565125471UL, 2782642813UL, 3537961025UL, 2186817324UL, 3123973648UL, 3491609UL, 1319592872UL, 1630206561UL, 1075424534UL, 1437913158UL, 2828944016UL, 3301346775UL,
2893072371UL, 207992406UL, 2153172585UL, 2664450619UL, 691091062UL, 1079640113UL, 3114255216UL, 17137237UL, 2197910648UL, 2310382370UL, 1000957047UL, 2548008553UL, 802137134UL, 2272766890UL, 31122394UL, 2742925483UL, 4069482373UL, 3909775167UL, 2468361281UL, 2982007782UL, 2371576893UL, 2807823912UL, 3319492525UL, 672057044UL, 2108452841UL, 1671338057UL, 12831353UL, 1878151473UL, 805157552UL, 1271858417UL, 1621249501UL, 461887094UL,
3215921223UL, 751773221UL, 1517221627UL, 822709871UL, 1317394918UL, 361845001UL, 640541709UL, 421086624UL, 4233576392UL, 3385587450UL, 2655936801UL, 773140636UL, 2158026018UL, 1756785611UL, 1475601973UL, 587202971UL, 736117181UL, 2456162322UL, 1168189787UL, 911455077UL, 2517883370UL, 268231205UL, 541474497UL, 3316168972UL, 1500275507UL, 2037251305UL, 725960194UL, 2044207227UL, 3188997938UL, 2036633808UL, 2665008587UL, 3575011225UL,
1553111865UL, 1285013027UL, 87868216UL, 2163964019UL, 598195098UL, 2139882719UL, 2062405428UL, 517907301UL, 2788202059UL, 223311969UL, 2622859522UL, 3888492701UL, 3926046234UL, 740986174UL, 3563756446UL, 2886083960UL, 1907546514UL, 1911066215UL, 2426323587UL, 625828138UL, 2991888140UL, 1935326370UL, 2031853435UL, 1831149435UL, 1427632724UL, 1345475301UL, 2577560804UL, 3509674153UL, 3977153945UL, 185662179UL, 536505093UL, 3747894147UL,
1711714600UL, 4131587422UL, 2293908590UL, 91444490UL, 628576944UL, 3370678255UL, 2408189350UL, 1671484924UL, 1191182242UL, 1565180119UL, 3786239592UL, 1338069254UL, 3411094744UL, 953365104UL, 3104638527UL, 3659647225UL, 631497759UL, 2000630022UL, 1921384447UL, 843719355UL, 3364831282UL, 3280318959UL, 3293926122UL, 483396548UL, 3848838894UL, 3131266478UL, 1777918163UL, 146876953UL, 3279827269UL, 2644461735UL, 4156372383UL, 2786264663UL,
3976156700UL, 1708974143UL, 1878547888UL, 2168041590UL, 2793923820UL, 1999154400UL, 1510428126UL, 716404149UL, 3392113666UL, 3102243824UL, 2479551429UL, 651997355UL, 282914223UL, 2085613514UL, 3767702588UL, 1275979651UL, 1971798134UL, 978904005UL, 503506384UL, 1951622548UL, 300654823UL, 2565125471UL, 2782642813UL, 1458431750UL, 2186817324UL, 3123973648UL, 3491609UL, 1319592872UL, 452433679UL, 1075424534UL, 1437913158UL, 2828944016UL,
3301346775UL, 2333281307UL, 207992406UL, 2153172585UL, 2664450619UL, 691091062UL, 3553502652UL, 3114255216UL, 17137237UL, 2197910648UL, 2310382370UL, 3153689868UL, 2548008553UL, 802137134UL, 2272766890UL, 31122394UL, 468580641UL, 4069482373UL, 3909775167UL, 2468361281UL, 2982007782UL, 1445286890UL, 2807823912UL, 3319492525UL, 672057044UL, 2108452841UL, 1755577669UL, 12831353UL, 1878151473UL, 805157552UL, 1271858417UL, 2623540912UL,
461887094UL, 3215921223UL, 751773221UL, 1517221627UL, 3922191946UL, 1317394918UL, 361845001UL, 640541709UL, 421086624UL, 2173849516UL, 3385587450UL, 2655936801UL, 773140636UL, 2158026018UL, 1085377158UL, 1475601973UL, 587202971UL, 736117181UL, 2456162322UL, 2158960374UL, 911455077UL, 2517883370UL, 268231205UL, 541474497UL, 943191315UL, 1500275507UL, 2037251305UL, 725960194UL, 2044207227UL, 2481150802UL, 2036633808UL, 2665008587UL,
3575011225UL, 1553111865UL, 2301231777UL, 87868216UL, 2163964019UL, 598195098UL, 2139882719UL, 2007840238UL, 517907301UL, 2788202059UL, 223311969UL, 2622859522UL, 151920263UL, 3926046234UL, 740986174UL, 3563756446UL, 2886083960UL, 1338937928UL, 1911066215UL, 2426323587UL, 625828138UL, 2991888140UL, 2652286195UL, 2031853435UL, 1831149435UL, 1427632724UL, 1345475301UL, 289801789UL, 3509674153UL, 3977153945UL, 185662179UL, 536505093UL,
2727322952UL, 3980498348UL, 2529622213UL, 1903052964UL, 3564714651UL, 2281240568UL, 533384122UL, 277613480UL, 1815540358UL, 282763841UL, 3669112623UL, 2572859425UL, 195220178UL, 1210883545UL, 2359703600UL, 1187537824UL, 675732974UL, 325036095UL, 708091465UL, 2556854604UL, 701006284UL, 2378459191UL, 1863513103UL, 2690918197UL, 4237307694UL, 1356483501UL, 2160905652UL, 521809106UL, 974368613UL, 3136010957UL, 2722488678UL, 3711515637UL,
2296341459UL, 4233729945UL, 1196247571UL, 3031398071UL, 515543502UL, 1314129776UL, 3235373306UL, 1303165859UL, 1820568009UL, 559099351UL, 186876368UL, 1076102111UL, 1218809551UL, 1790301111UL, 4130210229UL, 768125358UL, 1132864749UL, 4262563773UL, 2294411020UL, 4092943985UL, 2558108246UL, 3737664949UL, 2219923393UL, 724326159UL, 4134105682UL, 4188752746UL, 3615233671UL, 1526018731UL, 2281637916UL, 2459490295UL, 3637342666UL, 777862587UL,
39962002UL, 3772005832UL, 997473319UL, 574843584UL, 3356551974UL, 1265234427UL, 1698059437UL, 534747571UL, 1465532164UL, 3263029035UL, 534512444UL, 2343092827UL, 2375685652UL, 2497926141UL, 2377933621UL, 2212335180UL, 261114084UL, 172755755UL, 2737085495UL, 2225257145UL, 148605658UL, 1353911796UL, 357753009UL, 1778732943UL, 497635558UL, 4136467976UL, 2837964962UL, 4045039047UL, 2485296762UL, 1587587183UL, 4042904168UL, 3184240963UL,
2393293696UL, 915444966UL, 2299938515UL, 3351580749UL, 506575598UL, 1541916825UL, 3465300401UL, 525927458UL, 681152801UL, 331660975UL, 3624685846UL, 2994172100UL, 3274369082UL, 3638287602UL, 815689760UL, 1710961092UL, 2775607076UL, 2175058103UL, 3252688367UL, 2936890483UL, 2746319120UL, 2736754UL, 1646031035UL, 2448701214UL, 2886833213UL, 3689830606UL, 3292798106UL, 300773646UL, 3125160783UL, 1247453205UL, 2746275624UL, 4011063775UL,
904135764UL, 876847374UL, 366267234UL, 2541269205UL, 131376648UL, 1805948133UL, 3383589530UL, 2350119829UL, 2513170439UL, 4096158499UL, 4229211520UL, 2992048272UL, 1338522080UL, 1187391335UL, 2898563453UL, 2163088451UL, 1417971677UL, 2047421551UL, 902282791UL, 1143943232UL, 3568431811UL, 4059861993UL, 193362198UL, 2509297125UL, 3968551582UL, 2175686117UL, 3568936881UL, 1853177468UL, 2134063169UL, 2919389416UL, 1124914545UL, 1209806738UL,
},
{
1199972651UL, 1035834631UL, 3177798370UL, 860834162UL, 3741677748UL, 3780327829UL, 1693730265UL, 1643429511UL, 559568669UL, 2758650294UL, 647308222UL, 3901603996UL, 1778653821UL, 3618523672UL, 2154201067UL, 4261179460UL, 3285764480UL, 3334002738UL, 3215795953UL, 91368462UL, 1883994950UL, 1506873376UL, 1527780962UL, 4046354597UL, 4081676034UL, 2389066602UL, 1574939945UL, 427845396UL, 2714836263UL, 1259019491UL, 2493238133UL, 2584034689UL,
3151382431UL, 2171033919UL, 176883719UL, 2031844862UL, 1272380790UL, 1298975901UL, 4087222847UL, 1524000054UL, 311436877UL, 3627785554UL, 1889491722UL, 2938069193UL, 2771940687UL, 2756955968UL, 4289348777UL, 263514583UL, 887207028UL, 3522902525UL, 2273246349UL, 835377715UL, 2897243319UL, 204645450UL, 1775911983UL, 639470242UL, 2856296318UL, 3032942383UL, 2845501282UL, 1979082575UL, 202834023UL, 1876303820UL, 1434703409UL, 4240524132UL,
848853780UL, 4188621628UL, 928095314UL, 876412914UL, 3446576392UL, 3235688990UL, 4021419931UL, 2483628986UL, 3155781890UL, 399997246UL, 1642535200UL, 3872575068UL, 1577956550UL, 3606228634UL, 609914462UL, 653194726UL, 4048067248UL, 2500767965UL, 1125167825UL, 3707628088UL, 1819135158UL, 1875618971UL, 3865851141UL, 328215079UL, 1695889194UL, 2040280471UL, 3384684457UL, 2540504961UL, 293050253UL, 525570078UL, 2655676443UL, 1392199429UL,
3370444585UL, 1937915855UL, 2229636250UL, 247937142UL, 2534538765UL, 365841057UL, 2449431033UL, 2456532429UL, 101910696UL, 1247069485UL, 1523958293UL, 2473285670UL, 473709728UL, 3026667113UL, 2071968844UL, 324025193UL, 423064436UL, 3870800061UL, 3977393138UL, 3632553233UL, 352757977UL, 1584833348UL, 3173248650UL, 1159857686UL, 1501841977UL, 1751860798UL, 617281070UL, 1958012761UL, 4031667102UL, 3232142321UL, 3087428595UL, 2380824676UL,
1194087757UL, 1542961747UL, 4163350364UL, 1721646249UL, 1672791861UL, 2900511710UL, 24973500UL, 1705444176UL, 713642505UL, 3017719513UL, 2090715200UL, 3521434070UL, 37117223UL, 1948295454UL, 3055840561UL, 3476120789UL, 3994249388UL, 527899063UL, 4285770666UL, 1075524023UL, 2594223535UL, 392943522UL, 171012646UL, 3515750082UL, 3414659054UL, 3501852926UL, 1493283737UL, 2662104279UL, 2033464928UL, 90134967UL, 363058647UL, 3289266998UL,
2470752727UL, 1199972651UL, 1035834631UL, 3177798370UL, 860834162UL, 1791097822UL, 3780327829UL, 1693730265UL, 1643429511UL, 559568669UL, 3503319486UL, 647308222UL, 3901603996UL, 1778653821UL, 3618523672UL, 4294594427UL, 4261179460UL, 3285764480UL, 3334002738UL, 3215795953UL, 212518363UL, 1883994950UL, 1506873376UL, 1527780962UL, 4046354597UL, 2398655600UL, 2389066602UL, 1574939945UL, 427845396UL, 2714836263UL, 2744363872UL, 2493238133UL,
2584034689UL, 3151382431UL, 2171033919UL, 2787053497UL, 2031844862UL, 1272380790UL, 1298975901UL, 4087222847UL, 2342953154UL, 311436877UL, 3627785554UL, 1889491722UL, 2938069193UL, 2026656505UL, 2756955968UL, 4289348777UL, 263514583UL, 887207028UL, 2097276163UL, 2273246349UL, 835377715UL, 2897243319UL, 204645450UL, 4233399907UL, 639470242UL, 2856296318UL, 3032942383UL, 2845501282UL, 28260330UL, 202834023UL, 1876303820UL, 1434703409UL,
4240524132UL, 2455670466UL, 4188621628UL, 928095314UL, 876412914UL, 3446576392UL, 117581687UL, 4021419931UL, 2483628986UL, 3155781890UL, 399997246UL, 4254101087UL, 3872575068UL, 1577956550UL, 3606228634UL, 609914462UL, 4003279048UL, 4048067248UL, 2500767965UL, 1125167825UL, 3707628088UL, 922020515UL, 1875618971UL, 3865851141UL, 328215079UL, 1695889194UL, 625773097UL, 3384684457UL, 2540504961UL, 293050253UL, 525570078UL, 2592805114UL,
1392199429UL, 3370444585UL, 1937915855UL, 2229636250UL, 3190958614UL, 2534538765UL, 365841057UL, 2449431033UL, 2456532429UL, 3778669305UL, 1247069485UL, 1523958293UL, 2473285670UL, 473709728UL, 720895889UL, 2071968844UL, 324025193UL, 423064436UL, 3870800061UL, 3535536111UL, 3632553233UL, 352757977UL, 1584833348UL, 3173248650UL, 2649344603UL, 1501841977UL, 1751860798UL, 617281070UL, 1958012761UL, 778965559UL, 3232142321UL, 3087428595UL,
2380824676UL, 1194087757UL, 3880222002UL, 4163350364UL, 1721646249UL, 1672791861UL, 2900511710UL, 702936770UL, 1705444176UL, 713642505UL, 3017719513UL, 2090715200UL, 1477858694UL, 37117223UL, 1948295454UL, 3055840561UL, 3476120789UL, 464173532UL, 527899063UL, 4285770666UL, 1075524023UL, 2594223535UL, 2872629966UL, 171012646UL, 3515750082UL, 3414659054UL, 3501852926UL, 1631555059UL, 2662104279UL, 2033464928UL, 90134967UL, 363058647UL,
4112991722UL, 2470752727UL, 1199972651UL, 1035834631UL, 3177798370UL, 4152098951UL, 1791097822UL, 3780327829UL, 1693730265UL, 1643429511UL, 153020604UL, 3503319486UL, 647308222UL, 3901603996UL, 1778653821UL, 221887019UL, 4294594427UL, 4261179460UL, 3285764480UL, 3334002738UL, 3340918862UL, 212518363UL, 1883994950UL, 1506873376UL, 1527780962UL, 430180116UL, 2398655600UL, 2389066602UL, 1574939945UL, 427845396UL, 1683639957UL, 2744363872UL,
2493238133UL, 2584034689UL, 3151382431UL, 752704472UL, 2787053497UL, 2031844862UL, 1272380790UL, 1298975901UL, 1528220628UL, 2342953154UL, 311436877UL, 3627785554UL, 1889491722UL, 2576495467UL, 2026656505UL, 2756955968UL, 4289348777UL, 263514583UL, 3778019638UL, 2097276163UL, 2273246349UL, 835377715UL, 2897243319UL, 1060067446UL, 4233399907UL, 639470242UL, 2856296318UL, 3032942383UL, 2351047932UL, 28260330UL, 202834023UL, 1876303820UL,
1434703409UL, 3094305336UL, 2455670466UL, 4188621628UL, 928095314UL, 876412914UL, 3785385583UL, 117581687UL, 4021419931UL, 2483628986UL, 3155781890UL, 1867816730UL, 4254101087UL, 3872575068UL, 1577956550UL, 3606228634UL, 3081878598UL, 4003279048UL, 4048067248UL, 2500767965UL, 1125167825UL, 928465955UL, 922020515UL, 1875618971UL, 3865851141UL, 328215079UL, 173810260UL, 625773097UL, 3384684457UL, 2540504961UL, 293050253UL, 2645143254UL,
2592805114UL, 1392199429UL, 3370444585UL, 1937915855UL, 162781360UL, 3190958614UL, 2534538765UL, 365841057UL, 2449431033UL, 3105377832UL, 3778669305UL, 1247069485UL, 1523958293UL, 2473285670UL, 800971948UL, 720895889UL, 2071968844UL, 324025193UL, 423064436UL, 52577992UL, 3535536111UL, 3632553233UL, 352757977UL, 1584833348UL, 3305908059UL, 2649344603UL, 1501841977UL, 1751860798UL, 617281070UL, 264880505UL, 778965559UL, 3232142321UL,
3087428595UL, 2380824676UL, 1127761012UL, 3880222002UL, 4163350364UL, 1721646249UL, 1672791861UL, 2368512339UL, 702936770UL, 1705444176UL, 713642505UL, 3017719513UL, 197200752UL, 1477858694UL, 37117223UL, 1948295454UL, 3055840561UL, 1588372042UL, 464173532UL, 527899063UL, 4285770666UL, 1075524023UL, 2124039914UL, 2872629966UL, 171012646UL, 3515750082UL, 3414659054UL, 818571456UL, 1631555059UL, 2662104279UL, 2033464928UL, 90134967UL,
952712086UL, 4112991722UL, 2470752727UL, 1199972651UL, 1035834631UL, 888975816UL, 4152098951UL, 1791097822UL, 3780327829UL, 1693730265UL, 3406785510UL, 153020604UL, 3503319486UL, 647308222UL, 3901603996UL, 3753248472UL, 221887019UL, 4294594427UL, 4261179460UL, 3285764480UL, 1861431346UL, 3340918862UL, 212518363UL, 1883994950UL, 1506873376UL, 2695939612UL, 430180116UL, 2398655600UL, 2389066602UL, 1574939945UL, 2852159074UL, 1683639957UL,
2744363872UL, 2493238133UL, 2584034689UL, 1952065633UL, 752704472UL, 2787053497UL, 2031844862UL, 1272380790UL, 3530505866UL, 1528220628UL, 2342953154UL, 311436877UL, 3627785554UL, 3410473245UL, 2576495467UL, 2026656505UL, 2756955968UL, 4289348777UL, 2856163034UL, 3778019638UL, 2097276163UL, 2273246349UL, 835377715UL, 3127280755UL, 1060067446UL, 4233399907UL, 639470242UL, 2856296318UL, 2615775011UL, 2351047932UL, 28260330UL, 202834023UL,
1876303820UL, 619308202UL, 3094305336UL, 2455670466UL, 4188621628UL, 928095314UL, 3764894047UL, 3785385583UL, 117581687UL, 4021419931UL, 2483628986UL, 3759839215UL, 1867816730UL, 4254101087UL, 3872575068UL, 1577956550UL, 1687107439UL, 3081878598UL, 4003279048UL, 4048067248UL, 2500767965UL, 2804044146UL, 928465955UL, 922020515UL, 1875618971UL, 3865851141UL, 2359176389UL, 173810260UL, 625773097UL, 3384684457UL, 2540504961UL, 3665420733UL,
2645143254UL, 2592805114UL, 1392199429UL, 3370444585UL, 1604709429UL, 162781360UL, 3190958614UL, 2534538765UL, 365841057UL, 3843585067UL, 3105377832UL, 3778669305UL, 1247069485UL, 1523958293UL, 293374051UL, 800971948UL, 720895889UL, 2071968844UL, 324025193UL, 3342361801UL, 52577992UL, 3535536111UL, 3632553233UL, 352757977UL, 1386594581UL, 3305908059UL, 2649344603UL, 1501841977UL, 1751860798UL, 3160423601UL, 264880505UL, 778965559UL,
3232142321UL, 3087428595UL, 3814775120UL, 1127761012UL, 3880222002UL, 4163350364UL, 1721646249UL, 3640773034UL, 2368512339UL, 702936770UL, 1705444176UL, 713642505UL, 1717761787UL, 197200752UL, 1477858694UL, 37117223UL, 1948295454UL, 896215772UL, 1588372042UL, 464173532UL, 527899063UL, 4285770666UL, 3441409029UL, 2124039914UL, 2872629966UL, 171012646UL, 3515750082UL, 2216687886UL, 818571456UL, 1631555059UL, 2662104279UL, 2033464928UL,
369438400UL, 329003658UL, 1503365029UL, 4215790910UL, 3264377550UL, 733526983UL, 2935318632UL, 1792331479UL, 608347530UL, 392723097UL, 1330445854UL, 3473004271UL, 1267636682UL, 2150566972UL, 2664910943UL, 2591861637UL, 409769584UL, 2943326880UL, 3746302819UL, 3162268832UL, 1028663260UL, 3206607045UL, 832105292UL, 2119405275UL, 538318455UL, 2981192295UL, 861775416UL, 609718403UL, 3531204230UL, 1904759571UL, 1262633751UL, 2375133081UL,
460454984UL, 946700253UL, 3763898311UL, 1571175213UL, 3124410107UL, 2413420216UL, 2664177543UL, 3241803820UL, 3968067371UL, 1234860999UL, 1130471500UL, 772727786UL, 247203117UL, 576455235UL, 246297007UL, 2027348597UL, 764933887UL, 3812479771UL, 1825807084UL, 4072281412UL, 2156865781UL, 1286484847UL, 1966749063UL, 2479269303UL, 423506843UL, 3070938758UL, 653091413UL, 2267423132UL, 2004263526UL, 1374490719UL, 3871990628UL, 841138314UL,
1260317857UL, 3887432433UL, 4025147569UL, 764233331UL, 1794763428UL, 3005903468UL, 877926770UL, 2466593927UL, 2971729561UL, 3203070565UL, 4198500026UL, 815665759UL, 2434508139UL, 1840456368UL, 2279000427UL, 17077200UL, 3178380570UL, 990304199UL, 3578008580UL, 1965763660UL, 1640352477UL, 750159594UL, 2047409402UL, 3576308245UL, 544920564UL, 1730124869UL, 1194761386UL, 3280315505UL, 147334027UL, 2870674244UL, 2076860776UL, 1100947675UL,
2482772161UL, 401966468UL, 1610650855UL, 193868446UL, 3808157106UL, 1509130117UL, 1324484736UL, 3852893217UL, 1059179497UL, 4053543778UL, 2557844172UL, 3282312002UL, 682550058UL, 4281899173UL, 137171998UL, 3239159214UL, 2258610918UL, 426724741UL, 3502660993UL, 135977383UL, 429929363UL, 3984458137UL, 964026748UL, 2182019070UL, 3836562946UL, 515026869UL, 359030455UL, 1301694917UL, 2300414803UL, 2364654981UL, 3804876710UL, 171119249UL,
2646785698UL, 4283509387UL, 3628087763UL, 1748227044UL, 3037141234UL, 3000413256UL, 23007314UL, 3598880509UL, 4160517314UL, 112205578UL, 1677675411UL, 734881643UL, 2830770338UL, 3470317145UL, 3306806569UL, 2635040943UL, 2671367560UL, 3528996498UL, 3878886478UL, 3114253828UL, 2721384408UL, 3175226991UL, 1393767271UL, 2651623266UL, 3767978376UL, 1269699398UL, 1100964192UL, 4169085845UL, 2086718107UL, 1286251099UL, 764751784UL, 3006878591UL,
},

};

static unsigned int precalc_xorwow_offset_matrix_host[8][800] = {
{
0UL, 0UL, 0UL, 0UL, 3UL, 0UL, 0UL, 0UL, 0UL, 6UL, 0UL, 0UL, 0UL, 0UL, 15UL, 0UL, 0UL, 0UL, 0UL, 30UL, 0UL, 0UL, 0UL, 0UL, 60UL, 0UL, 0UL, 0UL, 0UL, 120UL, 0UL, 0UL,
0UL, 0UL, 240UL, 0UL, 0UL, 0UL, 0UL, 480UL, 0UL, 0UL, 0UL, 0UL, 960UL, 0UL, 0UL, 0UL, 0UL, 1920UL, 0UL, 0UL, 0UL, 0UL, 3840UL, 0UL, 0UL, 0UL, 0UL, 7680UL, 0UL, 0UL, 0UL, 0UL,
15360UL, 0UL, 0UL, 0UL, 0UL, 30720UL, 0UL, 0UL, 0UL, 0UL, 61440UL, 0UL, 0UL, 0UL, 0UL, 122880UL, 0UL, 0UL, 0UL, 0UL, 245760UL, 0UL, 0UL, 0UL, 0UL, 491520UL, 0UL, 0UL, 0UL, 0UL, 983040UL, 0UL,
0UL, 0UL, 0UL, 1966080UL, 0UL, 0UL, 0UL, 0UL, 3932160UL, 0UL, 0UL, 0UL, 0UL, 7864320UL, 0UL, 0UL, 0UL, 0UL, 15728640UL, 0UL, 0UL, 0UL, 0UL, 31457280UL, 0UL, 0UL, 0UL, 0UL, 62914560UL, 0UL, 0UL, 0UL,
0UL, 125829120UL, 0UL, 0UL, 0UL, 0UL, 251658240UL, 0UL, 0UL, 0UL, 0UL, 503316480UL, 0UL, 0UL, 0UL, 0UL, 1006632960UL, 0UL, 0UL, 0UL, 0UL, 2013265920UL, 0UL, 0UL, 0UL, 0UL, 4026531840UL, 0UL, 0UL, 0UL, 0UL, 3758096384UL,
1UL, 0UL, 0UL, 0UL, 0UL, 2UL, 0UL, 0UL, 0UL, 0UL, 4UL, 0UL, 0UL, 0UL, 0UL, 8UL, 0UL, 0UL, 0UL, 0UL, 16UL, 0UL, 0UL, 0UL, 0UL, 32UL, 0UL, 0UL, 0UL, 0UL, 64UL, 0UL,
0UL, 0UL, 0UL, 128UL, 0UL, 0UL, 0UL, 0UL, 256UL, 0UL, 0UL, 0UL, 0UL, 512UL, 0UL, 0UL, 0UL, 0UL, 1024UL, 0UL, 0UL, 0UL, 0UL, 2048UL, 0UL, 0UL, 0UL, 0UL, 4096UL, 0UL, 0UL, 0UL,
0UL, 8192UL, 0UL, 0UL, 0UL, 0UL, 16384UL, 0UL, 0UL, 0UL, 0UL, 32768UL, 0UL, 0UL, 0UL, 0UL, 65536UL, 0UL, 0UL, 0UL, 0UL, 131072UL, 0UL, 0UL, 0UL, 0UL, 262144UL, 0UL, 0UL, 0UL, 0UL, 524288UL,
0UL, 0UL, 0UL, 0UL, 1048576UL, 0UL, 0UL, 0UL, 0UL, 2097152UL, 0UL, 0UL, 0UL, 0UL, 4194304UL, 0UL, 0UL, 0UL, 0UL, 8388608UL, 0UL, 0UL, 0UL, 0UL, 16777216UL, 0UL, 0UL, 0UL, 0UL, 33554432UL, 0UL, 0UL,
0UL, 0UL, 67108864UL, 0UL, 0UL, 0UL, 0UL, 134217728UL, 0UL, 0UL, 0UL, 0UL, 268435456UL, 0UL, 0UL, 0UL, 0UL, 536870912UL, 0UL, 0UL, 0UL, 0UL, 1073741824UL, 0UL, 0UL, 0UL, 0UL, 2147483648UL, 0UL, 0UL, 0UL, 0UL,
0UL, 1UL, 0UL, 0UL, 0UL, 0UL, 2UL, 0UL, 0UL, 0UL, 0UL, 4UL, 0UL, 0UL, 0UL, 0UL, 8UL, 0UL, 0UL, 0UL, 0UL, 16UL, 0UL, 0UL, 0UL, 0UL, 32UL, 0UL, 0UL, 0UL, 0UL, 64UL,
0UL, 0UL, 0UL, 0UL, 128UL, 0UL, 0UL, 0UL, 0UL, 256UL, 0UL, 0UL, 0UL, 0UL, 512UL, 0UL, 0UL, 0UL, 0UL, 1024UL, 0UL, 0UL, 0UL, 0UL, 2048UL, 0UL, 0UL, 0UL, 0UL, 4096UL, 0UL, 0UL,
0UL, 0UL, 8192UL, 0UL, 0UL, 0UL, 0UL, 16384UL, 0UL, 0UL, 0UL, 0UL, 32768UL, 0UL, 0UL, 0UL, 0UL, 65536UL, 0UL, 0UL, 0UL, 0UL, 131072UL, 0UL, 0UL, 0UL, 0UL, 262144UL, 0UL, 0UL, 0UL, 0UL,
524288UL, 0UL, 0UL, 0UL, 0UL, 1048576UL, 0UL, 0UL, 0UL, 0UL, 2097152UL, 0UL, 0UL, 0UL, 0UL, 4194304UL, 0UL, 0UL, 0UL, 0UL, 8388608UL, 0UL, 0UL, 0UL, 0UL, 16777216UL, 0UL, 0UL, 0UL, 0UL, 33554432UL, 0UL,
0UL, 0UL, 0UL, 67108864UL, 0UL, 0UL, 0UL, 0UL, 134217728UL, 0UL, 0UL, 0UL, 0UL, 268435456UL, 0UL, 0UL, 0UL, 0UL, 536870912UL, 0UL, 0UL, 0UL, 0UL, 1073741824UL, 0UL, 0UL, 0UL, 0UL, 2147483648UL, 0UL, 0UL, 0UL,
0UL, 0UL, 1UL, 0UL, 0UL, 0UL, 0UL, 2UL, 0UL, 0UL, 0UL, 0UL, 4UL, 0UL, 0UL, 0UL, 0UL, 8UL, 0UL, 0UL, 0UL, 0UL, 16UL, 0UL, 0UL, 0UL, 0UL, 32UL, 0UL, 0UL, 0UL, 0UL,
64UL, 0UL, 0UL, 0UL, 0UL, 128UL, 0UL, 0UL, 0UL, 0UL, 256UL, 0UL, 0UL, 0UL, 0UL, 512UL, 0UL, 0UL, 0UL, 0UL, 1024UL, 0UL, 0UL, 0UL, 0UL, 2048UL, 0UL, 0UL, 0UL, 0UL, 4096UL, 0UL,
0UL, 0UL, 0UL, 8192UL, 0UL, 0UL, 0UL, 0UL, 16384UL, 0UL, 0UL, 0UL, 0UL, 32768UL, 0UL, 0UL, 0UL, 0UL, 65536UL, 0UL, 0UL, 0UL, 0UL, 131072UL, 0UL, 0UL, 0UL, 0UL, 262144UL, 0UL, 0UL, 0UL,
0UL, 524288UL, 0UL, 0UL, 0UL, 0UL, 1048576UL, 0UL, 0UL, 0UL, 0UL, 2097152UL, 0UL, 0UL, 0UL, 0UL, 4194304UL, 0UL, 0UL, 0UL, 0UL, 8388608UL, 0UL, 0UL, 0UL, 0UL, 16777216UL, 0UL, 0UL, 0UL, 0UL, 33554432UL,
0UL, 0UL, 0UL, 0UL, 67108864UL, 0UL, 0UL, 0UL, 0UL, 134217728UL, 0UL, 0UL, 0UL, 0UL, 268435456UL, 0UL, 0UL, 0UL, 0UL, 536870912UL, 0UL, 0UL, 0UL, 0UL, 1073741824UL, 0UL, 0UL, 0UL, 0UL, 2147483648UL, 0UL, 0UL,
0UL, 0UL, 0UL, 1UL, 17UL, 0UL, 0UL, 0UL, 2UL, 34UL, 0UL, 0UL, 0UL, 4UL, 68UL, 0UL, 0UL, 0UL, 8UL, 136UL, 0UL, 0UL, 0UL, 16UL, 272UL, 0UL, 0UL, 0UL, 32UL, 544UL, 0UL, 0UL,
0UL, 64UL, 1088UL, 0UL, 0UL, 0UL, 128UL, 2176UL, 0UL, 0UL, 0UL, 256UL, 4352UL, 0UL, 0UL, 0UL, 512UL, 8704UL, 0UL, 0UL, 0UL, 1024UL, 17408UL, 0UL, 0UL, 0UL, 2048UL, 34816UL, 0UL, 0UL, 0UL, 4096UL,
69632UL, 0UL, 0UL, 0UL, 8192UL, 139264UL, 0UL, 0UL, 0UL, 16384UL, 278528UL, 0UL, 0UL, 0UL, 32768UL, 557056UL, 0UL, 0UL, 0UL, 65536UL, 1114112UL, 0UL, 0UL, 0UL, 131072UL, 2228224UL, 0UL, 0UL, 0UL, 262144UL, 4456448UL, 0UL,
0UL, 0UL, 524288UL, 8912896UL, 0UL, 0UL, 0UL, 1048576UL, 17825792UL, 0UL, 0UL, 0UL, 2097152UL, 35651584UL, 0UL, 0UL, 0UL, 4194304UL, 71303168UL, 0UL, 0UL, 0UL, 8388608UL, 142606336UL, 0UL, 0UL, 0UL, 16777216UL, 285212672UL, 0UL, 0UL, 0UL,
33554432UL, 570425344UL, 0UL, 0UL, 0UL, 67108864UL, 1140850688UL, 0UL, 0UL, 0UL, 134217728UL, 2281701376UL, 0UL, 0UL, 0UL, 268435456UL, 268435456UL, 0UL, 0UL, 0UL, 536870912UL, 536870912UL, 0UL, 0UL, 0UL, 1073741824UL, 1073741824UL, 0UL, 0UL, 0UL, 2147483648UL, 2147483648UL,
},
{
0UL, 3UL, 51UL, 771UL, 13107UL, 0UL, 6UL, 102UL, 1542UL, 26214UL, 0UL, 15UL, 255UL, 3855UL, 65535UL, 0UL, 30UL, 510UL, 7710UL, 131070UL, 0UL, 60UL, 1020UL, 15420UL, 262140UL, 0UL, 120UL, 2040UL, 30840UL, 524280UL, 0UL, 240UL,
4080UL, 61680UL, 1048560UL, 0UL, 480UL, 8160UL, 123360UL, 2097120UL, 0UL, 960UL, 16320UL, 246720UL, 4194240UL, 0UL, 1920UL, 32640UL, 493440UL, 8388480UL, 0UL, 3840UL, 65280UL, 986880UL, 16776960UL, 0UL, 7680UL, 130560UL, 1973760UL, 33553920UL, 0UL, 15360UL, 261120UL, 3947520UL,
67107840UL, 0UL, 30720UL, 522240UL, 7895040UL, 134215680UL, 0UL, 61440UL, 1044480UL, 15790080UL, 268431360UL, 0UL, 122880UL, 2088960UL, 31580160UL, 536862720UL, 0UL, 245760UL, 4177920UL, 63160320UL, 1073725440UL, 0UL, 491520UL, 8355840UL, 126320640UL, 2147450880UL, 0UL, 983040UL, 16711680UL, 252641280UL, 4294901760UL, 0UL,
1966080UL, 33423360UL, 505282560UL, 4294836224UL, 0UL, 3932160UL, 66846720UL, 1010565120UL, 4294705152UL, 0UL, 7864320UL, 133693440UL, 2021130240UL, 4294443008UL, 0UL, 15728640UL, 267386880UL, 4042260480UL, 4293918720UL, 0UL, 31457280UL, 534773760UL, 3789553664UL, 4292870144UL, 0UL, 62914560UL, 1069547520UL, 3284140032UL, 4290772992UL, 0UL, 125829120UL, 2139095040UL,
2273312768UL, 4286578688UL, 0UL, 251658240UL, 4278190080UL, 251658240UL, 4278190080UL, 0UL, 503316480UL, 4261412864UL, 503316480UL, 4261412864UL, 0UL, 1006632960UL, 4227858432UL, 1006632960UL, 4227858432UL, 0UL, 2013265920UL, 4160749568UL, 2013265920UL, 4160749568UL, 0UL, 4026531840UL, 4026531840UL, 4026531840UL, 4026531840UL, 0UL, 3758096384UL, 3758096384UL, 3758096384UL, 3758096384UL,
0UL, 0UL, 3UL, 51UL, 771UL, 0UL, 0UL, 6UL, 102UL, 1542UL, 0UL, 0UL, 15UL, 255UL, 3855UL, 0UL, 0UL, 30UL, 510UL, 7710UL, 0UL, 0UL, 60UL, 1020UL, 15420UL, 0UL, 0UL, 120UL, 2040UL, 30840UL, 0UL, 0UL,
240UL, 4080UL, 61680UL, 0UL, 0UL, 480UL, 8160UL, 123360UL, 0UL, 0UL, 960UL, 16320UL, 246720UL, 0UL, 0UL, 1920UL, 32640UL, 493440UL, 0UL, 0UL, 3840UL, 65280UL, 986880UL, 0UL, 0UL, 7680UL, 130560UL, 1973760UL, 0UL, 0UL, 15360UL, 261120UL,
3947520UL, 0UL, 0UL, 30720UL, 522240UL, 7895040UL, 0UL, 0UL, 61440UL, 1044480UL, 15790080UL, 0UL, 0UL, 122880UL, 2088960UL, 31580160UL, 0UL, 0UL, 245760UL, 4177920UL, 63160320UL, 0UL, 0UL, 491520UL, 8355840UL, 126320640UL, 0UL, 0UL, 983040UL, 16711680UL, 252641280UL, 0UL,
0UL, 1966080UL, 33423360UL, 505282560UL, 0UL, 0UL, 3932160UL, 66846720UL, 1010565120UL, 0UL, 0UL, 7864320UL, 133693440UL, 2021130240UL, 0UL, 0UL, 15728640UL, 267386880UL, 4042260480UL, 0UL, 0UL, 31457280UL, 534773760UL, 3789553664UL, 0UL, 0UL, 62914560UL, 1069547520UL, 3284140032UL, 0UL, 0UL, 125829120UL,
2139095040UL, 2273312768UL, 0UL, 0UL, 251658240UL, 4278190080UL, 251658240UL, 0UL, 0UL, 503316480UL, 4261412864UL, 503316480UL, 0UL, 0UL, 1006632960UL, 4227858432UL, 1006632960UL, 0UL, 0UL, 2013265920UL, 4160749568UL, 2013265920UL, 0UL, 0UL, 4026531840UL, 4026531840UL, 4026531840UL, 0UL, 0UL, 3758096384UL, 3758096384UL, 3758096384UL,
0UL, 0UL, 0UL, 3UL, 51UL, 0UL, 0UL, 0UL, 6UL, 102UL, 0UL, 0UL, 0UL, 15UL, 255UL, 0UL, 0UL, 0UL, 30UL, 510UL, 0UL, 0UL, 0UL, 60UL, 1020UL, 0UL, 0UL, 0UL, 120UL, 2040UL, 0UL, 0UL,
0UL, 240UL, 4080UL, 0UL, 0UL, 0UL, 480UL, 8160UL, 0UL, 0UL, 0UL, 960UL, 16320UL, 0UL, 0UL, 0UL, 1920UL, 32640UL, 0UL, 0UL, 0UL, 3840UL, 65280UL, 0UL, 0UL, 0UL, 7680UL, 130560UL, 0UL, 0UL, 0UL, 15360UL,
261120UL, 0UL, 0UL, 0UL, 30720UL, 522240UL, 0UL, 0UL, 0UL, 61440UL, 1044480UL, 0UL, 0UL, 0UL, 122880UL, 2088960UL, 0UL, 0UL, 0UL, 245760UL, 4177920UL, 0UL, 0UL, 0UL, 491520UL, 8355840UL, 0UL, 0UL, 0UL, 983040UL, 16711680UL, 0UL,
0UL, 0UL, 1966080UL, 33423360UL, 0UL, 0UL, 0UL, 3932160UL, 66846720UL, 0UL, 0UL, 0UL, 7864320UL, 133693440UL, 0UL, 0UL, 0UL, 15728640UL, 267386880UL, 0UL, 0UL, 0UL, 31457280UL, 534773760UL, 0UL, 0UL, 0UL, 62914560UL, 1069547520UL, 0UL, 0UL, 0UL,
125829120UL, 2139095040UL, 0UL, 0UL, 0UL, 251658240UL, 4278190080UL, 0UL, 0UL, 0UL, 503316480UL, 4261412864UL, 0UL, 0UL, 0UL, 1006632960UL, 4227858432UL, 0UL, 0UL, 0UL, 2013265920UL, 4160749568UL, 0UL, 0UL, 0UL, 4026531840UL, 4026531840UL, 0UL, 0UL, 0UL, 3758096384UL, 3758096384UL,
0UL, 0UL, 0UL, 0UL, 3UL, 0UL, 0UL, 0UL, 0UL, 6UL, 0UL, 0UL, 0UL, 0UL, 15UL, 0UL, 0UL, 0UL, 0UL, 30UL, 0UL, 0UL, 0UL, 0UL, 60UL, 0UL, 0UL, 0UL, 0UL, 120UL, 0UL, 0UL,
0UL, 0UL, 240UL, 0UL, 0UL, 0UL, 0UL, 480UL, 0UL, 0UL, 0UL, 0UL, 960UL, 0UL, 0UL, 0UL, 0UL, 1920UL, 0UL, 0UL, 0UL, 0UL, 3840UL, 0UL, 0UL, 0UL, 0UL, 7680UL, 0UL, 0UL, 0UL, 0UL,
15360UL, 0UL, 0UL, 0UL, 0UL, 30720UL, 0UL, 0UL, 0UL, 0UL, 61440UL, 0UL, 0UL, 0UL, 0UL, 122880UL, 0UL, 0UL, 0UL, 0UL, 245760UL, 0UL, 0UL, 0UL, 0UL, 491520UL, 0UL, 0UL, 0UL, 0UL, 983040UL, 0UL,
0UL, 0UL, 0UL, 1966080UL, 0UL, 0UL, 0UL, 0UL, 3932160UL, 0UL, 0UL, 0UL, 0UL, 7864320UL, 0UL, 0UL, 0UL, 0UL, 15728640UL, 0UL, 0UL, 0UL, 0UL, 31457280UL, 0UL, 0UL, 0UL, 0UL, 62914560UL, 0UL, 0UL, 0UL,
0UL, 125829120UL, 0UL, 0UL, 0UL, 0UL, 251658240UL, 0UL, 0UL, 0UL, 0UL, 503316480UL, 0UL, 0UL, 0UL, 0UL, 1006632960UL, 0UL, 0UL, 0UL, 0UL, 2013265920UL, 0UL, 0UL, 0UL, 0UL, 4026531840UL, 0UL, 0UL, 0UL, 0UL, 3758096384UL,
1UL, 17UL, 257UL, 4369UL, 65537UL, 2UL, 34UL, 514UL, 8738UL, 131074UL, 4UL, 68UL, 1028UL, 17476UL, 262148UL, 8UL, 136UL, 2056UL, 34952UL, 524296UL, 16UL, 272UL, 4112UL, 69904UL, 1048592UL, 32UL, 544UL, 8224UL, 139808UL, 2097184UL, 64UL, 1088UL,
16448UL, 279616UL, 4194368UL, 128UL, 2176UL, 32896UL, 559232UL, 8388736UL, 256UL, 4352UL, 65792UL, 1118464UL, 16777472UL, 512UL, 8704UL, 131584UL, 2236928UL, 33554944UL, 1024UL, 17408UL, 263168UL, 4473856UL, 67109888UL, 2048UL, 34816UL, 526336UL, 8947712UL, 134219776UL, 4096UL, 69632UL, 1052672UL, 17895424UL,
268439552UL, 8192UL, 139264UL, 2105344UL, 35790848UL, 536879104UL, 16384UL, 278528UL, 4210688UL, 71581696UL, 1073758208UL, 32768UL, 557056UL, 8421376UL, 143163392UL, 2147516416UL, 65536UL, 1114112UL, 16842752UL, 286326784UL, 65536UL, 131072UL, 2228224UL, 33685504UL, 572653568UL, 131072UL, 262144UL, 4456448UL, 67371008UL, 1145307136UL, 262144UL, 524288UL,
8912896UL, 134742016UL, 2290614272UL, 524288UL, 1048576UL, 17825792UL, 269484032UL, 286261248UL, 1048576UL, 2097152UL, 35651584UL, 538968064UL, 572522496UL, 2097152UL, 4194304UL, 71303168UL, 1077936128UL, 1145044992UL, 4194304UL, 8388608UL, 142606336UL, 2155872256UL, 2290089984UL, 8388608UL, 16777216UL, 285212672UL, 16777216UL, 285212672UL, 16777216UL, 33554432UL, 570425344UL, 33554432UL,
570425344UL, 33554432UL, 67108864UL, 1140850688UL, 67108864UL, 1140850688UL, 67108864UL, 134217728UL, 2281701376UL, 134217728UL, 2281701376UL, 134217728UL, 268435456UL, 268435456UL, 268435456UL, 268435456UL, 268435456UL, 536870912UL, 536870912UL, 536870912UL, 536870912UL, 536870912UL, 1073741824UL, 1073741824UL, 1073741824UL, 1073741824UL, 1073741824UL, 2147483648UL, 2147483648UL, 2147483648UL, 2147483648UL, 2147483648UL,
},
{
85009117UL, 335741939UL, 1412632518UL, 386859243UL, 1741437244UL, 152139416UL, 403047142UL, 2556825231UL, 505087203UL, 4287193174UL, 335609039UL, 336528191UL, 1425998811UL, 456920088UL, 2832198590UL, 724748988UL, 3625845630UL, 1509824181UL, 3330088197UL, 2710488401UL, 1431742057UL, 1077674236UL, 1140592489UL, 2096905276UL, 3007294393UL, 2863484114UL, 1081606648UL, 1207443154UL, 972585080UL, 2793363314UL, 1432000919UL, 1089470704UL,
1341132452UL, 3019109363UL, 2362285522UL, 1790260014UL, 2178941408UL, 2682264904UL, 1743251430UL, 429603751UL, 359294556UL, 62915520UL, 1069562512UL, 3486502860UL, 859207501UL, 3939814584UL, 125831040UL, 2139125024UL, 2678038424UL, 1718415002UL, 363436400UL, 251662080UL, 4278250048UL, 1061109552UL, 3436830004UL, 3948098272UL, 503324160UL, 4261532800UL, 2122219104UL, 2310257256UL, 380003776UL, 1006648320UL, 4228098304UL, 4244438208UL,
3278337232UL, 3981233024UL, 2013296640UL, 4161229312UL, 4193909120UL, 2530142624UL, 446273280UL, 4026593280UL, 4027491328UL, 871625472UL, 4254978880UL, 4113772032UL, 3758219264UL, 3760015360UL, 2011686400UL, 3946555008UL, 711351296UL, 3221471232UL, 3225063424UL, 4291808256UL, 108481792UL, 2496444416UL, 2147975168UL, 2155159552UL, 4020213760UL, 485399040UL, 3919147008UL, 983040UL, 15351808UL, 255799296UL, 3923588096UL, 322101248UL,
1966080UL, 299139072UL, 511598592UL, 3283773440UL, 3865427968UL, 3932160UL, 4087939072UL, 1023197184UL, 1467273216UL, 214663168UL, 7864320UL, 4149346304UL, 2046394368UL, 3202981888UL, 3650551808UL, 3236954112UL, 1050935296UL, 871563264UL, 2916302848UL, 1932394496UL, 2447376384UL, 1833435136UL, 2011561984UL, 2342944768UL, 643563520UL, 868220928UL, 177209344UL, 4291559424UL, 122486784UL, 2360868864UL, 2004877312UL, 85983232UL,
4019716096UL, 3734634496UL, 3647995904UL, 1056964608UL, 3661627392UL, 254803968UL, 2905866240UL, 1658847232UL, 2113929216UL, 3028287488UL, 3730833408UL, 2322071552UL, 3586129920UL, 4227858432UL, 1761607680UL, 2092957696UL, 80740352UL, 2071986176UL, 4160749568UL, 3523215360UL, 964689920UL, 429916160UL, 3875536896UL, 4026531840UL, 2751463424UL, 1929379840UL, 4081057792UL, 503316480UL, 3758096384UL, 2281701376UL, 4127195136UL, 3397386240UL,
1316635UL, 85009117UL, 335741939UL, 1412632518UL, 386859243UL, 1580547UL, 152139416UL, 403047142UL, 2556825231UL, 505087203UL, 1317672UL, 335609039UL, 336528191UL, 1425998811UL, 456920088UL, 1574501UL, 724748988UL, 3625845630UL, 1509824181UL, 3330088197UL, 15612UL, 1431742057UL, 1077674236UL, 1140592489UL, 2096905276UL, 31224UL, 2863484114UL, 1081606648UL, 1207443154UL, 972585080UL, 62451UL, 1432000919UL,
1089470704UL, 1341132452UL, 3019109363UL, 124902UL, 1790260014UL, 2178941408UL, 2682264904UL, 1743251430UL, 249804UL, 359294556UL, 62915520UL, 1069562512UL, 3486502860UL, 499608UL, 3939814584UL, 125831040UL, 2139125024UL, 2678038424UL, 999216UL, 363436400UL, 251662080UL, 4278250048UL, 1061109552UL, 3223223904UL, 3948098272UL, 503324160UL, 4261532800UL, 2122219104UL, 1077738688UL, 380003776UL, 1006648320UL, 4228098304UL,
4244438208UL, 1081735552UL, 3981233024UL, 2013296640UL, 4161229312UL, 4193909120UL, 1089729280UL, 446273280UL, 4026593280UL, 4027491328UL, 871625472UL, 2179458560UL, 4113772032UL, 3758219264UL, 3760015360UL, 2011686400UL, 63949824UL, 711351296UL, 3221471232UL, 3225063424UL, 4291808256UL, 127899648UL, 2496444416UL, 2147975168UL, 2155159552UL, 4020213760UL, 255799296UL, 3919147008UL, 983040UL, 15351808UL, 255799296UL, 3732824064UL,
322101248UL, 1966080UL, 299139072UL, 511598592UL, 2096939008UL, 3865427968UL, 3932160UL, 4087939072UL, 1023197184UL, 972652544UL, 214663168UL, 7864320UL, 4149346304UL, 2046394368UL, 3019046912UL, 3650551808UL, 3236954112UL, 1050935296UL, 871563264UL, 1743126528UL, 1932394496UL, 2447376384UL, 1833435136UL, 2011561984UL, 3486253056UL, 643563520UL, 868220928UL, 177209344UL, 4291559424UL, 2677538816UL, 2360868864UL, 2004877312UL,
85983232UL, 4019716096UL, 1060110336UL, 3647995904UL, 1056964608UL, 3661627392UL, 254803968UL, 3193962496UL, 1658847232UL, 2113929216UL, 3028287488UL, 3730833408UL, 3166699520UL, 3586129920UL, 4227858432UL, 1761607680UL, 2092957696UL, 3112173568UL, 2071986176UL, 4160749568UL, 3523215360UL, 964689920UL, 1929379840UL, 3875536896UL, 4026531840UL, 2751463424UL, 1929379840UL, 4127195136UL, 503316480UL, 3758096384UL, 2281701376UL, 4127195136UL,
332854UL, 1316635UL, 85009117UL, 335741939UL, 1412632518UL, 596079UL, 1580547UL, 152139416UL, 403047142UL, 2556825231UL, 1316075UL, 1317672UL, 335609039UL, 336528191UL, 1425998811UL, 2824661UL, 1574501UL, 724748988UL, 3625845630UL, 1509824181UL, 5571497UL, 15612UL, 1431742057UL, 1077674236UL, 1140592489UL, 11142994UL, 31224UL, 2863484114UL, 1081606648UL, 1207443154UL, 22285988UL, 62451UL,
1432000919UL, 1089470704UL, 1341132452UL, 44571976UL, 124902UL, 1790260014UL, 2178941408UL, 2682264904UL, 89143952UL, 249804UL, 359294556UL, 62915520UL, 1069562512UL, 178287904UL, 499608UL, 3939814584UL, 125831040UL, 2139125024UL, 356575808UL, 999216UL, 363436400UL, 251662080UL, 4278250048UL, 713151616UL, 3223223904UL, 3948098272UL, 503324160UL, 4261532800UL, 1426303232UL, 1077738688UL, 380003776UL, 1006648320UL,
4228098304UL, 2852606464UL, 1081735552UL, 3981233024UL, 2013296640UL, 4161229312UL, 1410245632UL, 1089729280UL, 446273280UL, 4026593280UL, 4027491328UL, 1746749440UL, 2179458560UL, 4113772032UL, 3758219264UL, 3760015360UL, 272273408UL, 63949824UL, 711351296UL, 3221471232UL, 3225063424UL, 3765772288UL, 127899648UL, 2496444416UL, 2147975168UL, 2155159552UL, 15351808UL, 255799296UL, 3919147008UL, 983040UL, 15351808UL, 3251929088UL,
3732824064UL, 322101248UL, 1966080UL, 299139072UL, 1135149056UL, 2096939008UL, 3865427968UL, 3932160UL, 4087939072UL, 1196556288UL, 972652544UL, 214663168UL, 7864320UL, 4149346304UL, 1319370752UL, 3019046912UL, 3650551808UL, 3236954112UL, 1050935296UL, 2638741504UL, 1743126528UL, 1932394496UL, 2447376384UL, 1833435136UL, 982515712UL, 3486253056UL, 643563520UL, 868220928UL, 177209344UL, 1965031424UL, 2677538816UL, 2360868864UL,
2004877312UL, 85983232UL, 3930062848UL, 1060110336UL, 3647995904UL, 1056964608UL, 3661627392UL, 3565158400UL, 3193962496UL, 1658847232UL, 2113929216UL, 3028287488UL, 2835349504UL, 3166699520UL, 3586129920UL, 4227858432UL, 1761607680UL, 1375731712UL, 3112173568UL, 2071986176UL, 4160749568UL, 3523215360UL, 2751463424UL, 1929379840UL, 3875536896UL, 4026531840UL, 2751463424UL, 2281701376UL, 4127195136UL, 503316480UL, 3758096384UL, 2281701376UL,
5123UL, 332854UL, 1316635UL, 85009117UL, 335741939UL, 6150UL, 596079UL, 1580547UL, 152139416UL, 403047142UL, 5135UL, 1316075UL, 1317672UL, 335609039UL, 336528191UL, 6174UL, 2824661UL, 1574501UL, 724748988UL, 3625845630UL, 60UL, 5571497UL, 15612UL, 1431742057UL, 1077674236UL, 120UL, 11142994UL, 31224UL, 2863484114UL, 1081606648UL, 240UL, 22285988UL,
62451UL, 1432000919UL, 1089470704UL, 480UL, 44571976UL, 124902UL, 1790260014UL, 2178941408UL, 960UL, 89143952UL, 249804UL, 359294556UL, 62915520UL, 1920UL, 178287904UL, 499608UL, 3939814584UL, 125831040UL, 3840UL, 356575808UL, 999216UL, 363436400UL, 251662080UL, 7680UL, 713151616UL, 3223223904UL, 3948098272UL, 503324160UL, 15360UL, 1426303232UL, 1077738688UL, 380003776UL,
1006648320UL, 30720UL, 2852606464UL, 1081735552UL, 3981233024UL, 2013296640UL, 61440UL, 1410245632UL, 1089729280UL, 446273280UL, 4026593280UL, 122880UL, 1746749440UL, 2179458560UL, 4113772032UL, 3758219264UL, 245760UL, 272273408UL, 63949824UL, 711351296UL, 3221471232UL, 491520UL, 3765772288UL, 127899648UL, 2496444416UL, 2147975168UL, 983040UL, 15351808UL, 255799296UL, 3919147008UL, 983040UL, 3223191552UL,
3251929088UL, 3732824064UL, 322101248UL, 1966080UL, 1077673984UL, 1135149056UL, 2096939008UL, 3865427968UL, 3932160UL, 1081606144UL, 1196556288UL, 972652544UL, 214663168UL, 7864320UL, 1089470464UL, 1319370752UL, 3019046912UL, 3650551808UL, 3236954112UL, 2178940928UL, 2638741504UL, 1743126528UL, 1932394496UL, 2447376384UL, 62914560UL, 982515712UL, 3486253056UL, 643563520UL, 868220928UL, 125829120UL, 1965031424UL, 2677538816UL,
2360868864UL, 2004877312UL, 251658240UL, 3930062848UL, 1060110336UL, 3647995904UL, 1056964608UL, 503316480UL, 3565158400UL, 3193962496UL, 1658847232UL, 2113929216UL, 1006632960UL, 2835349504UL, 3166699520UL, 3586129920UL, 4227858432UL, 2013265920UL, 1375731712UL, 3112173568UL, 2071986176UL, 4160749568UL, 4026531840UL, 2751463424UL, 1929379840UL, 3875536896UL, 4026531840UL, 3758096384UL, 2281701376UL, 4127195136UL, 503316480UL, 3758096384UL,
201392209UL, 3423671362UL, 218366296UL, 3713336838UL, 206572594UL, 402785186UL, 2552372100UL, 436928947UL, 3130605370UL, 463476848UL, 262468UL, 4461835UL, 68158800UL, 1158700908UL, 20971524UL, 524680UL, 8919318UL, 136513955UL, 2316537326UL, 25165852UL, 3222274064UL, 3239051564UL, 3494187077UL, 3558090985UL, 3221225500UL, 2149580832UL, 2183135832UL, 2693406858UL, 2821214674UL, 2147483704UL, 4194368UL, 71304368UL,
1091846420UL, 1347462055UL, 64UL, 8388736UL, 142608736UL, 2183692840UL, 2694924110UL, 3221225600UL, 16777472UL, 285217472UL, 72418384UL, 1094880924UL, 1342177536UL, 33554944UL, 570434944UL, 144836768UL, 2189761848UL, 2684355072UL, 67109888UL, 1140869888UL, 289673536UL, 84556400UL, 1073742848UL, 134219776UL, 2281739776UL, 579347072UL, 169112800UL, 2147485696UL, 268439552UL, 268512256UL, 1158694144UL, 69790144UL,
4096UL, 536879104UL, 537024512UL, 2317388288UL, 3360805760UL, 8192UL, 1073758208UL, 1074049024UL, 339809280UL, 1352902400UL, 16384UL, 2147516416UL, 2148098048UL, 3900844032UL, 1632062976UL, 32768UL, 65536UL, 1228800UL, 17059840UL, 311335936UL, 65536UL, 131072UL, 2457600UL, 34119680UL, 622671872UL, 131072UL, 262144UL, 4915200UL, 68239360UL, 1245343744UL, 262144UL, 524288UL,
9830400UL, 136478720UL, 2490687488UL, 524288UL, 1048576UL, 288096256UL, 272957440UL, 954843136UL, 3222274048UL, 2097152UL, 3797417984UL, 545914880UL, 2983428096UL, 2149580800UL, 4194304UL, 78643200UL, 1091829760UL, 2745630720UL, 4194304UL, 3229614080UL, 3378511872UL, 1109917696UL, 2270035968UL, 8388608UL, 1358954496UL, 1119879168UL, 1414529024UL, 513540096UL, 16777216UL, 2717908992UL, 2239758336UL, 2829058048UL,
1027080192UL, 33554432UL, 1140850688UL, 184549376UL, 1363148800UL, 2054160384UL, 3288334336UL, 2281701376UL, 369098752UL, 2726297600UL, 4108320768UL, 2281701376UL, 268435456UL, 738197504UL, 2231369728UL, 968884224UL, 3959422976UL, 536870912UL, 1476395008UL, 167772160UL, 3011510272UL, 3355443200UL, 1073741824UL, 2952790016UL, 335544320UL, 1728053248UL, 2147483648UL, 2147483648UL, 1610612736UL, 3892314112UL, 503316480UL, 0UL,
},
{
1939838472UL, 1412147404UL, 166205219UL, 1757484276UL, 2905930693UL, 2345662040UL, 2845657161UL, 253454719UL, 2661974169UL, 303781080UL, 4075331504UL, 31014156UL, 244538930UL, 3752264221UL, 992575155UL, 219309525UL, 246620060UL, 215640989UL, 4125020723UL, 2016731730UL, 3236558869UL, 297169276UL, 3293566751UL, 1867504216UL, 210423272UL, 2531663658UL, 499723753UL, 1730625896UL, 189236880UL, 3388575408UL, 2433358422UL, 1368961148UL,
3134096848UL, 2827836415UL, 3888822753UL, 4172043647UL, 3379360748UL, 2651760955UL, 1345081091UL, 627692776UL, 189423917UL, 1927379456UL, 4004336944UL, 2995932065UL, 1882016234UL, 2551113616UL, 1576396048UL, 1299792730UL, 2151240795UL, 2154814108UL, 4292139924UL, 3555849728UL, 943986992UL, 3169912733UL, 2631635779UL, 3478094562UL, 1285558544UL, 3716074330UL, 2780749859UL, 3911106510UL, 4175656994UL, 1731832828UL, 1275401375UL, 937322456UL,
3802094750UL, 1145506936UL, 1008905193UL, 1718801768UL, 645739137UL, 1356219146UL, 827886816UL, 1722154800UL, 2242776733UL, 754630810UL, 772070504UL, 249481170UL, 2608123425UL, 2087201889UL, 3200968096UL, 3292110026UL, 841433255UL, 477543427UL, 1878882709UL, 705347364UL, 4003860146UL, 3194913138UL, 2616490007UL, 357561212UL, 2446098297UL, 2955680594UL, 2512991743UL, 637464579UL, 1209132455UL, 1341312804UL, 612108672UL, 2455017713UL,
1749147666UL, 4020226825UL, 2873924220UL, 499405095UL, 1837614076UL, 1227604028UL, 714577577UL, 165950208UL, 442290261UL, 489077752UL, 216760440UL, 42151250UL, 426862080UL, 2810242474UL, 4112075489UL, 3514761468UL, 4101921371UL, 982512636UL, 500792667UL, 4286077681UL, 198050301UL, 1858712743UL, 2913642493UL, 3547545255UL, 3981929169UL, 2944140287UL, 2286578015UL, 3422343167UL, 1239123295UL, 2026367394UL, 3269986302UL, 3028402878UL,
2709637886UL, 1096011710UL, 294584132UL, 3086749695UL, 3324400975UL, 1164394495UL, 4290155855UL, 543687304UL, 4008517630UL, 836370334UL, 1876426750UL, 2362048414UL, 3578325264UL, 3221487612UL, 2671154748UL, 3395518460UL, 2018383420UL, 2131029536UL, 2165829624UL, 697661816UL, 1336049656UL, 3309365624UL, 4259639360UL, 3423548400UL, 2416417776UL, 1633698800UL, 1630071792UL, 41950336UL, 3423478496UL, 2885608160UL, 3943744224UL, 677380832UL,
4179285363UL, 1939838472UL, 1412147404UL, 166205219UL, 1757484276UL, 3838244595UL, 2345662040UL, 2845657161UL, 253454719UL, 2661974169UL, 138737288UL, 4075331504UL, 31014156UL, 244538930UL, 3752264221UL, 1503392345UL, 219309525UL, 246620060UL, 215640989UL, 4125020723UL, 1759481152UL, 3236558869UL, 297169276UL, 3293566751UL, 1867504216UL, 3898070400UL, 2531663658UL, 499723753UL, 1730625896UL, 189236880UL, 2610231010UL, 2433358422UL,
1368961148UL, 3134096848UL, 2827836415UL, 3903474593UL, 4172043647UL, 3379360748UL, 2651760955UL, 1345081091UL, 1267864331UL, 189423917UL, 1927379456UL, 4004336944UL, 2995932065UL, 3452816347UL, 2551113616UL, 1576396048UL, 1299792730UL, 2151240795UL, 1222520631UL, 4292139924UL, 3555849728UL, 943986992UL, 3169912733UL, 3260130211UL, 3478094562UL, 1285558544UL, 3716074330UL, 2780749859UL, 3039362306UL, 4175656994UL, 1731832828UL, 1275401375UL,
937322456UL, 3236754932UL, 1145506936UL, 1008905193UL, 1718801768UL, 645739137UL, 1358079399UL, 827886816UL, 1722154800UL, 2242776733UL, 754630810UL, 1748663943UL, 249481170UL, 2608123425UL, 2087201889UL, 3200968096UL, 698076610UL, 841433255UL, 477543427UL, 1878882709UL, 705347364UL, 3692794996UL, 3194913138UL, 2616490007UL, 357561212UL, 2446098297UL, 2771068186UL, 2512991743UL, 637464579UL, 1209132455UL, 1341312804UL, 27937268UL,
2455017713UL, 1749147666UL, 4020226825UL, 2873924220UL, 1673040956UL, 1837614076UL, 1227604028UL, 714577577UL, 165950208UL, 528340088UL, 489077752UL, 216760440UL, 42151250UL, 426862080UL, 1646215396UL, 4112075489UL, 3514761468UL, 4101921371UL, 982512636UL, 2095821304UL, 4286077681UL, 198050301UL, 1858712743UL, 2913642493UL, 277300160UL, 3981929169UL, 2944140287UL, 2286578015UL, 3422343167UL, 1178044288UL, 2026367394UL, 3269986302UL,
3028402878UL, 2709637886UL, 2234191616UL, 294584132UL, 3086749695UL, 3324400975UL, 1164394495UL, 136978944UL, 543687304UL, 4008517630UL, 836370334UL, 1876426750UL, 3275253760UL, 3578325264UL, 3221487612UL, 2671154748UL, 3395518460UL, 3942394880UL, 2131029536UL, 2165829624UL, 697661816UL, 1336049656UL, 3265045504UL, 4259639360UL, 3423548400UL, 2416417776UL, 1633698800UL, 3943712768UL, 41950336UL, 3423478496UL, 2885608160UL, 3943744224UL,
2293593009UL, 4179285363UL, 1939838472UL, 1412147404UL, 166205219UL, 715714152UL, 3838244595UL, 2345662040UL, 2845657161UL, 253454719UL, 3758048260UL, 138737288UL, 4075331504UL, 31014156UL, 244538930UL, 370671650UL, 1503392345UL, 219309525UL, 246620060UL, 215640989UL, 2219162331UL, 1759481152UL, 3236558869UL, 297169276UL, 3293566751UL, 135243402UL, 3898070400UL, 2531663658UL, 499723753UL, 1730625896UL, 3142293713UL, 2610231010UL,
2433358422UL, 1368961148UL, 3134096848UL, 486949791UL, 3903474593UL, 4172043647UL, 3379360748UL, 2651760955UL, 3172880550UL, 1267864331UL, 189423917UL, 1927379456UL, 4004336944UL, 191463910UL, 3452816347UL, 2551113616UL, 1576396048UL, 1299792730UL, 4411574UL, 1222520631UL, 4292139924UL, 3555849728UL, 943986992UL, 3073348038UL, 3260130211UL, 3478094562UL, 1285558544UL, 3716074330UL, 3098363790UL, 3039362306UL, 4175656994UL, 1731832828UL,
1275401375UL, 468159532UL, 3236754932UL, 1145506936UL, 1008905193UL, 1718801768UL, 1092964081UL, 1358079399UL, 827886816UL, 1722154800UL, 2242776733UL, 53128947UL, 1748663943UL, 249481170UL, 2608123425UL, 2087201889UL, 1960144614UL, 698076610UL, 841433255UL, 477543427UL, 1878882709UL, 1505419004UL, 3692794996UL, 3194913138UL, 2616490007UL, 357561212UL, 2823143358UL, 2771068186UL, 2512991743UL, 637464579UL, 1209132455UL, 1991737212UL,
27937268UL, 2455017713UL, 1749147666UL, 4020226825UL, 2907896812UL, 1673040956UL, 1837614076UL, 1227604028UL, 714577577UL, 3633969112UL, 528340088UL, 489077752UL, 216760440UL, 42151250UL, 2886728356UL, 1646215396UL, 4112075489UL, 3514761468UL, 4101921371UL, 3507686008UL, 2095821304UL, 4286077681UL, 198050301UL, 1858712743UL, 1463806912UL, 277300160UL, 3981929169UL, 2944140287UL, 2286578015UL, 4137888640UL, 1178044288UL, 2026367394UL,
3269986302UL, 3028402878UL, 1276820224UL, 2234191616UL, 294584132UL, 3086749695UL, 3324400975UL, 4274031104UL, 136978944UL, 543687304UL, 4008517630UL, 836370334UL, 2978609152UL, 3275253760UL, 3578325264UL, 3221487612UL, 2671154748UL, 2296777728UL, 3942394880UL, 2131029536UL, 2165829624UL, 697661816UL, 1086645248UL, 3265045504UL, 4259639360UL, 3423548400UL, 2416417776UL, 2295121920UL, 3943712768UL, 41950336UL, 3423478496UL, 2885608160UL,
3290486993UL, 2293593009UL, 4179285363UL, 1939838472UL, 1412147404UL, 3718742914UL, 715714152UL, 3838244595UL, 2345662040UL, 2845657161UL, 3251034248UL, 3758048260UL, 138737288UL, 4075331504UL, 31014156UL, 2257801369UL, 370671650UL, 1503392345UL, 219309525UL, 246620060UL, 1375177854UL, 2219162331UL, 1759481152UL, 3236558869UL, 297169276UL, 2981812236UL, 135243402UL, 3898070400UL, 2531663658UL, 499723753UL, 1103465850UL, 3142293713UL,
2610231010UL, 2433358422UL, 1368961148UL, 2570001060UL, 486949791UL, 3903474593UL, 4172043647UL, 3379360748UL, 1922171925UL, 3172880550UL, 1267864331UL, 189423917UL, 1927379456UL, 1359812359UL, 191463910UL, 3452816347UL, 2551113616UL, 1576396048UL, 2518549525UL, 4411574UL, 1222520631UL, 4292139924UL, 3555849728UL, 949028615UL, 3073348038UL, 3260130211UL, 3478094562UL, 1285558544UL, 4113039486UL, 3098363790UL, 3039362306UL, 4175656994UL,
1731832828UL, 1827471372UL, 468159532UL, 3236754932UL, 1145506936UL, 1008905193UL, 1626341859UL, 1092964081UL, 1358079399UL, 827886816UL, 1722154800UL, 1069547583UL, 53128947UL, 1748663943UL, 249481170UL, 2608123425UL, 3162506114UL, 1960144614UL, 698076610UL, 841433255UL, 477543427UL, 3641706484UL, 1505419004UL, 3692794996UL, 3194913138UL, 2616490007UL, 3623882586UL, 2823143358UL, 2771068186UL, 2512991743UL, 637464579UL, 16785012UL,
1991737212UL, 27937268UL, 2455017713UL, 1749147666UL, 2348825660UL, 2907896812UL, 1673040956UL, 1837614076UL, 1227604028UL, 2579527800UL, 3633969112UL, 528340088UL, 489077752UL, 216760440UL, 3628134628UL, 2886728356UL, 1646215396UL, 4112075489UL, 3514761468UL, 1602085368UL, 3507686008UL, 2095821304UL, 4286077681UL, 198050301UL, 2501362624UL, 1463806912UL, 277300160UL, 3981929169UL, 2944140287UL, 4112467840UL, 4137888640UL, 1178044288UL,
2026367394UL, 3269986302UL, 3356184320UL, 1276820224UL, 2234191616UL, 294584132UL, 3086749695UL, 366387712UL, 4274031104UL, 136978944UL, 543687304UL, 4008517630UL, 1006135296UL, 2978609152UL, 3275253760UL, 3578325264UL, 3221487612UL, 3104844800UL, 2296777728UL, 3942394880UL, 2131029536UL, 2165829624UL, 1874371584UL, 1086645248UL, 3265045504UL, 4259639360UL, 3423548400UL, 2975352832UL, 2295121920UL, 3943712768UL, 41950336UL, 3423478496UL,
989898496UL, 3410688577UL, 2331788830UL, 3546482013UL, 813828841UL, 1865093068UL, 3265457506UL, 3795669738UL, 2119696024UL, 4285651426UL, 3333834629UL, 3451487261UL, 2090324595UL, 1816963648UL, 932961512UL, 2470761029UL, 3401764108UL, 3421619354UL, 4199624502UL, 589386372UL, 879396240UL, 3372470254UL, 2693109296UL, 2424215996UL, 38442268UL, 1882087724UL, 171397600UL, 2024561281UL, 183095586UL, 3282207272UL, 3402177296UL, 1859195498UL,
413109947UL, 2839537944UL, 1632143648UL, 3742715856UL, 388696500UL, 1748703733UL, 3563198567UL, 3826785440UL, 2896086528UL, 3989037829UL, 1478787788UL, 1390277813UL, 2123320736UL, 3416516800UL, 2056564203UL, 2584895011UL, 1605192736UL, 2475623616UL, 3856499712UL, 3439657984UL, 708088129UL, 1501395566UL, 1302184960UL, 1360092352UL, 1645630430UL, 1425230387UL, 3369488824UL, 2979863936UL, 869212432UL, 150548847UL, 1097557362UL, 655939640UL,
316553344UL, 3761918508UL, 3958338094UL, 141744600UL, 1412214640UL, 1859689984UL, 3200680981UL, 3883058679UL, 999801880UL, 3946079738UL, 1876072704UL, 194381849UL, 2177533995UL, 1584707624UL, 3053768410UL, 2593051904UL, 3458076673UL, 4047442835UL, 3545972808UL, 3441793178UL, 194975744UL, 1731731470UL, 4168755162UL, 2628944732UL, 2125675784UL, 3119906816UL, 960774145UL, 2646626078UL, 2152793157UL, 3049156634UL, 672464896UL, 3046932493UL,
3700727536UL, 2152335477UL, 575986696UL, 671940608UL, 2208366608UL, 1454456125UL, 937760016UL, 4103979069UL, 2737668096UL, 1179779104UL, 1030912634UL, 1041902112UL, 2032909434UL, 2274230272UL, 2089025605UL, 3050632421UL, 2428784965UL, 140658149UL, 4254138368UL, 1745354889UL, 711584249UL, 2746523017UL, 2551006457UL, 1100808192UL, 1494221073UL, 3422999489UL, 2696954129UL, 976716737UL, 2653421568UL, 3806331426UL, 3690047362UL, 1481392674UL,
3817015170UL, 2353004544UL, 286262340UL, 2300534532UL, 4206449732UL, 15339268UL, 2894069760UL, 488376456UL, 1489927688UL, 1196583048UL, 652746248UL, 2214592512UL, 69904UL, 1006205200UL, 2322628880UL, 1229515024UL, 2617245696UL, 3423527456UL, 1964953120UL, 4260938272UL, 386199072UL, 1744830464UL, 1342444608UL, 1069330496UL, 2138592320UL, 3185897536UL, 1073741824UL, 1342493824UL, 3780942976UL, 1771066496UL, 2189433984UL, 2147483648UL,
},
{
1804684571UL, 2106089606UL, 1533056158UL, 2870216110UL, 3618155659UL, 3789871366UL, 4246691682UL, 3667072763UL, 1212241769UL, 3152390668UL, 2973497449UL, 2958641966UL, 2088805328UL, 717518631UL, 2401090860UL, 3606967204UL, 952637656UL, 59827581UL, 1291486682UL, 1499453515UL, 2053994857UL, 563998083UL, 4094000396UL, 1163546899UL, 1003843565UL, 654565639UL, 1070907026UL, 4217851863UL, 426034251UL, 1721352737UL, 278404469UL, 3899800390UL,
1063362170UL, 1162348262UL, 3153545093UL, 3249996223UL, 186674553UL, 2616406148UL, 3137968354UL, 1282784965UL, 1495068058UL, 3033760361UL, 2278144523UL, 3192245769UL, 719586342UL, 2602548287UL, 3386583150UL, 355354345UL, 3252815848UL, 2178056037UL, 2283016801UL, 3005955037UL, 3340254490UL, 802791670UL, 251122316UL, 3705188626UL, 1252262272UL, 3989036796UL, 3527490452UL, 2047131255UL, 1447170583UL, 3373930285UL, 2895037457UL, 209341805UL,
1820357643UL, 3712392731UL, 685796521UL, 1322920440UL, 814388470UL, 1357857147UL, 434430265UL, 2650681935UL, 1371566728UL, 58783716UL, 2273435933UL, 3498513198UL, 792571900UL, 1447808772UL, 3513385860UL, 99175889UL, 1105434360UL, 1484146625UL, 3327194068UL, 242672513UL, 3552105593UL, 1425844616UL, 2871928454UL, 1124633561UL, 607610433UL, 2130018608UL, 1610235673UL, 2844230432UL, 2748082340UL, 994392866UL, 450823250UL, 2912535126UL,
2574390988UL, 3974009252UL, 78696582UL, 649682891UL, 3980917176UL, 3221419689UL, 960695436UL, 729221508UL, 358358845UL, 3392407691UL, 472711005UL, 295914899UL, 3005191796UL, 3078521977UL, 3370011868UL, 509135340UL, 1965939519UL, 2086465877UL, 2457949822UL, 1324152522UL, 762289386UL, 3618693997UL, 233730715UL, 2873984650UL, 31168606UL, 3367142977UL, 2851851305UL, 3251660053UL, 4209768406UL, 3298190175UL, 901235185UL, 1564391510UL,
2352686527UL, 1008150482UL, 578573310UL, 3462447127UL, 2482873876UL, 1790221257UL, 2255375608UL, 2335345651UL, 1381450613UL, 2866805101UL, 1495073163UL, 519905259UL, 3184556473UL, 1076378339UL, 2692926127UL, 970097715UL, 4013407916UL, 4014350363UL, 2476927059UL, 1989070516UL, 2640060069UL, 1987784589UL, 1880989003UL, 3861138803UL, 451743296UL, 1987067871UL, 1975657871UL, 3397816882UL, 2309900530UL, 4108425851UL, 4063867233UL, 3319482186UL,
2621772886UL, 1804684571UL, 2106089606UL, 1533056158UL, 2870216110UL, 611557097UL, 3789871366UL, 4246691682UL, 3667072763UL, 1212241769UL, 3389551988UL, 2973497449UL, 2958641966UL, 2088805328UL, 717518631UL, 2460955430UL, 3606967204UL, 952637656UL, 59827581UL, 1291486682UL, 3531087304UL, 2053994857UL, 563998083UL, 4094000396UL, 1163546899UL, 1242934125UL, 654565639UL, 1070907026UL, 4217851863UL, 426034251UL, 3034416129UL, 278404469UL,
3899800390UL, 1063362170UL, 1162348262UL, 4258714417UL, 3249996223UL, 186674553UL, 2616406148UL, 3137968354UL, 639885806UL, 1495068058UL, 3033760361UL, 2278144523UL, 3192245769UL, 4159910300UL, 2602548287UL, 3386583150UL, 355354345UL, 3252815848UL, 1555885880UL, 2283016801UL, 3005955037UL, 3340254490UL, 802791670UL, 2948774612UL, 3705188626UL, 1252262272UL, 3989036796UL, 3527490452UL, 2107826711UL, 1447170583UL, 3373930285UL, 2895037457UL,
209341805UL, 3763367196UL, 3712392731UL, 685796521UL, 1322920440UL, 814388470UL, 1986168339UL, 434430265UL, 2650681935UL, 1371566728UL, 58783716UL, 1423189187UL, 3498513198UL, 792571900UL, 1447808772UL, 3513385860UL, 315969823UL, 1105434360UL, 1484146625UL, 3327194068UL, 242672513UL, 3336228275UL, 1425844616UL, 2871928454UL, 1124633561UL, 607610433UL, 1762052458UL, 1610235673UL, 2844230432UL, 2748082340UL, 994392866UL, 3771702243UL,
2912535126UL, 2574390988UL, 3974009252UL, 78696582UL, 1626628844UL, 3980917176UL, 3221419689UL, 960695436UL, 729221508UL, 382092233UL, 3392407691UL, 472711005UL, 295914899UL, 3005191796UL, 514297204UL, 3370011868UL, 509135340UL, 1965939519UL, 2086465877UL, 3975975091UL, 1324152522UL, 762289386UL, 3618693997UL, 233730715UL, 455322516UL, 31168606UL, 3367142977UL, 2851851305UL, 3251660053UL, 3952189603UL, 3298190175UL, 901235185UL,
1564391510UL, 2352686527UL, 826181452UL, 578573310UL, 3462447127UL, 2482873876UL, 1790221257UL, 1529242773UL, 2335345651UL, 1381450613UL, 2866805101UL, 1495073163UL, 877718651UL, 3184556473UL, 1076378339UL, 2692926127UL, 970097715UL, 299344245UL, 4014350363UL, 2476927059UL, 1989070516UL, 2640060069UL, 3844531327UL, 1880989003UL, 3861138803UL, 451743296UL, 1987067871UL, 3272848161UL, 3397816882UL, 2309900530UL, 4108425851UL, 4063867233UL,
834288064UL, 2621772886UL, 1804684571UL, 2106089606UL, 1533056158UL, 304865970UL, 611557097UL, 3789871366UL, 4246691682UL, 3667072763UL, 2728206193UL, 3389551988UL, 2973497449UL, 2958641966UL, 2088805328UL, 3895037582UL, 2460955430UL, 3606967204UL, 952637656UL, 59827581UL, 2349212526UL, 3531087304UL, 2053994857UL, 563998083UL, 4094000396UL, 4028900485UL, 1242934125UL, 654565639UL, 1070907026UL, 4217851863UL, 1663452176UL, 3034416129UL,
278404469UL, 3899800390UL, 1063362170UL, 2721441405UL, 4258714417UL, 3249996223UL, 186674553UL, 2616406148UL, 4228837490UL, 639885806UL, 1495068058UL, 3033760361UL, 2278144523UL, 2820661772UL, 4159910300UL, 2602548287UL, 3386583150UL, 355354345UL, 1815256314UL, 1555885880UL, 2283016801UL, 3005955037UL, 3340254490UL, 2166514144UL, 2948774612UL, 3705188626UL, 1252262272UL, 3989036796UL, 751187322UL, 2107826711UL, 1447170583UL, 3373930285UL,
2895037457UL, 2809311944UL, 3763367196UL, 3712392731UL, 685796521UL, 1322920440UL, 936300677UL, 1986168339UL, 434430265UL, 2650681935UL, 1371566728UL, 1308015359UL, 1423189187UL, 3498513198UL, 792571900UL, 1447808772UL, 3065349526UL, 315969823UL, 1105434360UL, 1484146625UL, 3327194068UL, 1038676789UL, 3336228275UL, 1425844616UL, 2871928454UL, 1124633561UL, 2956422231UL, 1762052458UL, 1610235673UL, 2844230432UL, 2748082340UL, 3603862093UL,
3771702243UL, 2912535126UL, 2574390988UL, 3974009252UL, 1691332448UL, 1626628844UL, 3980917176UL, 3221419689UL, 960695436UL, 3120142427UL, 382092233UL, 3392407691UL, 472711005UL, 295914899UL, 4101686983UL, 514297204UL, 3370011868UL, 509135340UL, 1965939519UL, 3015736706UL, 3975975091UL, 1324152522UL, 762289386UL, 3618693997UL, 2395097989UL, 455322516UL, 31168606UL, 3367142977UL, 2851851305UL, 30511955UL, 3952189603UL, 3298190175UL,
901235185UL, 1564391510UL, 2606298633UL, 826181452UL, 578573310UL, 3462447127UL, 2482873876UL, 4159642946UL, 1529242773UL, 2335345651UL, 1381450613UL, 2866805101UL, 1782913669UL, 877718651UL, 3184556473UL, 1076378339UL, 2692926127UL, 1730328819UL, 299344245UL, 4014350363UL, 2476927059UL, 1989070516UL, 1425685614UL, 3844531327UL, 1880989003UL, 3861138803UL, 451743296UL, 889237383UL, 3272848161UL, 3397816882UL, 2309900530UL, 4108425851UL,
1155723231UL, 834288064UL, 2621772886UL, 1804684571UL, 2106089606UL, 2387009004UL, 304865970UL, 611557097UL, 3789871366UL, 4246691682UL, 1405709661UL, 2728206193UL, 3389551988UL, 2973497449UL, 2958641966UL, 3183906006UL, 3895037582UL, 2460955430UL, 3606967204UL, 952637656UL, 1345432763UL, 2349212526UL, 3531087304UL, 2053994857UL, 563998083UL, 3749011414UL, 4028900485UL, 1242934125UL, 654565639UL, 1070907026UL, 1072342672UL, 1663452176UL,
3034416129UL, 278404469UL, 3899800390UL, 3566652188UL, 2721441405UL, 4258714417UL, 3249996223UL, 186674553UL, 4001263143UL, 4228837490UL, 639885806UL, 1495068058UL, 3033760361UL, 4278332644UL, 2820661772UL, 4159910300UL, 2602548287UL, 3386583150UL, 838831089UL, 1815256314UL, 1555885880UL, 2283016801UL, 3005955037UL, 3377397178UL, 2166514144UL, 2948774612UL, 3705188626UL, 1252262272UL, 2414422575UL, 751187322UL, 2107826711UL, 1447170583UL,
3373930285UL, 1253755033UL, 2809311944UL, 3763367196UL, 3712392731UL, 685796521UL, 3238624475UL, 936300677UL, 1986168339UL, 434430265UL, 2650681935UL, 1642290570UL, 1308015359UL, 1423189187UL, 3498513198UL, 792571900UL, 173318140UL, 3065349526UL, 315969823UL, 1105434360UL, 1484146625UL, 4103797777UL, 1038676789UL, 3336228275UL, 1425844616UL, 2871928454UL, 1797745765UL, 2956422231UL, 1762052458UL, 1610235673UL, 2844230432UL, 2180656608UL,
3603862093UL, 3771702243UL, 2912535126UL, 2574390988UL, 1183098390UL, 1691332448UL, 1626628844UL, 3980917176UL, 3221419689UL, 2645203959UL, 3120142427UL, 382092233UL, 3392407691UL, 472711005UL, 1659659070UL, 4101686983UL, 514297204UL, 3370011868UL, 509135340UL, 483888155UL, 3015736706UL, 3975975091UL, 1324152522UL, 762289386UL, 1259948064UL, 2395097989UL, 455322516UL, 31168606UL, 3367142977UL, 339990414UL, 30511955UL, 3952189603UL,
3298190175UL, 901235185UL, 3097920065UL, 2606298633UL, 826181452UL, 578573310UL, 3462447127UL, 1548039839UL, 4159642946UL, 1529242773UL, 2335345651UL, 1381450613UL, 2173079994UL, 1782913669UL, 877718651UL, 3184556473UL, 1076378339UL, 1570275057UL, 1730328819UL, 299344245UL, 4014350363UL, 2476927059UL, 1845882881UL, 1425685614UL, 3844531327UL, 1880989003UL, 3861138803UL, 1322409081UL, 889237383UL, 3272848161UL, 3397816882UL, 2309900530UL,
3505447982UL, 3430136873UL, 1319796589UL, 4202423979UL, 3184732284UL, 2910356648UL, 2534615223UL, 3854465731UL, 768821792UL, 2205052576UL, 1348983754UL, 1300250188UL, 2919181738UL, 2520178732UL, 3967243685UL, 2646012002UL, 1784678658UL, 741302051UL, 3464753547UL, 194213376UL, 1482799064UL, 3009673860UL, 680824208UL, 741966796UL, 2381283369UL, 3022877171UL, 1619439814UL, 3961433610UL, 1331297670UL, 1100110820UL, 1311672539UL, 1122110615UL,
4056004850UL, 3413790176UL, 3148768822UL, 1242592694UL, 2925975727UL, 1879285134UL, 334328879UL, 1318235222UL, 3140739559UL, 401691770UL, 3604288404UL, 3686496908UL, 770670945UL, 199139043UL, 2092710473UL, 3914528993UL, 700991333UL, 2375775811UL, 858137308UL, 3490050165UL, 2389078291UL, 1615607459UL, 3027969809UL, 820012549UL, 2085659484UL, 2654485136UL, 2630408646UL, 196481396UL, 1119673274UL, 1026209692UL, 726501622UL, 2940737143UL,
3559571163UL, 2288027726UL, 1039212708UL, 929664536UL, 1061981465UL, 186058675UL, 3537656152UL, 844176796UL, 2996217992UL, 1545798611UL, 3031020656UL, 2248030435UL, 1665857580UL, 2905758082UL, 1269201312UL, 3031275084UL, 4034872841UL, 983632400UL, 4188503190UL, 757119675UL, 2105920865UL, 4281032819UL, 2917801076UL, 3900010013UL, 3910997169UL, 1729751422UL, 562313247UL, 3070846353UL, 2564238664UL, 4050540186UL, 4258833501UL, 2270666053UL,
2207128401UL, 2990540001UL, 797768898UL, 2288390225UL, 3230323685UL, 1974727440UL, 3327301426UL, 289857826UL, 3565889868UL, 2791014422UL, 2021097820UL, 3350378271UL, 3673707591UL, 2610067927UL, 4255789547UL, 2682856590UL, 12563128UL, 1397542366UL, 237149400UL, 2233707508UL, 3875573245UL, 2097374144UL, 175320773UL, 4103445984UL, 4089284323UL, 3610168130UL, 3084915964UL, 680145366UL, 2571684685UL, 1132894909UL, 104640024UL, 193765521UL,
2338202907UL, 895271448UL, 11499099UL, 1798066417UL, 1297412626UL, 2511347162UL, 3140535007UL, 2129963538UL, 700683199UL, 2609700278UL, 2953463279UL, 2290844145UL, 1871316353UL, 3993801787UL, 2219413182UL, 2954453701UL, 231283580UL, 1375331115UL, 207723994UL, 1799562537UL, 2056553564UL, 2513609799UL, 3542459627UL, 3173012714UL, 3923404932UL, 217877755UL, 2095124912UL, 192024370UL, 1168134987UL, 1889598668UL, 3014873069UL, 2033573343UL,
},
{
3465348660UL, 3623545008UL, 3505902593UL, 838034830UL, 1338018789UL, 2595329276UL, 3367746385UL, 3197935201UL, 1439351946UL, 3585085571UL, 4165798087UL, 3634792639UL, 2359485974UL, 2772582925UL, 1110186203UL, 3771562484UL, 1508694157UL, 1564641206UL, 2801985736UL, 2446107936UL, 3849126897UL, 1842973671UL, 944408104UL, 2624631280UL, 2729080685UL, 3737368614UL, 858809173UL, 2289802345UL, 2428186575UL, 3114742765UL, 716011303UL, 3443810690UL,
814132610UL, 517432787UL, 614445393UL, 2930433345UL, 291178098UL, 2117644502UL, 2749446703UL, 311745701UL, 365684723UL, 1705418876UL, 2213749318UL, 4011417220UL, 1842575651UL, 988348831UL, 94258998UL, 2771150272UL, 498058526UL, 1344827813UL, 2961955291UL, 262703473UL, 1404034822UL, 1566595865UL, 2522381203UL, 1706522206UL, 1203054806UL, 1273801539UL, 2070583465UL, 3913449936UL, 3231505231UL, 619636751UL, 3746997351UL, 4103027837UL,
1205468203UL, 3355878253UL, 3433356888UL, 107785753UL, 2779092609UL, 1869691566UL, 2555219983UL, 903319808UL, 3273374169UL, 2538926990UL, 979533870UL, 1356500860UL, 1661983738UL, 1380761625UL, 2919458459UL, 1041142798UL, 1430817627UL, 517007606UL, 1421570516UL, 2371447300UL, 2985632691UL, 3684889351UL, 3873926653UL, 788770697UL, 1854750277UL, 209332297UL, 1137299679UL, 848527832UL, 3850486924UL, 4179307312UL, 2764470693UL, 1353191605UL,
4166891919UL, 2074703841UL, 3373997532UL, 2013528640UL, 701389744UL, 841917592UL, 2065742268UL, 2721848192UL, 2566956680UL, 3122896007UL, 1090761479UL, 921859028UL, 4086736376UL, 1837462309UL, 2579826431UL, 2436217134UL, 839037727UL, 1072086642UL, 614518622UL, 3764758228UL, 1501128342UL, 3669108708UL, 1601407381UL, 2899014005UL, 3268308948UL, 3337564231UL, 1986911578UL, 3379194930UL, 1950365753UL, 2098537451UL, 51515980UL, 1176526086UL,
3213391582UL, 1059745735UL, 2273586703UL, 376085505UL, 1493749800UL, 3970342143UL, 1620925244UL, 2165301314UL, 2332030190UL, 1864098798UL, 276747442UL, 2776569227UL, 2992780663UL, 3027279789UL, 1074555384UL, 3481518659UL, 2499703783UL, 661805703UL, 3782305562UL, 9186074UL, 2357407210UL, 2355922343UL, 2024733363UL, 485434612UL, 862379913UL, 1029706268UL, 1512726310UL, 3834948354UL, 1435892840UL, 3297980694UL, 2831553800UL, 2111416471UL,
711321697UL, 3465348660UL, 3623545008UL, 3505902593UL, 838034830UL, 1553436793UL, 2595329276UL, 3367746385UL, 3197935201UL, 1439351946UL, 3198044157UL, 4165798087UL, 3634792639UL, 2359485974UL, 2772582925UL, 836042976UL, 3771562484UL, 1508694157UL, 1564641206UL, 2801985736UL, 1190371491UL, 3849126897UL, 1842973671UL, 944408104UL, 2624631280UL, 410746791UL, 3737368614UL, 858809173UL, 2289802345UL, 2428186575UL, 1542325976UL, 716011303UL,
3443810690UL, 814132610UL, 517432787UL, 1649301063UL, 2930433345UL, 291178098UL, 2117644502UL, 2749446703UL, 3955511579UL, 365684723UL, 1705418876UL, 2213749318UL, 4011417220UL, 2753632862UL, 988348831UL, 94258998UL, 2771150272UL, 498058526UL, 3314106168UL, 2961955291UL, 262703473UL, 1404034822UL, 1566595865UL, 3590367097UL, 1706522206UL, 1203054806UL, 1273801539UL, 2070583465UL, 2340683261UL, 3231505231UL, 619636751UL, 3746997351UL,
4103027837UL, 2785398766UL, 3355878253UL, 3433356888UL, 107785753UL, 2779092609UL, 1608451840UL, 2555219983UL, 903319808UL, 3273374169UL, 2538926990UL, 645164419UL, 1356500860UL, 1661983738UL, 1380761625UL, 2919458459UL, 2260224548UL, 1430817627UL, 517007606UL, 1421570516UL, 2371447300UL, 1636004496UL, 3684889351UL, 3873926653UL, 788770697UL, 1854750277UL, 1345251011UL, 1137299679UL, 848527832UL, 3850486924UL, 4179307312UL, 3576574608UL,
1353191605UL, 4166891919UL, 2074703841UL, 3373997532UL, 183447754UL, 701389744UL, 841917592UL, 2065742268UL, 2721848192UL, 2109289891UL, 3122896007UL, 1090761479UL, 921859028UL, 4086736376UL, 2212730874UL, 2579826431UL, 2436217134UL, 839037727UL, 1072086642UL, 55934784UL, 3764758228UL, 1501128342UL, 3669108708UL, 1601407381UL, 516550987UL, 3268308948UL, 3337564231UL, 1986911578UL, 3379194930UL, 3973484473UL, 2098537451UL, 51515980UL,
1176526086UL, 3213391582UL, 4251661633UL, 2273586703UL, 376085505UL, 1493749800UL, 3970342143UL, 3190791788UL, 2165301314UL, 2332030190UL, 1864098798UL, 276747442UL, 2991976613UL, 2992780663UL, 3027279789UL, 1074555384UL, 3481518659UL, 1399789494UL, 661805703UL, 3782305562UL, 9186074UL, 2357407210UL, 1942736967UL, 2024733363UL, 485434612UL, 862379913UL, 1029706268UL, 4122704494UL, 3834948354UL, 1435892840UL, 3297980694UL, 2831553800UL,
1210092654UL, 711321697UL, 3465348660UL, 3623545008UL, 3505902593UL, 3443231198UL, 1553436793UL, 2595329276UL, 3367746385UL, 3197935201UL, 1304974987UL, 3198044157UL, 4165798087UL, 3634792639UL, 2359485974UL, 3518323362UL, 836042976UL, 3771562484UL, 1508694157UL, 1564641206UL, 3577633375UL, 1190371491UL, 3849126897UL, 1842973671UL, 944408104UL, 1854555112UL, 410746791UL, 3737368614UL, 858809173UL, 2289802345UL, 3622671731UL, 1542325976UL,
716011303UL, 3443810690UL, 814132610UL, 296197011UL, 1649301063UL, 2930433345UL, 291178098UL, 2117644502UL, 1056271538UL, 3955511579UL, 365684723UL, 1705418876UL, 2213749318UL, 1258535671UL, 2753632862UL, 988348831UL, 94258998UL, 2771150272UL, 3669902097UL, 3314106168UL, 2961955291UL, 262703473UL, 1404034822UL, 1654433938UL, 3590367097UL, 1706522206UL, 1203054806UL, 1273801539UL, 2448138887UL, 2340683261UL, 3231505231UL, 619636751UL,
3746997351UL, 1454088394UL, 2785398766UL, 3355878253UL, 3433356888UL, 107785753UL, 689323470UL, 1608451840UL, 2555219983UL, 903319808UL, 3273374169UL, 1603842392UL, 645164419UL, 1356500860UL, 1661983738UL, 1380761625UL, 2814639423UL, 2260224548UL, 1430817627UL, 517007606UL, 1421570516UL, 1938805701UL, 1636004496UL, 3684889351UL, 3873926653UL, 788770697UL, 4238900666UL, 1345251011UL, 1137299679UL, 848527832UL, 3850486924UL, 108793827UL,
3576574608UL, 1353191605UL, 4166891919UL, 2074703841UL, 3780897861UL, 183447754UL, 701389744UL, 841917592UL, 2065742268UL, 3036602746UL, 2109289891UL, 3122896007UL, 1090761479UL, 921859028UL, 3499985398UL, 2212730874UL, 2579826431UL, 2436217134UL, 839037727UL, 3520354700UL, 55934784UL, 3764758228UL, 1501128342UL, 3669108708UL, 1601010847UL, 516550987UL, 3268308948UL, 3337564231UL, 1986911578UL, 2704241781UL, 3973484473UL, 2098537451UL,
51515980UL, 1176526086UL, 3602010532UL, 4251661633UL, 2273586703UL, 376085505UL, 1493749800UL, 2922957328UL, 3190791788UL, 2165301314UL, 2332030190UL, 1864098798UL, 1649666443UL, 2991976613UL, 2992780663UL, 3027279789UL, 1074555384UL, 2848531519UL, 1399789494UL, 661805703UL, 3782305562UL, 9186074UL, 320781315UL, 1942736967UL, 2024733363UL, 485434612UL, 862379913UL, 3598892066UL, 4122704494UL, 3834948354UL, 1435892840UL, 3297980694UL,
545184652UL, 1210092654UL, 711321697UL, 3465348660UL, 3623545008UL, 1173753045UL, 3443231198UL, 1553436793UL, 2595329276UL, 3367746385UL, 2444634476UL, 1304974987UL, 3198044157UL, 4165798087UL, 3634792639UL, 1837035806UL, 3518323362UL, 836042976UL, 3771562484UL, 1508694157UL, 2899021294UL, 3577633375UL, 1190371491UL, 3849126897UL, 1842973671UL, 1614215215UL, 1854555112UL, 410746791UL, 3737368614UL, 858809173UL, 525745365UL, 3622671731UL,
1542325976UL, 716011303UL, 3443810690UL, 566299749UL, 296197011UL, 1649301063UL, 2930433345UL, 291178098UL, 1987532525UL, 1056271538UL, 3955511579UL, 365684723UL, 1705418876UL, 2321222760UL, 1258535671UL, 2753632862UL, 988348831UL, 94258998UL, 2986060366UL, 3669902097UL, 3314106168UL, 2961955291UL, 262703473UL, 604452796UL, 1654433938UL, 3590367097UL, 1706522206UL, 1203054806UL, 1894894069UL, 2448138887UL, 2340683261UL, 3231505231UL,
619636751UL, 6680729UL, 1454088394UL, 2785398766UL, 3355878253UL, 3433356888UL, 2025591660UL, 689323470UL, 1608451840UL, 2555219983UL, 903319808UL, 3430384385UL, 1603842392UL, 645164419UL, 1356500860UL, 1661983738UL, 2108736152UL, 2814639423UL, 2260224548UL, 1430817627UL, 517007606UL, 2973658959UL, 1938805701UL, 1636004496UL, 3684889351UL, 3873926653UL, 2283691941UL, 4238900666UL, 1345251011UL, 1137299679UL, 848527832UL, 45551112UL,
108793827UL, 3576574608UL, 1353191605UL, 4166891919UL, 3776615962UL, 3780897861UL, 183447754UL, 701389744UL, 841917592UL, 3830639316UL, 3036602746UL, 2109289891UL, 3122896007UL, 1090761479UL, 1931255897UL, 3499985398UL, 2212730874UL, 2579826431UL, 2436217134UL, 3272166055UL, 3520354700UL, 55934784UL, 3764758228UL, 1501128342UL, 1567864246UL, 1601010847UL, 516550987UL, 3268308948UL, 3337564231UL, 3918802424UL, 2704241781UL, 3973484473UL,
2098537451UL, 51515980UL, 3551394489UL, 3602010532UL, 4251661633UL, 2273586703UL, 376085505UL, 885459498UL, 2922957328UL, 3190791788UL, 2165301314UL, 2332030190UL, 3197056515UL, 1649666443UL, 2991976613UL, 2992780663UL, 3027279789UL, 2385348906UL, 2848531519UL, 1399789494UL, 661805703UL, 3782305562UL, 2163075465UL, 320781315UL, 1942736967UL, 2024733363UL, 485434612UL, 2680597981UL, 3598892066UL, 4122704494UL, 3834948354UL, 1435892840UL,
2499644163UL, 2704575422UL, 2579557838UL, 673530532UL, 493730767UL, 1124557747UL, 1908629439UL, 2821949504UL, 1743112513UL, 2849457841UL, 2344409314UL, 3479159262UL, 4260973770UL, 2991970754UL, 3812641863UL, 2229319917UL, 2466968521UL, 1766353737UL, 3216591612UL, 2113272648UL, 364370737UL, 1893001758UL, 2608875275UL, 4224057183UL, 3546705413UL, 1999778009UL, 348872225UL, 2470564216UL, 1417878284UL, 2709790112UL, 3579129936UL, 2137971615UL,
4046639861UL, 2841156930UL, 391544737UL, 2056567354UL, 737657378UL, 3877904725UL, 578930752UL, 1759172471UL, 3383278785UL, 1047197514UL, 649468151UL, 3452867243UL, 1792089520UL, 63936215UL, 3909143729UL, 3753489875UL, 734314122UL, 2490530916UL, 3043874586UL, 1504812057UL, 59001199UL, 2493748676UL, 2552438622UL, 1889694845UL, 3715397860UL, 2817245010UL, 3841049206UL, 816106718UL, 2176130406UL, 640254735UL, 12376903UL, 3000264936UL,
3304116079UL, 1620334094UL, 2109391765UL, 1348210951UL, 2237645681UL, 1207768272UL, 1562894669UL, 2156631655UL, 1387193235UL, 3154858817UL, 633510901UL, 2312190757UL, 402878244UL, 2501565021UL, 2984409334UL, 4167491216UL, 3614267292UL, 3078552271UL, 971722322UL, 3065543880UL, 2307584190UL, 491480322UL, 2068673112UL, 1929780632UL, 178549964UL, 983979983UL, 2769314886UL, 4214442042UL, 2977609682UL, 25450683UL, 3075212658UL, 1571149568UL,
3531670561UL, 42782504UL, 425601306UL, 428715214UL, 497250251UL, 693520802UL, 166426814UL, 1786382125UL, 2712003995UL, 3610802197UL, 2076490757UL, 404822980UL, 3953184772UL, 1655231947UL, 3594351577UL, 3068232274UL, 3771730346UL, 4110519574UL, 3534704897UL, 2375277865UL, 3597780202UL, 3472676002UL, 1350276449UL, 3218248239UL, 3589255283UL, 3253132633UL, 1769885529UL, 3792812294UL, 120332643UL, 1219374788UL, 3608889019UL, 2386099811UL,
858495304UL, 1284785543UL, 331370962UL, 2259419662UL, 2519864134UL, 3194739432UL, 2669074511UL, 2565559140UL, 3378072004UL, 2647801475UL, 265068954UL, 1464416963UL, 1232787612UL, 4160089759UL, 2510685972UL, 670300081UL, 2509357766UL, 1981891975UL, 4161588397UL, 1371924626UL, 44760868UL, 634955171UL, 1187096933UL, 3324788972UL, 3576888559UL, 2801347752UL, 3730298395UL, 1702170762UL, 4206083415UL, 741409141UL, 3649731355UL, 1025429529UL,
},
{
91444490UL, 628576944UL, 4069219862UL, 2253058925UL, 492354082UL, 1191182242UL, 1565180119UL, 2257613723UL, 456055162UL, 605712223UL, 953365104UL, 3104638527UL, 1133984729UL, 2662828416UL, 2134948274UL, 1921384447UL, 843719355UL, 588432962UL, 1734575434UL, 2924140067UL, 483396548UL, 3848838894UL, 3155476556UL, 1760928304UL, 4168059840UL, 3279827269UL, 2644461735UL, 4168565656UL, 3951563569UL, 1276805504UL, 1708974143UL, 1878547888UL,
3465220024UL, 3062086782UL, 2801401651UL, 1510428126UL, 716404149UL, 1646021208UL, 3534932385UL, 1186585561UL, 651997355UL, 282914223UL, 352224857UL, 3764407517UL, 1059868753UL, 1971798134UL, 978904005UL, 976413661UL, 4039544152UL, 498989693UL, 2565125471UL, 2782642813UL, 3537961025UL, 1194967362UL, 169217024UL, 3491609UL, 1319592872UL, 1630206561UL, 2497130840UL, 1685008996UL, 2828944016UL, 3301346775UL, 2893072371UL, 2606559798UL,
4026138031UL, 2664450619UL, 691091062UL, 1079640113UL, 1417637732UL, 4081852209UL, 2197910648UL, 2310382370UL, 1000957047UL, 959936499UL, 2844551811UL, 2272766890UL, 31122394UL, 2742925483UL, 1121884686UL, 57929089UL, 2468361281UL, 2982007782UL, 2371576893UL, 177782593UL, 3603584577UL, 672057044UL, 2108452841UL, 1671338057UL, 3386908223UL, 1243029765UL, 805157552UL, 1271858417UL, 1621249501UL, 1804851492UL, 1321010403UL, 751773221UL,
1517221627UL, 822709871UL, 104533154UL, 3578182264UL, 640541709UL, 421086624UL, 4233576392UL, 3729339369UL, 197460644UL, 773140636UL, 2158026018UL, 1756785611UL, 4011575991UL, 3569445500UL, 736117181UL, 2456162322UL, 1168189787UL, 3651312675UL, 1070291988UL, 268231205UL, 541474497UL, 3316168972UL, 3546990856UL, 830417208UL, 725960194UL, 2044207227UL, 3188997938UL, 2383298579UL, 3350316374UL, 3575011225UL, 1553111865UL, 1285013027UL,
749371711UL, 766611716UL, 598195098UL, 2139882719UL, 2062405428UL, 3634702446UL, 3015263295UL, 223311969UL, 2622859522UL, 3888492701UL, 2955257225UL, 582625650UL, 3563756446UL, 2886083960UL, 1907546514UL, 454650902UL, 3287277541UL, 625828138UL, 2991888140UL, 1935326370UL, 4031152256UL, 702881509UL, 1427632724UL, 1345475301UL, 2577560804UL, 2858595147UL, 2533191188UL, 185662179UL, 536505093UL, 3747894147UL, 111551030UL, 370373207UL,
2293908590UL, 91444490UL, 628576944UL, 4069219862UL, 2253058925UL, 1671484924UL, 1191182242UL, 1565180119UL, 2257613723UL, 456055162UL, 3411094744UL, 953365104UL, 3104638527UL, 1133984729UL, 2662828416UL, 2000630022UL, 1921384447UL, 843719355UL, 588432962UL, 1734575434UL, 3293926122UL, 483396548UL, 3848838894UL, 3155476556UL, 1760928304UL, 146876953UL, 3279827269UL, 2644461735UL, 4168565656UL, 3951563569UL, 3976156700UL, 1708974143UL,
1878547888UL, 3465220024UL, 3062086782UL, 1999154400UL, 1510428126UL, 716404149UL, 1646021208UL, 3534932385UL, 2479551429UL, 651997355UL, 282914223UL, 352224857UL, 3764407517UL, 1275979651UL, 1971798134UL, 978904005UL, 976413661UL, 4039544152UL, 300654823UL, 2565125471UL, 2782642813UL, 3537961025UL, 1194967362UL, 3123973648UL, 3491609UL, 1319592872UL, 1630206561UL, 2497130840UL, 1437913158UL, 2828944016UL, 3301346775UL, 2893072371UL,
2606559798UL, 2153172585UL, 2664450619UL, 691091062UL, 1079640113UL, 1417637732UL, 17137237UL, 2197910648UL, 2310382370UL, 1000957047UL, 959936499UL, 802137134UL, 2272766890UL, 31122394UL, 2742925483UL, 1121884686UL, 3909775167UL, 2468361281UL, 2982007782UL, 2371576893UL, 177782593UL, 3319492525UL, 672057044UL, 2108452841UL, 1671338057UL, 3386908223UL, 1878151473UL, 805157552UL, 1271858417UL, 1621249501UL, 1804851492UL, 3215921223UL,
751773221UL, 1517221627UL, 822709871UL, 104533154UL, 361845001UL, 640541709UL, 421086624UL, 4233576392UL, 3729339369UL, 2655936801UL, 773140636UL, 2158026018UL, 1756785611UL, 4011575991UL, 587202971UL, 736117181UL, 2456162322UL, 1168189787UL, 3651312675UL, 2517883370UL, 268231205UL, 541474497UL, 3316168972UL, 3546990856UL, 2037251305UL, 725960194UL, 2044207227UL, 3188997938UL, 2383298579UL, 2665008587UL, 3575011225UL, 1553111865UL,
1285013027UL, 749371711UL, 2163964019UL, 598195098UL, 2139882719UL, 2062405428UL, 3634702446UL, 2788202059UL, 223311969UL, 2622859522UL, 3888492701UL, 2955257225UL, 740986174UL, 3563756446UL, 2886083960UL, 1907546514UL, 454650902UL, 2426323587UL, 625828138UL, 2991888140UL, 1935326370UL, 4031152256UL, 1831149435UL, 1427632724UL, 1345475301UL, 2577560804UL, 2858595147UL, 3977153945UL, 185662179UL, 536505093UL, 3747894147UL, 111551030UL,
4131587422UL, 2293908590UL, 91444490UL, 628576944UL, 4069219862UL, 2408189350UL, 1671484924UL, 1191182242UL, 1565180119UL, 2257613723UL, 1338069254UL, 3411094744UL, 953365104UL, 3104638527UL, 1133984729UL, 631497759UL, 2000630022UL, 1921384447UL, 843719355UL, 588432962UL, 3280318959UL, 3293926122UL, 483396548UL, 3848838894UL, 3155476556UL, 1777918163UL, 146876953UL, 3279827269UL, 2644461735UL, 4168565656UL, 2786264663UL, 3976156700UL,
1708974143UL, 1878547888UL, 3465220024UL, 2793923820UL, 1999154400UL, 1510428126UL, 716404149UL, 1646021208UL, 3102243824UL, 2479551429UL, 651997355UL, 282914223UL, 352224857UL, 3767702588UL, 1275979651UL, 1971798134UL, 978904005UL, 976413661UL, 1951622548UL, 300654823UL, 2565125471UL, 2782642813UL, 3537961025UL, 2186817324UL, 3123973648UL, 3491609UL, 1319592872UL, 1630206561UL, 1075424534UL, 1437913158UL, 2828944016UL, 3301346775UL,
2893072371UL, 207992406UL, 2153172585UL, 2664450619UL, 691091062UL, 1079640113UL, 3114255216UL, 17137237UL, 2197910648UL, 2310382370UL, 1000957047UL, 2548008553UL, 802137134UL, 2272766890UL, 31122394UL, 2742925483UL, 4069482373UL, 3909775167UL, 2468361281UL, 2982007782UL, 2371576893UL, 2807823912UL, 3319492525UL, 672057044UL, 2108452841UL, 1671338057UL, 12831353UL, 1878151473UL, 805157552UL, 1271858417UL, 1621249501UL, 461887094UL,
3215921223UL, 751773221UL, 1517221627UL, 822709871UL, 1317394918UL, 361845001UL, 640541709UL, 421086624UL, 4233576392UL, 3385587450UL, 2655936801UL, 773140636UL, 2158026018UL, 1756785611UL, 1475601973UL, 587202971UL, 736117181UL, 2456162322UL, 1168189787UL, 911455077UL, 2517883370UL, 268231205UL, 541474497UL, 3316168972UL, 1500275507UL, 2037251305UL, 725960194UL, 2044207227UL, 3188997938UL, 2036633808UL, 2665008587UL, 3575011225UL,
1553111865UL, 1285013027UL, 87868216UL, 2163964019UL, 598195098UL, 2139882719UL, 2062405428UL, 517907301UL, 2788202059UL, 223311969UL, 2622859522UL, 3888492701UL, 3926046234UL, 740986174UL, 3563756446UL, 2886083960UL, 1907546514UL, 1911066215UL, 2426323587UL, 625828138UL, 2991888140UL, 1935326370UL, 2031853435UL, 1831149435UL, 1427632724UL, 1345475301UL, 2577560804UL, 3509674153UL, 3977153945UL, 185662179UL, 536505093UL, 3747894147UL,
1711714600UL, 4131587422UL, 2293908590UL, 91444490UL, 628576944UL, 3370678255UL, 2408189350UL, 1671484924UL, 1191182242UL, 1565180119UL, 3786239592UL, 1338069254UL, 3411094744UL, 953365104UL, 3104638527UL, 3659647225UL, 631497759UL, 2000630022UL, 1921384447UL, 843719355UL, 3364831282UL, 3280318959UL, 3293926122UL, 483396548UL, 3848838894UL, 3131266478UL, 1777918163UL, 146876953UL, 3279827269UL, 2644461735UL, 4156372383UL, 2786264663UL,
3976156700UL, 1708974143UL, 1878547888UL, 2168041590UL, 2793923820UL, 1999154400UL, 1510428126UL, 716404149UL, 3392113666UL, 3102243824UL, 2479551429UL, 651997355UL, 282914223UL, 2085613514UL, 3767702588UL, 1275979651UL, 1971798134UL, 978904005UL, 503506384UL, 1951622548UL, 300654823UL, 2565125471UL, 2782642813UL, 1458431750UL, 2186817324UL, 3123973648UL, 3491609UL, 1319592872UL, 452433679UL, 1075424534UL, 1437913158UL, 2828944016UL,
3301346775UL, 2333281307UL, 207992406UL, 2153172585UL, 2664450619UL, 691091062UL, 3553502652UL, 3114255216UL, 17137237UL, 2197910648UL, 2310382370UL, 3153689868UL, 2548008553UL, 802137134UL, 2272766890UL, 31122394UL, 468580641UL, 4069482373UL, 3909775167UL, 2468361281UL, 2982007782UL, 1445286890UL, 2807823912UL, 3319492525UL, 672057044UL, 2108452841UL, 1755577669UL, 12831353UL, 1878151473UL, 805157552UL, 1271858417UL, 2623540912UL,
461887094UL, 3215921223UL, 751773221UL, 1517221627UL, 3922191946UL, 1317394918UL, 361845001UL, 640541709UL, 421086624UL, 2173849516UL, 3385587450UL, 2655936801UL, 773140636UL, 2158026018UL, 1085377158UL, 1475601973UL, 587202971UL, 736117181UL, 2456162322UL, 2158960374UL, 911455077UL, 2517883370UL, 268231205UL, 541474497UL, 943191315UL, 1500275507UL, 2037251305UL, 725960194UL, 2044207227UL, 2481150802UL, 2036633808UL, 2665008587UL,
3575011225UL, 1553111865UL, 2301231777UL, 87868216UL, 2163964019UL, 598195098UL, 2139882719UL, 2007840238UL, 517907301UL, 2788202059UL, 223311969UL, 2622859522UL, 151920263UL, 3926046234UL, 740986174UL, 3563756446UL, 2886083960UL, 1338937928UL, 1911066215UL, 2426323587UL, 625828138UL, 2991888140UL, 2652286195UL, 2031853435UL, 1831149435UL, 1427632724UL, 1345475301UL, 289801789UL, 3509674153UL, 3977153945UL, 185662179UL, 536505093UL,
2727322952UL, 3980498348UL, 2529622213UL, 1903052964UL, 3564714651UL, 2281240568UL, 533384122UL, 277613480UL, 1815540358UL, 282763841UL, 3669112623UL, 2572859425UL, 195220178UL, 1210883545UL, 2359703600UL, 1187537824UL, 675732974UL, 325036095UL, 708091465UL, 2556854604UL, 701006284UL, 2378459191UL, 1863513103UL, 2690918197UL, 4237307694UL, 1356483501UL, 2160905652UL, 521809106UL, 974368613UL, 3136010957UL, 2722488678UL, 3711515637UL,
2296341459UL, 4233729945UL, 1196247571UL, 3031398071UL, 515543502UL, 1314129776UL, 3235373306UL, 1303165859UL, 1820568009UL, 559099351UL, 186876368UL, 1076102111UL, 1218809551UL, 1790301111UL, 4130210229UL, 768125358UL, 1132864749UL, 4262563773UL, 2294411020UL, 4092943985UL, 2558108246UL, 3737664949UL, 2219923393UL, 724326159UL, 4134105682UL, 4188752746UL, 3615233671UL, 1526018731UL, 2281637916UL, 2459490295UL, 3637342666UL, 777862587UL,
39962002UL, 3772005832UL, 997473319UL, 574843584UL, 3356551974UL, 1265234427UL, 1698059437UL, 534747571UL, 1465532164UL, 3263029035UL, 534512444UL, 2343092827UL, 2375685652UL, 2497926141UL, 2377933621UL, 2212335180UL, 261114084UL, 172755755UL, 2737085495UL, 2225257145UL, 148605658UL, 1353911796UL, 357753009UL, 1778732943UL, 497635558UL, 4136467976UL, 2837964962UL, 4045039047UL, 2485296762UL, 1587587183UL, 4042904168UL, 3184240963UL,
2393293696UL, 915444966UL, 2299938515UL, 3351580749UL, 506575598UL, 1541916825UL, 3465300401UL, 525927458UL, 681152801UL, 331660975UL, 3624685846UL, 2994172100UL, 3274369082UL, 3638287602UL, 815689760UL, 1710961092UL, 2775607076UL, 2175058103UL, 3252688367UL, 2936890483UL, 2746319120UL, 2736754UL, 1646031035UL, 2448701214UL, 2886833213UL, 3689830606UL, 3292798106UL, 300773646UL, 3125160783UL, 1247453205UL, 2746275624UL, 4011063775UL,
904135764UL, 876847374UL, 366267234UL, 2541269205UL, 131376648UL, 1805948133UL, 3383589530UL, 2350119829UL, 2513170439UL, 4096158499UL, 4229211520UL, 2992048272UL, 1338522080UL, 1187391335UL, 2898563453UL, 2163088451UL, 1417971677UL, 2047421551UL, 902282791UL, 1143943232UL, 3568431811UL, 4059861993UL, 193362198UL, 2509297125UL, 3968551582UL, 2175686117UL, 3568936881UL, 1853177468UL, 2134063169UL, 2919389416UL, 1124914545UL, 1209806738UL,
},
{
1199972651UL, 1035834631UL, 3177798370UL, 860834162UL, 3741677748UL, 3780327829UL, 1693730265UL, 1643429511UL, 559568669UL, 2758650294UL, 647308222UL, 3901603996UL, 1778653821UL, 3618523672UL, 2154201067UL, 4261179460UL, 3285764480UL, 3334002738UL, 3215795953UL, 91368462UL, 1883994950UL, 1506873376UL, 1527780962UL, 4046354597UL, 4081676034UL, 2389066602UL, 1574939945UL, 427845396UL, 2714836263UL, 1259019491UL, 2493238133UL, 2584034689UL,
3151382431UL, 2171033919UL, 176883719UL, 2031844862UL, 1272380790UL, 1298975901UL, 4087222847UL, 1524000054UL, 311436877UL, 3627785554UL, 1889491722UL, 2938069193UL, 2771940687UL, 2756955968UL, 4289348777UL, 263514583UL, 887207028UL, 3522902525UL, 2273246349UL, 835377715UL, 2897243319UL, 204645450UL, 1775911983UL, 639470242UL, 2856296318UL, 3032942383UL, 2845501282UL, 1979082575UL, 202834023UL, 1876303820UL, 1434703409UL, 4240524132UL,
848853780UL, 4188621628UL, 928095314UL, 876412914UL, 3446576392UL, 3235688990UL, 4021419931UL, 2483628986UL, 3155781890UL, 399997246UL, 1642535200UL, 3872575068UL, 1577956550UL, 3606228634UL, 609914462UL, 653194726UL, 4048067248UL, 2500767965UL, 1125167825UL, 3707628088UL, 1819135158UL, 1875618971UL, 3865851141UL, 328215079UL, 1695889194UL, 2040280471UL, 3384684457UL, 2540504961UL, 293050253UL, 525570078UL, 2655676443UL, 1392199429UL,
3370444585UL, 1937915855UL, 2229636250UL, 247937142UL, 2534538765UL, 365841057UL, 2449431033UL, 2456532429UL, 101910696UL, 1247069485UL, 1523958293UL, 2473285670UL, 473709728UL, 3026667113UL, 2071968844UL, 324025193UL, 423064436UL, 3870800061UL, 3977393138UL, 3632553233UL, 352757977UL, 1584833348UL, 3173248650UL, 1159857686UL, 1501841977UL, 1751860798UL, 617281070UL, 1958012761UL, 4031667102UL, 3232142321UL, 3087428595UL, 2380824676UL,
1194087757UL, 1542961747UL, 4163350364UL, 1721646249UL, 1672791861UL, 2900511710UL, 24973500UL, 1705444176UL, 713642505UL, 3017719513UL, 2090715200UL, 3521434070UL, 37117223UL, 1948295454UL, 3055840561UL, 3476120789UL, 3994249388UL, 527899063UL, 4285770666UL, 1075524023UL, 2594223535UL, 392943522UL, 171012646UL, 3515750082UL, 3414659054UL, 3501852926UL, 1493283737UL, 2662104279UL, 2033464928UL, 90134967UL, 363058647UL, 3289266998UL,
2470752727UL, 1199972651UL, 1035834631UL, 3177798370UL, 860834162UL, 1791097822UL, 3780327829UL, 1693730265UL, 1643429511UL, 559568669UL, 3503319486UL, 647308222UL, 3901603996UL, 1778653821UL, 3618523672UL, 4294594427UL, 4261179460UL, 3285764480UL, 3334002738UL, 3215795953UL, 212518363UL, 1883994950UL, 1506873376UL, 1527780962UL, 4046354597UL, 2398655600UL, 2389066602UL, 1574939945UL, 427845396UL, 2714836263UL, 2744363872UL, 2493238133UL,
2584034689UL, 3151382431UL, 2171033919UL, 2787053497UL, 2031844862UL, 1272380790UL, 1298975901UL, 4087222847UL, 2342953154UL, 311436877UL, 3627785554UL, 1889491722UL, 2938069193UL, 2026656505UL, 2756955968UL, 4289348777UL, 263514583UL, 887207028UL, 2097276163UL, 2273246349UL, 835377715UL, 2897243319UL, 204645450UL, 4233399907UL, 639470242UL, 2856296318UL, 3032942383UL, 2845501282UL, 28260330UL, 202834023UL, 1876303820UL, 1434703409UL,
4240524132UL, 2455670466UL, 4188621628UL, 928095314UL, 876412914UL, 3446576392UL, 117581687UL, 4021419931UL, 2483628986UL, 3155781890UL, 399997246UL, 4254101087UL, 3872575068UL, 1577956550UL, 3606228634UL, 609914462UL, 4003279048UL, 4048067248UL, 2500767965UL, 1125167825UL, 3707628088UL, 922020515UL, 1875618971UL, 3865851141UL, 328215079UL, 1695889194UL, 625773097UL, 3384684457UL, 2540504961UL, 293050253UL, 525570078UL, 2592805114UL,
1392199429UL, 3370444585UL, 1937915855UL, 2229636250UL, 3190958614UL, 2534538765UL, 365841057UL, 2449431033UL, 2456532429UL, 3778669305UL, 1247069485UL, 1523958293UL, 2473285670UL, 473709728UL, 720895889UL, 2071968844UL, 324025193UL, 423064436UL, 3870800061UL, 3535536111UL, 3632553233UL, 352757977UL, 1584833348UL, 3173248650UL, 2649344603UL, 1501841977UL, 1751860798UL, 617281070UL, 1958012761UL, 778965559UL, 3232142321UL, 3087428595UL,
2380824676UL, 1194087757UL, 3880222002UL, 4163350364UL, 1721646249UL, 1672791861UL, 2900511710UL, 702936770UL, 1705444176UL, 713642505UL, 3017719513UL, 2090715200UL, 1477858694UL, 37117223UL, 1948295454UL, 3055840561UL, 3476120789UL, 464173532UL, 527899063UL, 4285770666UL, 1075524023UL, 2594223535UL, 2872629966UL, 171012646UL, 3515750082UL, 3414659054UL, 3501852926UL, 1631555059UL, 2662104279UL, 2033464928UL, 90134967UL, 363058647UL,
4112991722UL, 2470752727UL, 1199972651UL, 1035834631UL, 3177798370UL, 4152098951UL, 1791097822UL, 3780327829UL, 1693730265UL, 1643429511UL, 153020604UL, 3503319486UL, 647308222UL, 3901603996UL, 1778653821UL, 221887019UL, 4294594427UL, 4261179460UL, 3285764480UL, 3334002738UL, 3340918862UL, 212518363UL, 1883994950UL, 1506873376UL, 1527780962UL, 430180116UL, 2398655600UL, 2389066602UL, 1574939945UL, 427845396UL, 1683639957UL, 2744363872UL,
2493238133UL, 2584034689UL, 3151382431UL, 752704472UL, 2787053497UL, 2031844862UL, 1272380790UL, 1298975901UL, 1528220628UL, 2342953154UL, 311436877UL, 3627785554UL, 1889491722UL, 2576495467UL, 2026656505UL, 2756955968UL, 4289348777UL, 263514583UL, 3778019638UL, 2097276163UL, 2273246349UL, 835377715UL, 2897243319UL, 1060067446UL, 4233399907UL, 639470242UL, 2856296318UL, 3032942383UL, 2351047932UL, 28260330UL, 202834023UL, 1876303820UL,
1434703409UL, 3094305336UL, 2455670466UL, 4188621628UL, 928095314UL, 876412914UL, 3785385583UL, 117581687UL, 4021419931UL, 2483628986UL, 3155781890UL, 1867816730UL, 4254101087UL, 3872575068UL, 1577956550UL, 3606228634UL, 3081878598UL, 4003279048UL, 4048067248UL, 2500767965UL, 1125167825UL, 928465955UL, 922020515UL, 1875618971UL, 3865851141UL, 328215079UL, 173810260UL, 625773097UL, 3384684457UL, 2540504961UL, 293050253UL, 2645143254UL,
2592805114UL, 1392199429UL, 3370444585UL, 1937915855UL, 162781360UL, 3190958614UL, 2534538765UL, 365841057UL, 2449431033UL, 3105377832UL, 3778669305UL, 1247069485UL, 1523958293UL, 2473285670UL, 800971948UL, 720895889UL, 2071968844UL, 324025193UL, 423064436UL, 52577992UL, 3535536111UL, 3632553233UL, 352757977UL, 1584833348UL, 3305908059UL, 2649344603UL, 1501841977UL, 1751860798UL, 617281070UL, 264880505UL, 778965559UL, 3232142321UL,
3087428595UL, 2380824676UL, 1127761012UL, 3880222002UL, 4163350364UL, 1721646249UL, 1672791861UL, 2368512339UL, 702936770UL, 1705444176UL, 713642505UL, 3017719513UL, 197200752UL, 1477858694UL, 37117223UL, 1948295454UL, 3055840561UL, 1588372042UL, 464173532UL, 527899063UL, 4285770666UL, 1075524023UL, 2124039914UL, 2872629966UL, 171012646UL, 3515750082UL, 3414659054UL, 818571456UL, 1631555059UL, 2662104279UL, 2033464928UL, 90134967UL,
952712086UL, 4112991722UL, 2470752727UL, 1199972651UL, 1035834631UL, 888975816UL, 4152098951UL, 1791097822UL, 3780327829UL, 1693730265UL, 3406785510UL, 153020604UL, 3503319486UL, 647308222UL, 3901603996UL, 3753248472UL, 221887019UL, 4294594427UL, 4261179460UL, 3285764480UL, 1861431346UL, 3340918862UL, 212518363UL, 1883994950UL, 1506873376UL, 2695939612UL, 430180116UL, 2398655600UL, 2389066602UL, 1574939945UL, 2852159074UL, 1683639957UL,
2744363872UL, 2493238133UL, 2584034689UL, 1952065633UL, 752704472UL, 2787053497UL, 2031844862UL, 1272380790UL, 3530505866UL, 1528220628UL, 2342953154UL, 311436877UL, 3627785554UL, 3410473245UL, 2576495467UL, 2026656505UL, 2756955968UL, 4289348777UL, 2856163034UL, 3778019638UL, 2097276163UL, 2273246349UL, 835377715UL, 3127280755UL, 1060067446UL, 4233399907UL, 639470242UL, 2856296318UL, 2615775011UL, 2351047932UL, 28260330UL, 202834023UL,
1876303820UL, 619308202UL, 3094305336UL, 2455670466UL, 4188621628UL, 928095314UL, 3764894047UL, 3785385583UL, 117581687UL, 4021419931UL, 2483628986UL, 3759839215UL, 1867816730UL, 4254101087UL, 3872575068UL, 1577956550UL, 1687107439UL, 3081878598UL, 4003279048UL, 4048067248UL, 2500767965UL, 2804044146UL, 928465955UL, 922020515UL, 1875618971UL, 3865851141UL, 2359176389UL, 173810260UL, 625773097UL, 3384684457UL, 2540504961UL, 3665420733UL,
2645143254UL, 2592805114UL, 1392199429UL, 3370444585UL, 1604709429UL, 162781360UL, 3190958614UL, 2534538765UL, 365841057UL, 3843585067UL, 3105377832UL, 3778669305UL, 1247069485UL, 1523958293UL, 293374051UL, 800971948UL, 720895889UL, 2071968844UL, 324025193UL, 3342361801UL, 52577992UL, 3535536111UL, 3632553233UL, 352757977UL, 1386594581UL, 3305908059UL, 2649344603UL, 1501841977UL, 1751860798UL, 3160423601UL, 264880505UL, 778965559UL,
3232142321UL, 3087428595UL, 3814775120UL, 1127761012UL, 3880222002UL, 4163350364UL, 1721646249UL, 3640773034UL, 2368512339UL, 702936770UL, 1705444176UL, 713642505UL, 1717761787UL, 197200752UL, 1477858694UL, 37117223UL, 1948295454UL, 896215772UL, 1588372042UL, 464173532UL, 527899063UL, 4285770666UL, 3441409029UL, 2124039914UL, 2872629966UL, 171012646UL, 3515750082UL, 2216687886UL, 818571456UL, 1631555059UL, 2662104279UL, 2033464928UL,
369438400UL, 329003658UL, 1503365029UL, 4215790910UL, 3264377550UL, 733526983UL, 2935318632UL, 1792331479UL, 608347530UL, 392723097UL, 1330445854UL, 3473004271UL, 1267636682UL, 2150566972UL, 2664910943UL, 2591861637UL, 409769584UL, 2943326880UL, 3746302819UL, 3162268832UL, 1028663260UL, 3206607045UL, 832105292UL, 2119405275UL, 538318455UL, 2981192295UL, 861775416UL, 609718403UL, 3531204230UL, 1904759571UL, 1262633751UL, 2375133081UL,
460454984UL, 946700253UL, 3763898311UL, 1571175213UL, 3124410107UL, 2413420216UL, 2664177543UL, 3241803820UL, 3968067371UL, 1234860999UL, 1130471500UL, 772727786UL, 247203117UL, 576455235UL, 246297007UL, 2027348597UL, 764933887UL, 3812479771UL, 1825807084UL, 4072281412UL, 2156865781UL, 1286484847UL, 1966749063UL, 2479269303UL, 423506843UL, 3070938758UL, 653091413UL, 2267423132UL, 2004263526UL, 1374490719UL, 3871990628UL, 841138314UL,
1260317857UL, 3887432433UL, 4025147569UL, 764233331UL, 1794763428UL, 3005903468UL, 877926770UL, 2466593927UL, 2971729561UL, 3203070565UL, 4198500026UL, 815665759UL, 2434508139UL, 1840456368UL, 2279000427UL, 17077200UL, 3178380570UL, 990304199UL, 3578008580UL, 1965763660UL, 1640352477UL, 750159594UL, 2047409402UL, 3576308245UL, 544920564UL, 1730124869UL, 1194761386UL, 3280315505UL, 147334027UL, 2870674244UL, 2076860776UL, 1100947675UL,
2482772161UL, 401966468UL, 1610650855UL, 193868446UL, 3808157106UL, 1509130117UL, 1324484736UL, 3852893217UL, 1059179497UL, 4053543778UL, 2557844172UL, 3282312002UL, 682550058UL, 4281899173UL, 137171998UL, 3239159214UL, 2258610918UL, 426724741UL, 3502660993UL, 135977383UL, 429929363UL, 3984458137UL, 964026748UL, 2182019070UL, 3836562946UL, 515026869UL, 359030455UL, 1301694917UL, 2300414803UL, 2364654981UL, 3804876710UL, 171119249UL,
2646785698UL, 4283509387UL, 3628087763UL, 1748227044UL, 3037141234UL, 3000413256UL, 23007314UL, 3598880509UL, 4160517314UL, 112205578UL, 1677675411UL, 734881643UL, 2830770338UL, 3470317145UL, 3306806569UL, 2635040943UL, 2671367560UL, 3528996498UL, 3878886478UL, 3114253828UL, 2721384408UL, 3175226991UL, 1393767271UL, 2651623266UL, 3767978376UL, 1269699398UL, 1100964192UL, 4169085845UL, 2086718107UL, 1286251099UL, 764751784UL, 3006878591UL,
},

};
# 66 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mrg32k3a.h" 1
# 70 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mrg32k3a.h"
static __attribute__((device)) double mrg32k3aM1[64][3][3] = {
        {
            { 0., 1., 0. },
            { 0., 0., 1. },
            { 4294156359., 1403580., 0. }
        },
        {
            { 0., 0., 1. },
            { 4294156359., 1403580., 0. },
            { 0., 4294156359., 1403580. }
        },
        {
            { 0., 4294156359., 1403580. },
            { 244671815., 2941890554., 4294156359. },
            { 149925673., 489343630., 2941890554. }
        },
        {
            { 1527363550., 2758233149., 1831234280. },
            { 4072640363., 939574583., 2758233149. },
            { 2064391165., 3228066636., 939574583. }
        },
        {
            { 736416029., 2961816100., 342112271. },
            { 387300998., 1062452522., 2961816100. },
            { 2955879160., 340793741., 1062452522. }
        },
        {
            { 1243502014., 2218748291., 1709215645. },
            { 2019641772., 3847560959., 2218748291. },
            { 3866010231., 2305448679., 3847560959. }
        },
        {
            { 3241775219., 3453352062., 3721871040. },
            { 4062454730., 3015754., 3453352062. },
            { 919711945., 613405362., 3015754. }
        },
        {
            { 1955221006., 1414472808., 1746037714. },
            { 3653507277., 1644962013., 1414472808. },
            { 3501544776., 2336229602., 1644962013. }
        },
        {
            { 1170096663., 49135452., 3441537107. },
            { 1857945175., 1649398389., 49135452. },
            { 333002869., 3109147376., 1649398389. }
        },
        {
            { 2299034194., 2297111910., 862649200. },
            { 1399961132., 996706937., 2297111910. },
            { 3439056503., 1481993076., 996706937. }
        },
        {
            { 4146310528., 458782589., 1007330283. },
            { 4241015765., 3979619964., 458782589. },
            { 553886495., 2186897562., 3979619964. }
        },
        {
            { 3630027893., 2130448350., 292773857. },
            { 1392525159., 1299285967., 2130448350. },
            { 2589171163., 1217405758., 1299285967. }
        },
        {
            { 892409263., 1999175811., 2979225418. },
            { 1996163538., 2148702503., 1999175811. },
            { 3922720782., 103819730., 2148702503. }
        },
        {
            { 1586003016., 2114210471., 3240775579. },
            { 2777288607., 1400478398., 2114210471. },
            { 3018215420., 535326008., 1400478398. }
        },
        {
            { 2188531273., 1783231160., 3576659343. },
            { 1908318389., 379210133., 1783231160. },
            { 554369329., 250053591., 379210133. }
        },
        {
            { 4022841636., 3951951872., 2143424240. },
            { 1046219306., 1591992468., 3951951872. },
            { 1510277444., 381333958., 1591992468. }
        },
        {
            { 2256493727., 3715182130., 642697923. },
            { 3615342722., 3975008370., 3715182130. },
            { 2405650329., 754337639., 3975008370. }
        },
        {
            { 1286664224., 627406673., 963516608. },
            { 1541344588., 460768826., 627406673. },
            { 1089892553., 2717717970., 460768826. }
        },
        {
            { 2956342842., 3471097641., 2353092905. },
            { 2996150472., 420480221., 3471097641. },
            { 2221681883., 372736411., 420480221. }
        },
        {
            { 420492906., 153526651., 3499730988. },
            { 2662640502., 3278195133., 153526651. },
            { 4086436419., 2510762118., 3278195133. }
        },
        {
            { 3310184147., 2228376089., 823220763. },
            { 3992771814., 1693168425., 2228376089. },
            { 2295790366., 1401872772., 1693168425. }
        },
        {
            { 2529428830., 1497104068., 4253248635. },
            { 3746310018., 630867741., 1497104068. },
            { 627043435., 721725795., 630867741. }
        },
        {
            { 2571072593., 3039669025., 1591031831. },
            { 526054481., 661344445., 3039669025. },
            { 4246010312., 735391270., 661344445. }
        },
        {
            { 1847312821., 4042890210., 4241772463. },
            { 606605705., 2644799309., 4042890210. },
            { 2658402822., 1342278931., 2644799309. }
        },
        {
            { 2409846784., 1096138313., 1416249993. },
            { 1501878241., 138013862., 1096138313. },
            { 1617749306., 1975136163., 138013862. }
        },
        {
            { 599453422., 73950522., 2965395603. },
            { 55354701., 3855242202., 73950522. },
            { 3981734504., 3354399019., 3855242202. }
        },
        {
            { 4271076381., 813410089., 3461955319. },
            { 1044920137., 3029005516., 813410089. },
            { 3501837362., 3321539504., 3029005516. }
        },
        {
            { 3058183515., 941408572., 1783998098. },
            { 1546486080., 4116985007., 941408572. },
            { 2247500745., 1460625377., 4116985007. }
        },
        {
            { 4216782514., 3352801941., 2315095646. },
            { 639029973., 94451952., 3352801941. },
            { 1242898773., 3964593332., 94451952. }
        },
        {
            { 2264905138., 1926285644., 1108147171. },
            { 2390706911., 385258225., 1926285644. },
            { 3569882325., 3728744670., 385258225. }
        },
        {
            { 270679073., 1065683096., 2992662885. },
            { 4196917281., 2886425156., 1065683096. },
            { 749134119., 1849148167., 2886425156. }
        },
        {
            { 35689930., 1378151623., 951629713. },
            { 673810920., 948843427., 1378151623. },
            { 3808868984., 927013635., 948843427. }
        },
        {
            { 1891490872., 1130489594., 3734864133. },
            { 1457450350., 3362920032., 1130489594. },
            { 638998846., 1401175590., 3362920032. }
        },
        {
            { 2254459023., 2384691454., 1730098031. },
            { 2844861718., 1807491073., 2384691454. },
            { 351423668., 1570264155., 1807491073. }
        },
        {
            { 3047429268., 4245359555., 2449575498. },
            { 1797081212., 1237196477., 4245359555. },
            { 143400628., 3663731096., 1237196477. }
        },
        {
            { 3313321106., 4263819658., 1047529624. },
            { 3719941673., 3155049403., 4263819658. },
            { 1981313839., 4281524426., 3155049403. }
        },
        {
            { 2005252417., 3263186729., 1535805957. },
            { 2951515865., 1729281525., 3263186729. },
            { 1141249417., 2268963059., 1729281525. }
        },
        {
            { 2367065164., 83908466., 4294308508. },
            { 1352516724., 1416676049., 83908466. },
            { 1040867745., 1304732377., 1416676049. }
        },
        {
            { 3214147257., 1434230503., 2944821434. },
            { 2753040912., 4041536918., 1434230503. },
            { 1317260239., 338830578., 4041536918. }
        },
        {
            { 300628476., 2054743463., 1499597869. },
            { 1762244284., 1422043015., 2054743463. },
            { 3581125669., 1207561803., 1422043015. }
        },
        {
            { 4171745404., 4064983592., 1934508265. },
            { 3049723261., 1744636487., 4064983592. },
            { 947753516., 3952135907., 1744636487. }
        },
        {
            { 1625369148., 3577024659., 2778677259. },
            { 1729967818., 1049600974., 3577024659. },
            { 2089137344., 1569794605., 1049600974. }
        },
        {
            { 1373068765., 3958611830., 569117280. },
            { 410042396., 3551255470., 3958611830. },
            { 869476379., 1680625376., 3551255470. }
        },
        {
            { 2108618602., 2543645250., 913717833. },
            { 2111984988., 1012482542., 2543645250. },
            { 2545745615., 3141042890., 1012482542. }
        },
        {
            { 1157293598., 584852249., 2272893205. },
            { 1631801979., 3013855247., 584852249. },
            { 3977310441., 82049263., 3013855247. }
        },
        {
            { 3580234334., 3137526662., 2403875621. },
            { 3580869206., 3670086228., 3137526662. },
            { 656744553., 1764904195., 3670086228. }
        },
        {
            { 2792496861., 3634185196., 3887031679. },
            { 3601823850., 3464838365., 3634185196. },
            { 3136165138., 2842987937., 3464838365. }
        },
        {
            { 1362557480., 3230022138., 4278720212. },
            { 3427386258., 3848976950., 3230022138. },
            { 2109817045., 2441486578., 3848976950. }
        },
        {
            { 1198519135., 2007945401., 3868481. },
            { 3335076429., 2082683147., 2007945401. },
            { 2341088247., 888193479., 2082683147. }
        },
        {
            { 3473925387., 3193380570., 565138859. },
            { 307060547., 782210925., 3193380570. },
            { 167617770., 2180014252., 782210925. }
        },
        {
            { 3811588895., 3303532086., 2766583698. },
            { 908630605., 2665400165., 3303532086. },
            { 2499994113., 3316180851., 2665400165. }
        },
        {
            { 4288926968., 3033075037., 1505732852. },
            { 1531633406., 645804125., 3033075037. },
            { 2942690261., 2205365640., 645804125. }
        },
        {
            { 3976196483., 3651411522., 1652430357. },
            { 1690405883., 1294990760., 3651411522. },
            { 209339647., 3088484327., 1294990760. }
        },
        {
            { 3171589548., 2291131070., 2093793287. },
            { 2997812074., 4093879780., 2291131070. },
            { 3255666800., 858124816., 4093879780. }
        },
        {
            { 4113016361., 2999667479., 3995043314. },
            { 1333973326., 4007774239., 2999667479. },
            { 3322921863., 4278103786., 4007774239. }
        },
        {
            { 925786347., 2109676036., 1879981040. },
            { 1701566570., 1489702270., 2109676036. },
            { 2719807628., 158549605., 1489702270. }
        },
        {
            { 2255405265., 3460246357., 218033453. },
            { 2135115875., 359516994., 3460246357. },
            { 3568862459., 3114762683., 359516994. }
        },
        {
            { 773148471., 4117539411., 3073622315. },
            { 3807175775., 186466108., 4117539411. },
            { 2842197411., 651334129., 186466108. }
        },
        {
            { 615242951., 1475251263., 3586439101. },
            { 1693917167., 3058812486., 1475251263. },
            { 568701600., 1164226398., 3058812486. }
        },
        {
            { 1632636204., 15370275., 2061555515. },
            { 4187505695., 1741164221., 15370275. },
            { 2882176274., 3978412194., 1741164221. }
        },
        {
            { 3446066703., 344820524., 74213775. },
            { 1008543583., 2579620192., 344820524. },
            { 3753911358., 1538453821., 2579620192. }
        },
        {
            { 3600859892., 1269921024., 4069458760. },
            { 2050939727., 2222725697., 1269921024. },
            { 3208347646., 690898125., 2222725697. }
        },
        {
            { 599407451., 2806239788., 1742216102. },
            { 975123999., 764869161., 2806239788. },
            { 2729710367., 1845257036., 764869161. }
        },
        {
            { 967330218., 3464884028., 3444447102. },
            { 580449578., 1343714307., 3464884028. },
            { 1775329096., 4027221761., 1343714307. }
        }
    };

static double mrg32k3aM1Host[64][3][3] = {
        {
            { 0., 1., 0. },
            { 0., 0., 1. },
            { 4294156359., 1403580., 0. }
        },
        {
            { 0., 0., 1. },
            { 4294156359., 1403580., 0. },
            { 0., 4294156359., 1403580. }
        },
        {
            { 0., 4294156359., 1403580. },
            { 244671815., 2941890554., 4294156359. },
            { 149925673., 489343630., 2941890554. }
        },
        {
            { 1527363550., 2758233149., 1831234280. },
            { 4072640363., 939574583., 2758233149. },
            { 2064391165., 3228066636., 939574583. }
        },
        {
            { 736416029., 2961816100., 342112271. },
            { 387300998., 1062452522., 2961816100. },
            { 2955879160., 340793741., 1062452522. }
        },
        {
            { 1243502014., 2218748291., 1709215645. },
            { 2019641772., 3847560959., 2218748291. },
            { 3866010231., 2305448679., 3847560959. }
        },
        {
            { 3241775219., 3453352062., 3721871040. },
            { 4062454730., 3015754., 3453352062. },
            { 919711945., 613405362., 3015754. }
        },
        {
            { 1955221006., 1414472808., 1746037714. },
            { 3653507277., 1644962013., 1414472808. },
            { 3501544776., 2336229602., 1644962013. }
        },
        {
            { 1170096663., 49135452., 3441537107. },
            { 1857945175., 1649398389., 49135452. },
            { 333002869., 3109147376., 1649398389. }
        },
        {
            { 2299034194., 2297111910., 862649200. },
            { 1399961132., 996706937., 2297111910. },
            { 3439056503., 1481993076., 996706937. }
        },
        {
            { 4146310528., 458782589., 1007330283. },
            { 4241015765., 3979619964., 458782589. },
            { 553886495., 2186897562., 3979619964. }
        },
        {
            { 3630027893., 2130448350., 292773857. },
            { 1392525159., 1299285967., 2130448350. },
            { 2589171163., 1217405758., 1299285967. }
        },
        {
            { 892409263., 1999175811., 2979225418. },
            { 1996163538., 2148702503., 1999175811. },
            { 3922720782., 103819730., 2148702503. }
        },
        {
            { 1586003016., 2114210471., 3240775579. },
            { 2777288607., 1400478398., 2114210471. },
            { 3018215420., 535326008., 1400478398. }
        },
        {
            { 2188531273., 1783231160., 3576659343. },
            { 1908318389., 379210133., 1783231160. },
            { 554369329., 250053591., 379210133. }
        },
        {
            { 4022841636., 3951951872., 2143424240. },
            { 1046219306., 1591992468., 3951951872. },
            { 1510277444., 381333958., 1591992468. }
        },
        {
            { 2256493727., 3715182130., 642697923. },
            { 3615342722., 3975008370., 3715182130. },
            { 2405650329., 754337639., 3975008370. }
        },
        {
            { 1286664224., 627406673., 963516608. },
            { 1541344588., 460768826., 627406673. },
            { 1089892553., 2717717970., 460768826. }
        },
        {
            { 2956342842., 3471097641., 2353092905. },
            { 2996150472., 420480221., 3471097641. },
            { 2221681883., 372736411., 420480221. }
        },
        {
            { 420492906., 153526651., 3499730988. },
            { 2662640502., 3278195133., 153526651. },
            { 4086436419., 2510762118., 3278195133. }
        },
        {
            { 3310184147., 2228376089., 823220763. },
            { 3992771814., 1693168425., 2228376089. },
            { 2295790366., 1401872772., 1693168425. }
        },
        {
            { 2529428830., 1497104068., 4253248635. },
            { 3746310018., 630867741., 1497104068. },
            { 627043435., 721725795., 630867741. }
        },
        {
            { 2571072593., 3039669025., 1591031831. },
            { 526054481., 661344445., 3039669025. },
            { 4246010312., 735391270., 661344445. }
        },
        {
            { 1847312821., 4042890210., 4241772463. },
            { 606605705., 2644799309., 4042890210. },
            { 2658402822., 1342278931., 2644799309. }
        },
        {
            { 2409846784., 1096138313., 1416249993. },
            { 1501878241., 138013862., 1096138313. },
            { 1617749306., 1975136163., 138013862. }
        },
        {
            { 599453422., 73950522., 2965395603. },
            { 55354701., 3855242202., 73950522. },
            { 3981734504., 3354399019., 3855242202. }
        },
        {
            { 4271076381., 813410089., 3461955319. },
            { 1044920137., 3029005516., 813410089. },
            { 3501837362., 3321539504., 3029005516. }
        },
        {
            { 3058183515., 941408572., 1783998098. },
            { 1546486080., 4116985007., 941408572. },
            { 2247500745., 1460625377., 4116985007. }
        },
        {
            { 4216782514., 3352801941., 2315095646. },
            { 639029973., 94451952., 3352801941. },
            { 1242898773., 3964593332., 94451952. }
        },
        {
            { 2264905138., 1926285644., 1108147171. },
            { 2390706911., 385258225., 1926285644. },
            { 3569882325., 3728744670., 385258225. }
        },
        {
            { 270679073., 1065683096., 2992662885. },
            { 4196917281., 2886425156., 1065683096. },
            { 749134119., 1849148167., 2886425156. }
        },
        {
            { 35689930., 1378151623., 951629713. },
            { 673810920., 948843427., 1378151623. },
            { 3808868984., 927013635., 948843427. }
        },
        {
            { 1891490872., 1130489594., 3734864133. },
            { 1457450350., 3362920032., 1130489594. },
            { 638998846., 1401175590., 3362920032. }
        },
        {
            { 2254459023., 2384691454., 1730098031. },
            { 2844861718., 1807491073., 2384691454. },
            { 351423668., 1570264155., 1807491073. }
        },
        {
            { 3047429268., 4245359555., 2449575498. },
            { 1797081212., 1237196477., 4245359555. },
            { 143400628., 3663731096., 1237196477. }
        },
        {
            { 3313321106., 4263819658., 1047529624. },
            { 3719941673., 3155049403., 4263819658. },
            { 1981313839., 4281524426., 3155049403. }
        },
        {
            { 2005252417., 3263186729., 1535805957. },
            { 2951515865., 1729281525., 3263186729. },
            { 1141249417., 2268963059., 1729281525. }
        },
        {
            { 2367065164., 83908466., 4294308508. },
            { 1352516724., 1416676049., 83908466. },
            { 1040867745., 1304732377., 1416676049. }
        },
        {
            { 3214147257., 1434230503., 2944821434. },
            { 2753040912., 4041536918., 1434230503. },
            { 1317260239., 338830578., 4041536918. }
        },
        {
            { 300628476., 2054743463., 1499597869. },
            { 1762244284., 1422043015., 2054743463. },
            { 3581125669., 1207561803., 1422043015. }
        },
        {
            { 4171745404., 4064983592., 1934508265. },
            { 3049723261., 1744636487., 4064983592. },
            { 947753516., 3952135907., 1744636487. }
        },
        {
            { 1625369148., 3577024659., 2778677259. },
            { 1729967818., 1049600974., 3577024659. },
            { 2089137344., 1569794605., 1049600974. }
        },
        {
            { 1373068765., 3958611830., 569117280. },
            { 410042396., 3551255470., 3958611830. },
            { 869476379., 1680625376., 3551255470. }
        },
        {
            { 2108618602., 2543645250., 913717833. },
            { 2111984988., 1012482542., 2543645250. },
            { 2545745615., 3141042890., 1012482542. }
        },
        {
            { 1157293598., 584852249., 2272893205. },
            { 1631801979., 3013855247., 584852249. },
            { 3977310441., 82049263., 3013855247. }
        },
        {
            { 3580234334., 3137526662., 2403875621. },
            { 3580869206., 3670086228., 3137526662. },
            { 656744553., 1764904195., 3670086228. }
        },
        {
            { 2792496861., 3634185196., 3887031679. },
            { 3601823850., 3464838365., 3634185196. },
            { 3136165138., 2842987937., 3464838365. }
        },
        {
            { 1362557480., 3230022138., 4278720212. },
            { 3427386258., 3848976950., 3230022138. },
            { 2109817045., 2441486578., 3848976950. }
        },
        {
            { 1198519135., 2007945401., 3868481. },
            { 3335076429., 2082683147., 2007945401. },
            { 2341088247., 888193479., 2082683147. }
        },
        {
            { 3473925387., 3193380570., 565138859. },
            { 307060547., 782210925., 3193380570. },
            { 167617770., 2180014252., 782210925. }
        },
        {
            { 3811588895., 3303532086., 2766583698. },
            { 908630605., 2665400165., 3303532086. },
            { 2499994113., 3316180851., 2665400165. }
        },
        {
            { 4288926968., 3033075037., 1505732852. },
            { 1531633406., 645804125., 3033075037. },
            { 2942690261., 2205365640., 645804125. }
        },
        {
            { 3976196483., 3651411522., 1652430357. },
            { 1690405883., 1294990760., 3651411522. },
            { 209339647., 3088484327., 1294990760. }
        },
        {
            { 3171589548., 2291131070., 2093793287. },
            { 2997812074., 4093879780., 2291131070. },
            { 3255666800., 858124816., 4093879780. }
        },
        {
            { 4113016361., 2999667479., 3995043314. },
            { 1333973326., 4007774239., 2999667479. },
            { 3322921863., 4278103786., 4007774239. }
        },
        {
            { 925786347., 2109676036., 1879981040. },
            { 1701566570., 1489702270., 2109676036. },
            { 2719807628., 158549605., 1489702270. }
        },
        {
            { 2255405265., 3460246357., 218033453. },
            { 2135115875., 359516994., 3460246357. },
            { 3568862459., 3114762683., 359516994. }
        },
        {
            { 773148471., 4117539411., 3073622315. },
            { 3807175775., 186466108., 4117539411. },
            { 2842197411., 651334129., 186466108. }
        },
        {
            { 615242951., 1475251263., 3586439101. },
            { 1693917167., 3058812486., 1475251263. },
            { 568701600., 1164226398., 3058812486. }
        },
        {
            { 1632636204., 15370275., 2061555515. },
            { 4187505695., 1741164221., 15370275. },
            { 2882176274., 3978412194., 1741164221. }
        },
        {
            { 3446066703., 344820524., 74213775. },
            { 1008543583., 2579620192., 344820524. },
            { 3753911358., 1538453821., 2579620192. }
        },
        {
            { 3600859892., 1269921024., 4069458760. },
            { 2050939727., 2222725697., 1269921024. },
            { 3208347646., 690898125., 2222725697. }
        },
        {
            { 599407451., 2806239788., 1742216102. },
            { 975123999., 764869161., 2806239788. },
            { 2729710367., 1845257036., 764869161. }
        },
        {
            { 967330218., 3464884028., 3444447102. },
            { 580449578., 1343714307., 3464884028. },
            { 1775329096., 4027221761., 1343714307. }
        }
    };

static __attribute__((device)) double mrg32k3aM2[64][3][3] = {
        {
            { 0., 1., 0. },
            { 0., 0., 1. },
            { 4293573854., 0., 527612. }
        },
        {
            { 0., 0., 1. },
            { 4293573854., 0., 527612. },
            { 2706407399., 4293573854., 3497978192. }
        },
        {
            { 2706407399., 4293573854., 3497978192. },
            { 1431525864., 2706407399., 3281754271. },
            { 97673890., 1431525864., 1673476130. }
        },
        {
            { 3405842137., 2680076935., 893509979. },
            { 4035147174., 3405842137., 3280220074. },
            { 2623373296., 4035147174., 361718588. }
        },
        {
            { 818368950., 3790774567., 3542344109. },
            { 1817134745., 818368950., 3321940838. },
            { 3493477402., 1817134745., 2854655037. }
        },
        {
            { 498682467., 2928649385., 811441367. },
            { 1777037472., 498682467., 479207863. },
            { 3058260025., 1777037472., 1528225099. }
        },
        {
            { 3893311647., 3140922085., 64039185. },
            { 82107183., 3893311647., 2655465224. },
            { 1674879036., 82107183., 1089381262. }
        },
        {
            { 28639152., 3496041927., 2231910770. },
            { 3174683233., 28639152., 2828785870. },
            { 3681140872., 3174683233., 3910194649. }
        },
        {
            { 1463826069., 300842059., 3313769518. },
            { 1799677538., 1463826069., 3174861078. },
            { 1882279394., 1799677538., 3509975160. }
        },
        {
            { 2092194020., 184076987., 2202401252. },
            { 3103629604., 2092194020., 3409560232. },
            { 4257445059., 3103629604., 2390202783. }
        },
        {
            { 812917091., 2574011276., 4168802395. },
            { 209817750., 812917091., 2974870628. },
            { 3238802184., 209817750., 3692836406. }
        },
        {
            { 477309738., 3314523413., 3442242150. },
            { 2755731404., 477309738., 2782713347. },
            { 1606221490., 2755731404., 1033463096. }
        },
        {
            { 2155469603., 3326516116., 3843369786. },
            { 288604458., 2155469603., 571673571. },
            { 1501677614., 288604458., 2928213494. }
        },
        {
            { 2082469029., 749754403., 3963963316. },
            { 2764859700., 2082469029., 3576428059. },
            { 2840894706., 2764859700., 1782279859. }
        },
        {
            { 3760163766., 1041986082., 1799196192. },
            { 1022129134., 3760163766., 1332558840. },
            { 276873446., 1022129134., 3979423632. }
        },
        {
            { 1021313167., 1312544548., 1716381787. },
            { 3037868518., 1021313167., 199085085. },
            { 2582787611., 3037868518., 3539882179. }
        },
        {
            { 2569413030., 1631336015., 2594942403. },
            { 1030618503., 2569413030., 3467650326. },
            { 1998739584., 1030618503., 3174552073. }
        },
        {
            { 2334639309., 3114094203., 601680947. },
            { 2110199318., 2334639309., 678342865. },
            { 1649523168., 2110199318., 2154948056. }
        },
        {
            { 563657176., 191330473., 1641595774. },
            { 780563537., 563657176., 3029522338. },
            { 2037330914., 780563537., 2084602709. }
        },
        {
            { 3414769923., 1968799026., 2238126504. },
            { 832866376., 3414769923., 3754780168. },
            { 2165145850., 832866376., 1594768331. }
        },
        {
            { 1646861218., 2317984620., 2301581548. },
            { 2672536210., 1646861218., 359763062. },
            { 2391283983., 2672536210., 1885870777. }
        },
        {
            { 841254072., 3765813448., 1635365181. },
            { 2013240130., 841254072., 605925849. },
            { 3743932305., 2013240130., 400681955. }
        },
        {
            { 1930213004., 2072952279., 3077694794. },
            { 3579956569., 1930213004., 2478539210. },
            { 1960229502., 3579956569., 1455652656. }
        },
        {
            { 1097613522., 1784540933., 1194440107. },
            { 321747515., 1097613522., 1225209584. },
            { 74521379., 321747515., 4288531000. }
        },
        {
            { 143812745., 3254530816., 3514348856. },
            { 769295000., 143812745., 2468210728. },
            { 1927161272., 769295000., 522705580. }
        },
        {
            { 2692035063., 2596905012., 1643240704. },
            { 1103432342., 2692035063., 1446182108. },
            { 4161111774., 1103432342., 3076435551. }
        },
        {
            { 2375319030., 1391532370., 3742334018. },
            { 1202100604., 2375319030., 4098434768. },
            { 2327872488., 1202100604., 1471526950. }
        },
        {
            { 4269164791., 2795313144., 2507855960. },
            { 4245372460., 4269164791., 4094914553. },
            { 3873219634., 4245372460., 1473695507. }
        },
        {
            { 513890845., 1208902926., 2870530442. },
            { 1984873167., 513890845., 1257532340. },
            { 1212627640., 1984873167., 2354363842. }
        },
        {
            { 1848364568., 1552116673., 3496528455. },
            { 4160778291., 1848364568., 141769900. },
            { 3611019106., 4160778291., 596424080. }
        },
        {
            { 364070020., 3520039729., 837362349. },
            { 2544671570., 364070020., 2188646679. },
            { 163978331., 2544671570., 672947816. }
        },
        {
            { 1192700714., 3968150021., 298357363. },
            { 635565666., 1192700714., 2589432341. },
            { 2548654227., 635565666., 3531570992. }
        },
        {
            { 2709640529., 676525399., 875361870. },
            { 1315499519., 2709640529., 3842690720. },
            { 3300994644., 1315499519., 2446760804. }
        },
        {
            { 2742149264., 1410604392., 3032350755. },
            { 3774935330., 2742149264., 597633965. },
            { 4085935803., 3774935330., 3952463556. }
        },
        {
            { 3878579563., 845297523., 1721916511. },
            { 2077922420., 3878579563., 3651360351. },
            { 2177255734., 2077922420., 3791239282. }
        },
        {
            { 1570315355., 4252790045., 3522351060. },
            { 2324624266., 1570315355., 3594939336. },
            { 1725087354., 2324624266., 1338343327. }
        },
        {
            { 2305761589., 381933244., 3663579047. },
            { 1355307047., 2305761589., 313617972. },
            { 992174375., 1355307047., 3881593435. }
        },
        {
            { 1667857811., 1564715297., 2263851601. },
            { 3791771273., 1667857811., 4196134923. },
            { 3347975047., 3791771273., 615040705. }
        },
        {
            { 4093947334., 3454015638., 2815567716. },
            { 4261953004., 4093947334., 3973733876. },
            { 2979573134., 4261953004., 3757047667. }
        },
        {
            { 250120061., 570149551., 1513430926. },
            { 3178644752., 250120061., 1701869032. },
            { 4172515680., 3178644752., 4213855850. }
        },
        {
            { 4158106802., 3062358456., 1815738463. },
            { 1379176112., 4158106802., 3926509890. },
            { 2842564878., 1379176112., 2852219546. }
        },
        {
            { 931848746., 256263523., 2633569246. },
            { 3284646837., 931848746., 2567084715. },
            { 415258465., 3284646837., 2017565947. }
        },
        {
            { 1648005210., 1032291296., 3987397422. },
            { 1831496020., 1648005210., 2829448427. },
            { 1821082272., 1831496020., 2917140265. }
        },
        {
            { 4161327077., 489964129., 3870847744. },
            { 1669447863., 4161327077., 4292947198. },
            { 1522417114., 1669447863., 2652286672. }
        },
        {
            { 1270934555., 3136631324., 505612043. },
            { 2981474723., 1270934555., 2528619024. },
            { 625182639., 2981474723., 1008985039. }
        },
        {
            { 280996820., 143706137., 3013099060. },
            { 1797675893., 280996820., 3743985508. },
            { 1123794455., 1797675893., 2460119169. }
        },
        {
            { 919218027., 4154920441., 1125672685. },
            { 3933041881., 919218027., 474242849. },
            { 564891116., 3933041881., 2263904321. }
        },
        {
            { 2920112852., 1965329198., 1177141043. },
            { 2135250851., 2920112852., 969184056. },
            { 296035385., 2135250851., 4267827987. }
        },
        {
            { 1481142942., 4120754772., 1088557292. },
            { 265491023., 1481142942., 2860005744. },
            { 301796252., 265491023., 1935975979. }
        },
        {
            { 2111859033., 2813610100., 1001476468. },
            { 73849832., 2111859033., 3980799998. },
            { 3330206241., 73849832., 1933943506. }
        },
        {
            { 1781286360., 3661231931., 3509383709. },
            { 2753158871., 1781286360., 3119883109. },
            { 3576525143., 2753158871., 551079002. }
        },
        {
            { 1185024844., 587779104., 1004942725. },
            { 3763632860., 1185024844., 947424568. },
            { 3811666068., 3763632860., 2352253462. }
        },
        {
            { 1310227170., 218138208., 3172947233. },
            { 766129426., 1310227170., 1808643264. },
            { 2226659371., 766129426., 3853798112. }
        },
        {
            { 2230902378., 4243560874., 2491962392. },
            { 3836629116., 2230902378., 3637515403. },
            { 2846140932., 3836629116., 3083355464. }
        },
        {
            { 999448569., 1464488480., 3344426626. },
            { 946166795., 999448569., 340856814. },
            { 3686999436., 946166795., 3231079441. }
        },
        {
            { 1226155368., 3477563770., 550006884. },
            { 2378667355., 1226155368., 1493409040. },
            { 260364836., 2378667355., 4133888397. }
        },
        {
            { 1277901832., 310796286., 2818511068. },
            { 3088910653., 1277901832., 3303406025. },
            { 2507911914., 3088910653., 3712928074. }
        },
        {
            { 481918378., 339570348., 1728801469. },
            { 1623163429., 481918378., 2209094694. },
            { 3146982514., 1623163429., 508445538. }
        },
        {
            { 3138921230., 2381863183., 1992357430. },
            { 1024510915., 3138921230., 2122851650. },
            { 1453455184., 1024510915., 941946604. }
        },
        {
            { 2465372719., 1391015357., 3328905025. },
            { 1821933605., 2465372719., 1343489680. },
            { 3648970313., 1821933605., 1816599716. }
        },
        {
            { 118634664., 3358712512., 2492792220. },
            { 348833376., 118634664., 2495544591. },
            { 3235582254., 348833376., 4043157504. }
        },
        {
            { 2303067090., 3371139074., 1967771133. },
            { 598630070., 2303067090., 1819012637. },
            { 2049250561., 598630070., 4093044926. }
        },
        {
            { 3035321857., 3971176093., 226779704. },
            { 3361614254., 3035321857., 2807125404. },
            { 326640887., 3361614254., 3147308542. }
        },
        {
            { 1774298149., 4179629947., 3145006948. },
            { 1688753503., 1774298149., 94869516. },
            { 2327946901., 1688753503., 2786835219. }
        }
    };

static double mrg32k3aM2Host[64][3][3] = {
        {
            { 0., 1., 0. },
            { 0., 0., 1. },
            { 4293573854., 0., 527612. }
        },
        {
            { 0., 0., 1. },
            { 4293573854., 0., 527612. },
            { 2706407399., 4293573854., 3497978192. }
        },
        {
            { 2706407399., 4293573854., 3497978192. },
            { 1431525864., 2706407399., 3281754271. },
            { 97673890., 1431525864., 1673476130. }
        },
        {
            { 3405842137., 2680076935., 893509979. },
            { 4035147174., 3405842137., 3280220074. },
            { 2623373296., 4035147174., 361718588. }
        },
        {
            { 818368950., 3790774567., 3542344109. },
            { 1817134745., 818368950., 3321940838. },
            { 3493477402., 1817134745., 2854655037. }
        },
        {
            { 498682467., 2928649385., 811441367. },
            { 1777037472., 498682467., 479207863. },
            { 3058260025., 1777037472., 1528225099. }
        },
        {
            { 3893311647., 3140922085., 64039185. },
            { 82107183., 3893311647., 2655465224. },
            { 1674879036., 82107183., 1089381262. }
        },
        {
            { 28639152., 3496041927., 2231910770. },
            { 3174683233., 28639152., 2828785870. },
            { 3681140872., 3174683233., 3910194649. }
        },
        {
            { 1463826069., 300842059., 3313769518. },
            { 1799677538., 1463826069., 3174861078. },
            { 1882279394., 1799677538., 3509975160. }
        },
        {
            { 2092194020., 184076987., 2202401252. },
            { 3103629604., 2092194020., 3409560232. },
            { 4257445059., 3103629604., 2390202783. }
        },
        {
            { 812917091., 2574011276., 4168802395. },
            { 209817750., 812917091., 2974870628. },
            { 3238802184., 209817750., 3692836406. }
        },
        {
            { 477309738., 3314523413., 3442242150. },
            { 2755731404., 477309738., 2782713347. },
            { 1606221490., 2755731404., 1033463096. }
        },
        {
            { 2155469603., 3326516116., 3843369786. },
            { 288604458., 2155469603., 571673571. },
            { 1501677614., 288604458., 2928213494. }
        },
        {
            { 2082469029., 749754403., 3963963316. },
            { 2764859700., 2082469029., 3576428059. },
            { 2840894706., 2764859700., 1782279859. }
        },
        {
            { 3760163766., 1041986082., 1799196192. },
            { 1022129134., 3760163766., 1332558840. },
            { 276873446., 1022129134., 3979423632. }
        },
        {
            { 1021313167., 1312544548., 1716381787. },
            { 3037868518., 1021313167., 199085085. },
            { 2582787611., 3037868518., 3539882179. }
        },
        {
            { 2569413030., 1631336015., 2594942403. },
            { 1030618503., 2569413030., 3467650326. },
            { 1998739584., 1030618503., 3174552073. }
        },
        {
            { 2334639309., 3114094203., 601680947. },
            { 2110199318., 2334639309., 678342865. },
            { 1649523168., 2110199318., 2154948056. }
        },
        {
            { 563657176., 191330473., 1641595774. },
            { 780563537., 563657176., 3029522338. },
            { 2037330914., 780563537., 2084602709. }
        },
        {
            { 3414769923., 1968799026., 2238126504. },
            { 832866376., 3414769923., 3754780168. },
            { 2165145850., 832866376., 1594768331. }
        },
        {
            { 1646861218., 2317984620., 2301581548. },
            { 2672536210., 1646861218., 359763062. },
            { 2391283983., 2672536210., 1885870777. }
        },
        {
            { 841254072., 3765813448., 1635365181. },
            { 2013240130., 841254072., 605925849. },
            { 3743932305., 2013240130., 400681955. }
        },
        {
            { 1930213004., 2072952279., 3077694794. },
            { 3579956569., 1930213004., 2478539210. },
            { 1960229502., 3579956569., 1455652656. }
        },
        {
            { 1097613522., 1784540933., 1194440107. },
            { 321747515., 1097613522., 1225209584. },
            { 74521379., 321747515., 4288531000. }
        },
        {
            { 143812745., 3254530816., 3514348856. },
            { 769295000., 143812745., 2468210728. },
            { 1927161272., 769295000., 522705580. }
        },
        {
            { 2692035063., 2596905012., 1643240704. },
            { 1103432342., 2692035063., 1446182108. },
            { 4161111774., 1103432342., 3076435551. }
        },
        {
            { 2375319030., 1391532370., 3742334018. },
            { 1202100604., 2375319030., 4098434768. },
            { 2327872488., 1202100604., 1471526950. }
        },
        {
            { 4269164791., 2795313144., 2507855960. },
            { 4245372460., 4269164791., 4094914553. },
            { 3873219634., 4245372460., 1473695507. }
        },
        {
            { 513890845., 1208902926., 2870530442. },
            { 1984873167., 513890845., 1257532340. },
            { 1212627640., 1984873167., 2354363842. }
        },
        {
            { 1848364568., 1552116673., 3496528455. },
            { 4160778291., 1848364568., 141769900. },
            { 3611019106., 4160778291., 596424080. }
        },
        {
            { 364070020., 3520039729., 837362349. },
            { 2544671570., 364070020., 2188646679. },
            { 163978331., 2544671570., 672947816. }
        },
        {
            { 1192700714., 3968150021., 298357363. },
            { 635565666., 1192700714., 2589432341. },
            { 2548654227., 635565666., 3531570992. }
        },
        {
            { 2709640529., 676525399., 875361870. },
            { 1315499519., 2709640529., 3842690720. },
            { 3300994644., 1315499519., 2446760804. }
        },
        {
            { 2742149264., 1410604392., 3032350755. },
            { 3774935330., 2742149264., 597633965. },
            { 4085935803., 3774935330., 3952463556. }
        },
        {
            { 3878579563., 845297523., 1721916511. },
            { 2077922420., 3878579563., 3651360351. },
            { 2177255734., 2077922420., 3791239282. }
        },
        {
            { 1570315355., 4252790045., 3522351060. },
            { 2324624266., 1570315355., 3594939336. },
            { 1725087354., 2324624266., 1338343327. }
        },
        {
            { 2305761589., 381933244., 3663579047. },
            { 1355307047., 2305761589., 313617972. },
            { 992174375., 1355307047., 3881593435. }
        },
        {
            { 1667857811., 1564715297., 2263851601. },
            { 3791771273., 1667857811., 4196134923. },
            { 3347975047., 3791771273., 615040705. }
        },
        {
            { 4093947334., 3454015638., 2815567716. },
            { 4261953004., 4093947334., 3973733876. },
            { 2979573134., 4261953004., 3757047667. }
        },
        {
            { 250120061., 570149551., 1513430926. },
            { 3178644752., 250120061., 1701869032. },
            { 4172515680., 3178644752., 4213855850. }
        },
        {
            { 4158106802., 3062358456., 1815738463. },
            { 1379176112., 4158106802., 3926509890. },
            { 2842564878., 1379176112., 2852219546. }
        },
        {
            { 931848746., 256263523., 2633569246. },
            { 3284646837., 931848746., 2567084715. },
            { 415258465., 3284646837., 2017565947. }
        },
        {
            { 1648005210., 1032291296., 3987397422. },
            { 1831496020., 1648005210., 2829448427. },
            { 1821082272., 1831496020., 2917140265. }
        },
        {
            { 4161327077., 489964129., 3870847744. },
            { 1669447863., 4161327077., 4292947198. },
            { 1522417114., 1669447863., 2652286672. }
        },
        {
            { 1270934555., 3136631324., 505612043. },
            { 2981474723., 1270934555., 2528619024. },
            { 625182639., 2981474723., 1008985039. }
        },
        {
            { 280996820., 143706137., 3013099060. },
            { 1797675893., 280996820., 3743985508. },
            { 1123794455., 1797675893., 2460119169. }
        },
        {
            { 919218027., 4154920441., 1125672685. },
            { 3933041881., 919218027., 474242849. },
            { 564891116., 3933041881., 2263904321. }
        },
        {
            { 2920112852., 1965329198., 1177141043. },
            { 2135250851., 2920112852., 969184056. },
            { 296035385., 2135250851., 4267827987. }
        },
        {
            { 1481142942., 4120754772., 1088557292. },
            { 265491023., 1481142942., 2860005744. },
            { 301796252., 265491023., 1935975979. }
        },
        {
            { 2111859033., 2813610100., 1001476468. },
            { 73849832., 2111859033., 3980799998. },
            { 3330206241., 73849832., 1933943506. }
        },
        {
            { 1781286360., 3661231931., 3509383709. },
            { 2753158871., 1781286360., 3119883109. },
            { 3576525143., 2753158871., 551079002. }
        },
        {
            { 1185024844., 587779104., 1004942725. },
            { 3763632860., 1185024844., 947424568. },
            { 3811666068., 3763632860., 2352253462. }
        },
        {
            { 1310227170., 218138208., 3172947233. },
            { 766129426., 1310227170., 1808643264. },
            { 2226659371., 766129426., 3853798112. }
        },
        {
            { 2230902378., 4243560874., 2491962392. },
            { 3836629116., 2230902378., 3637515403. },
            { 2846140932., 3836629116., 3083355464. }
        },
        {
            { 999448569., 1464488480., 3344426626. },
            { 946166795., 999448569., 340856814. },
            { 3686999436., 946166795., 3231079441. }
        },
        {
            { 1226155368., 3477563770., 550006884. },
            { 2378667355., 1226155368., 1493409040. },
            { 260364836., 2378667355., 4133888397. }
        },
        {
            { 1277901832., 310796286., 2818511068. },
            { 3088910653., 1277901832., 3303406025. },
            { 2507911914., 3088910653., 3712928074. }
        },
        {
            { 481918378., 339570348., 1728801469. },
            { 1623163429., 481918378., 2209094694. },
            { 3146982514., 1623163429., 508445538. }
        },
        {
            { 3138921230., 2381863183., 1992357430. },
            { 1024510915., 3138921230., 2122851650. },
            { 1453455184., 1024510915., 941946604. }
        },
        {
            { 2465372719., 1391015357., 3328905025. },
            { 1821933605., 2465372719., 1343489680. },
            { 3648970313., 1821933605., 1816599716. }
        },
        {
            { 118634664., 3358712512., 2492792220. },
            { 348833376., 118634664., 2495544591. },
            { 3235582254., 348833376., 4043157504. }
        },
        {
            { 2303067090., 3371139074., 1967771133. },
            { 598630070., 2303067090., 1819012637. },
            { 2049250561., 598630070., 4093044926. }
        },
        {
            { 3035321857., 3971176093., 226779704. },
            { 3361614254., 3035321857., 2807125404. },
            { 326640887., 3361614254., 3147308542. }
        },
        {
            { 1774298149., 4179629947., 3145006948. },
            { 1688753503., 1774298149., 94869516. },
            { 2327946901., 1688753503., 2786835219. }
        }
    };



static __attribute__((device)) double mrg32k3aM1SubSeq[56][3][3] = {
        {
            { 82758667., 1871391091., 4127413238. },
            { 3672831523., 69195019., 1871391091. },
            { 3672091415., 3528743235., 69195019. }
        },
        {
            { 3361372532., 2329303404., 99651939. },
            { 2008671965., 2931758910., 2329303404. },
            { 1113529483., 2374097189., 2931758910. }
        },
        {
            { 1831590873., 1588259595., 1314332382. },
            { 2385989343., 2508077280., 1588259595. },
            { 1787615788., 661437137., 2508077280. }
        },
        {
            { 2326052247., 4183591379., 4049009082. },
            { 2604529491., 1453913233., 4183591379. },
            { 2311925423., 1805360390., 1453913233. }
        },
        {
            { 3956367490., 604461629., 1257432102. },
            { 794711716., 1155867175., 604461629. },
            { 1777070788., 429445904., 1155867175. }
        },
        {
            { 1686241617., 1257046062., 1427609439. },
            { 490376081., 387798431., 1257046062. },
            { 235551485., 1312672615., 387798431. }
        },
        {
            { 2362447880., 3445363024., 3160262066. },
            { 2426867845., 4194339866., 3445363024. },
            { 1046144413., 4177893681., 4194339866. }
        },
        {
            { 4251175413., 3559576374., 3107663662. },
            { 697539134., 1909472435., 3559576374. },
            { 280754246., 375835695., 1909472435. }
        },
        {
            { 1099512970., 712404985., 1571467521. },
            { 546519870., 1135109300., 712404985. },
            { 3325312332., 2352874613., 1135109300. }
        },
        {
            { 1945425936., 1653045514., 381988982. },
            { 3733376326., 414410025., 1653045514. },
            { 1181583679., 1185848176., 414410025. }
        },
        {
            { 2526336124., 3019211015., 4215964965. },
            { 2683163472., 4188191530., 3019211015. },
            { 2964651598., 293801056., 4188191530. }
        },
        {
            { 1444052678., 2253324417., 39719589. },
            { 1880267534., 2391992038., 2253324417. },
            { 987740265., 3691889508., 2391992038. }
        },
        {
            { 166599066., 2335494420., 1232261118. },
            { 2227597731., 2570600780., 2335494420. },
            { 2700034538., 3460843234., 2570600780. }
        },
        {
            { 2511338360., 1188954576., 1251401239. },
            { 2511664974., 292276982., 1188954576. },
            { 697844082., 3093661552., 292276982. }
        },
        {
            { 3624650744., 51993077., 3540268009. },
            { 3252828938., 3710319575., 51993077. },
            { 2858628849., 3910069381., 3710319575. }
        },
        {
            { 655966702., 754002362., 1646581402. },
            { 1958331075., 475572423., 754002362. },
            { 3248619000., 3228514800., 475572423. }
        },
        {
            { 2760311307., 4166372813., 741596417. },
            { 2282679206., 3090782630., 4166372813. },
            { 3242468721., 1628442374., 3090782630. }
        },
        {
            { 4265279407., 3532111852., 1754687396. },
            { 500404765., 2603727025., 3532111852. },
            { 1428367254., 3149485478., 2603727025. }
        },
        {
            { 2873769531., 2081104178., 596284397. },
            { 4153800443., 1261269623., 2081104178. },
            { 3967600061., 1830023157., 1261269623. }
        },
        {
            { 278611533., 2229285304., 3443204327. },
            { 3110641420., 77498444., 2229285304. },
            { 3904070810., 1070507239., 77498444. }
        },
        {
            { 544639534., 568528663., 2177189807. },
            { 2475829068., 121482268., 568528663. },
            { 876978915., 3116647617., 121482268. }
        },
        {
            { 1547862823., 2404658587., 4191448009. },
            { 2158188804., 2976916793., 2404658587. },
            { 168571747., 1691884706., 2976916793. }
        },
        {
            { 3208213311., 4212638780., 3235157352. },
            { 671148556., 2951207765., 4212638780. },
            { 2075145516., 2395485231., 2951207765. }
        },
        {
            { 4080517315., 2133433101., 4043998180. },
            { 2044221845., 867670560., 2133433101. },
            { 834432416., 3613001199., 867670560. }
        },
        {
            { 4102885735., 1319434267., 2678775073. },
            { 740092580., 607380970., 1319434267. },
            { 2198271844., 2610193258., 607380970. }
        },
        {
            { 1165218048., 1317690360., 1189150958. },
            { 399240205., 2507168618., 1317690360. },
            { 2988334517., 2687593413., 2507168618. }
        },
        {
            { 1028861702., 4082006648., 338232527. },
            { 1888486946., 1842080991., 4082006648. },
            { 3903826366., 3109935091., 1842080991. }
        },
        {
            { 614134826., 2261996505., 2888080641. },
            { 710199359., 2773979788., 2261996505. },
            { 1144301620., 2554371815., 2773979788. }
        },
        {
            { 4056173823., 1285620078., 357420018. },
            { 2423072612., 2309408315., 1285620078. },
            { 1533175115., 2760088020., 2309408315. }
        },
        {
            { 4264130267., 815015434., 3142242173. },
            { 180649975., 2500813569., 815015434. },
            { 3378723563., 829683767., 2500813569. }
        },
        {
            { 4174387531., 1030729435., 2812778314. },
            { 1752988797., 4044178729., 1030729435. },
            { 467969301., 554748104., 4044178729. }
        },
        {
            { 1348429235., 2928743274., 3776082629. },
            { 3607529209., 3069812185., 2928743274. },
            { 2542432347., 3208181168., 3069812185. }
        },
        {
            { 4064845753., 668285756., 3816217625. },
            { 3713143233., 1380634204., 668285756. },
            { 3533700508., 1192551435., 1380634204. }
        },
        {
            { 1515684518., 1706771705., 728123349. },
            { 3174850469., 2057456462., 1706771705. },
            { 3410402985., 2897339640., 2057456462. }
        },
        {
            { 3082272717., 531091457., 1390161328. },
            { 3895139973., 2171402857., 531091457. },
            { 4030688141., 3049703400., 2171402857. }
        },
        {
            { 1241147206., 3193892819., 1244284192. },
            { 65180262., 4065669017., 3193892819. },
            { 1484817937., 3661081858., 4065669017. }
        },
        {
            { 1438760812., 3491341751., 3414470157. },
            { 2805337292., 272266053., 3491341751. },
            { 824109230., 3202556526., 272266053. }
        },
        {
            { 135412706., 3627115412., 2345042216. },
            { 1565169824., 2166856449., 3627115412. },
            { 1026946745., 3467845248., 2166856449. }
        },
        {
            { 1889419951., 3256876154., 1240505488. },
            { 1254783743., 989966800., 3256876154. },
            { 1995297400., 3692472918., 989966800. }
        },
        {
            { 3206226875., 285700890., 496017472. },
            { 2515316194., 2129675196., 285700890. },
            { 1863853990., 2673457552., 2129675196. }
        },
        {
            { 4163770641., 255160418., 772100749. },
            { 1987092456., 3237660221., 255160418. },
            { 1394381051., 4216039401., 3237660221. }
        },
        {
            { 2133915627., 2713747584., 627765421. },
            { 2300605925., 35690583., 2713747584. },
            { 2918902946., 2638220304., 35690583. }
        },
        {
            { 2587549655., 998684270., 4292130625. },
            { 1791772791., 2820705344., 998684270. },
            { 124590158., 3831143549., 2820705344. }
        },
        {
            { 978482299., 3200877282., 497605289. },
            { 3717741518., 3737164414., 3200877282. },
            { 4046686626., 861393946., 3737164414. }
        },
        {
            { 2665561897., 300934584., 3179822945. },
            { 893043137., 2031413512., 300934584. },
            { 3806926970., 2413249929., 2031413512. }
        },
        {
            { 1417581911., 3071835354., 2575196237. },
            { 4101127251., 1375339216., 3071835354. },
            { 847617977., 3632503316., 1375339216. }
        },
        {
            { 2747488994., 3296604805., 898095468. },
            { 1742777145., 219265369., 3296604805. },
            { 823714885., 667779292., 219265369. }
        },
        {
            { 2640209692., 3040506537., 3626115220. },
            { 161827078., 852668118., 3040506537. },
            { 3856381322., 3360242076., 852668118. }
        },
        {
            { 3734246393., 4151553160., 4177051283. },
            { 266522866., 1731798531., 4151553160. },
            { 632196679., 3864297722., 1731798531. }
        },
        {
            { 1694175127., 1087914338., 2384195794. },
            { 2764925057., 505782858., 1087914338. },
            { 3235634082., 807915248., 505782858. }
        },
        {
            { 2402749950., 2353776151., 75909174. },
            { 890570951., 1752665661., 2353776151. },
            { 3120241607., 3862435696., 1752665661. }
        }
    };

static double mrg32k3aM1SubSeqHost[56][3][3] = {
        {
            { 82758667., 1871391091., 4127413238. },
            { 3672831523., 69195019., 1871391091. },
            { 3672091415., 3528743235., 69195019. }
        },
        {
            { 3361372532., 2329303404., 99651939. },
            { 2008671965., 2931758910., 2329303404. },
            { 1113529483., 2374097189., 2931758910. }
        },
        {
            { 1831590873., 1588259595., 1314332382. },
            { 2385989343., 2508077280., 1588259595. },
            { 1787615788., 661437137., 2508077280. }
        },
        {
            { 2326052247., 4183591379., 4049009082. },
            { 2604529491., 1453913233., 4183591379. },
            { 2311925423., 1805360390., 1453913233. }
        },
        {
            { 3956367490., 604461629., 1257432102. },
            { 794711716., 1155867175., 604461629. },
            { 1777070788., 429445904., 1155867175. }
        },
        {
            { 1686241617., 1257046062., 1427609439. },
            { 490376081., 387798431., 1257046062. },
            { 235551485., 1312672615., 387798431. }
        },
        {
            { 2362447880., 3445363024., 3160262066. },
            { 2426867845., 4194339866., 3445363024. },
            { 1046144413., 4177893681., 4194339866. }
        },
        {
            { 4251175413., 3559576374., 3107663662. },
            { 697539134., 1909472435., 3559576374. },
            { 280754246., 375835695., 1909472435. }
        },
        {
            { 1099512970., 712404985., 1571467521. },
            { 546519870., 1135109300., 712404985. },
            { 3325312332., 2352874613., 1135109300. }
        },
        {
            { 1945425936., 1653045514., 381988982. },
            { 3733376326., 414410025., 1653045514. },
            { 1181583679., 1185848176., 414410025. }
        },
        {
            { 2526336124., 3019211015., 4215964965. },
            { 2683163472., 4188191530., 3019211015. },
            { 2964651598., 293801056., 4188191530. }
        },
        {
            { 1444052678., 2253324417., 39719589. },
            { 1880267534., 2391992038., 2253324417. },
            { 987740265., 3691889508., 2391992038. }
        },
        {
            { 166599066., 2335494420., 1232261118. },
            { 2227597731., 2570600780., 2335494420. },
            { 2700034538., 3460843234., 2570600780. }
        },
        {
            { 2511338360., 1188954576., 1251401239. },
            { 2511664974., 292276982., 1188954576. },
            { 697844082., 3093661552., 292276982. }
        },
        {
            { 3624650744., 51993077., 3540268009. },
            { 3252828938., 3710319575., 51993077. },
            { 2858628849., 3910069381., 3710319575. }
        },
        {
            { 655966702., 754002362., 1646581402. },
            { 1958331075., 475572423., 754002362. },
            { 3248619000., 3228514800., 475572423. }
        },
        {
            { 2760311307., 4166372813., 741596417. },
            { 2282679206., 3090782630., 4166372813. },
            { 3242468721., 1628442374., 3090782630. }
        },
        {
            { 4265279407., 3532111852., 1754687396. },
            { 500404765., 2603727025., 3532111852. },
            { 1428367254., 3149485478., 2603727025. }
        },
        {
            { 2873769531., 2081104178., 596284397. },
            { 4153800443., 1261269623., 2081104178. },
            { 3967600061., 1830023157., 1261269623. }
        },
        {
            { 278611533., 2229285304., 3443204327. },
            { 3110641420., 77498444., 2229285304. },
            { 3904070810., 1070507239., 77498444. }
        },
        {
            { 544639534., 568528663., 2177189807. },
            { 2475829068., 121482268., 568528663. },
            { 876978915., 3116647617., 121482268. }
        },
        {
            { 1547862823., 2404658587., 4191448009. },
            { 2158188804., 2976916793., 2404658587. },
            { 168571747., 1691884706., 2976916793. }
        },
        {
            { 3208213311., 4212638780., 3235157352. },
            { 671148556., 2951207765., 4212638780. },
            { 2075145516., 2395485231., 2951207765. }
        },
        {
            { 4080517315., 2133433101., 4043998180. },
            { 2044221845., 867670560., 2133433101. },
            { 834432416., 3613001199., 867670560. }
        },
        {
            { 4102885735., 1319434267., 2678775073. },
            { 740092580., 607380970., 1319434267. },
            { 2198271844., 2610193258., 607380970. }
        },
        {
            { 1165218048., 1317690360., 1189150958. },
            { 399240205., 2507168618., 1317690360. },
            { 2988334517., 2687593413., 2507168618. }
        },
        {
            { 1028861702., 4082006648., 338232527. },
            { 1888486946., 1842080991., 4082006648. },
            { 3903826366., 3109935091., 1842080991. }
        },
        {
            { 614134826., 2261996505., 2888080641. },
            { 710199359., 2773979788., 2261996505. },
            { 1144301620., 2554371815., 2773979788. }
        },
        {
            { 4056173823., 1285620078., 357420018. },
            { 2423072612., 2309408315., 1285620078. },
            { 1533175115., 2760088020., 2309408315. }
        },
        {
            { 4264130267., 815015434., 3142242173. },
            { 180649975., 2500813569., 815015434. },
            { 3378723563., 829683767., 2500813569. }
        },
        {
            { 4174387531., 1030729435., 2812778314. },
            { 1752988797., 4044178729., 1030729435. },
            { 467969301., 554748104., 4044178729. }
        },
        {
            { 1348429235., 2928743274., 3776082629. },
            { 3607529209., 3069812185., 2928743274. },
            { 2542432347., 3208181168., 3069812185. }
        },
        {
            { 4064845753., 668285756., 3816217625. },
            { 3713143233., 1380634204., 668285756. },
            { 3533700508., 1192551435., 1380634204. }
        },
        {
            { 1515684518., 1706771705., 728123349. },
            { 3174850469., 2057456462., 1706771705. },
            { 3410402985., 2897339640., 2057456462. }
        },
        {
            { 3082272717., 531091457., 1390161328. },
            { 3895139973., 2171402857., 531091457. },
            { 4030688141., 3049703400., 2171402857. }
        },
        {
            { 1241147206., 3193892819., 1244284192. },
            { 65180262., 4065669017., 3193892819. },
            { 1484817937., 3661081858., 4065669017. }
        },
        {
            { 1438760812., 3491341751., 3414470157. },
            { 2805337292., 272266053., 3491341751. },
            { 824109230., 3202556526., 272266053. }
        },
        {
            { 135412706., 3627115412., 2345042216. },
            { 1565169824., 2166856449., 3627115412. },
            { 1026946745., 3467845248., 2166856449. }
        },
        {
            { 1889419951., 3256876154., 1240505488. },
            { 1254783743., 989966800., 3256876154. },
            { 1995297400., 3692472918., 989966800. }
        },
        {
            { 3206226875., 285700890., 496017472. },
            { 2515316194., 2129675196., 285700890. },
            { 1863853990., 2673457552., 2129675196. }
        },
        {
            { 4163770641., 255160418., 772100749. },
            { 1987092456., 3237660221., 255160418. },
            { 1394381051., 4216039401., 3237660221. }
        },
        {
            { 2133915627., 2713747584., 627765421. },
            { 2300605925., 35690583., 2713747584. },
            { 2918902946., 2638220304., 35690583. }
        },
        {
            { 2587549655., 998684270., 4292130625. },
            { 1791772791., 2820705344., 998684270. },
            { 124590158., 3831143549., 2820705344. }
        },
        {
            { 978482299., 3200877282., 497605289. },
            { 3717741518., 3737164414., 3200877282. },
            { 4046686626., 861393946., 3737164414. }
        },
        {
            { 2665561897., 300934584., 3179822945. },
            { 893043137., 2031413512., 300934584. },
            { 3806926970., 2413249929., 2031413512. }
        },
        {
            { 1417581911., 3071835354., 2575196237. },
            { 4101127251., 1375339216., 3071835354. },
            { 847617977., 3632503316., 1375339216. }
        },
        {
            { 2747488994., 3296604805., 898095468. },
            { 1742777145., 219265369., 3296604805. },
            { 823714885., 667779292., 219265369. }
        },
        {
            { 2640209692., 3040506537., 3626115220. },
            { 161827078., 852668118., 3040506537. },
            { 3856381322., 3360242076., 852668118. }
        },
        {
            { 3734246393., 4151553160., 4177051283. },
            { 266522866., 1731798531., 4151553160. },
            { 632196679., 3864297722., 1731798531. }
        },
        {
            { 1694175127., 1087914338., 2384195794. },
            { 2764925057., 505782858., 1087914338. },
            { 3235634082., 807915248., 505782858. }
        },
        {
            { 2402749950., 2353776151., 75909174. },
            { 890570951., 1752665661., 2353776151. },
            { 3120241607., 3862435696., 1752665661. }
        }
    };

static __attribute__((device)) double mrg32k3aM2SubSeq[56][3][3] = {
        {
            { 1511326704., 3759209742., 1610795712. },
            { 4292754251., 1511326704., 3889917532. },
            { 3859662829., 4292754251., 3708466080. }
        },
        {
            { 972103006., 964807713., 878035866. },
            { 4248550197., 972103006., 1926628839. },
            { 1448629089., 4248550197., 3196114006. }
        },
        {
            { 3497384788., 3174249442., 3182508868. },
            { 3864816447., 3497384788., 3038399593. },
            { 2546884738., 3864816447., 2980208068. }
        },
        {
            { 1776335558., 1189944887., 4095757548. },
            { 3813600746., 1776335558., 789475914. },
            { 4119698302., 3813600746., 2145357457. }
        },
        {
            { 4022832294., 4130146837., 1942923647. },
            { 1675130777., 4022832294., 916677004. },
            { 4089786548., 1675130777., 116540512. }
        },
        {
            { 165639584., 1205513289., 2037453462. },
            { 1444587280., 165639584., 161923120. },
            { 2617085459., 1444587280., 2006913311. }
        },
        {
            { 3458099202., 3062421748., 4052486999. },
            { 1064270720., 3458099202., 230768332. },
            { 4056228301., 1064270720., 2219267779. }
        },
        {
            { 296275263., 3452455838., 2081462173. },
            { 1789143993., 296275263., 3463234943. },
            { 2097389984., 1789143993., 3447191459. }
        },
        {
            { 2828288883., 3866690251., 410553827. },
            { 1587005542., 2828288883., 1469478670. },
            { 2766486018., 1587005542., 2627363449. }
        },
        {
            { 3288027530., 412403981., 2458742268. },
            { 4267121909., 3288027530., 138566505. },
            { 420803572., 4267121909., 4094554844. }
        },
        {
            { 3844599430., 2430152838., 3283485436. },
            { 2486244684., 3844599430., 4252427633. },
            { 3560842909., 2486244684., 3960267499. }
        },
        {
            { 67933059., 1294996291., 2657888382. },
            { 513233413., 67933059., 1379805031. },
            { 44564058., 513233413., 86971645. }
        },
        {
            { 2732588524., 1866530072., 818237694. },
            { 2540507736., 2732588524., 3257104212. },
            { 1164400003., 2540507736., 1124501551. }
        },
        {
            { 4199239222., 3155848463., 2121388468. },
            { 1135554501., 4199239222., 2056492193. },
            { 3251740389., 1135554501., 2343537248. }
        },
        {
            { 550710036., 500329021., 1075236085. },
            { 356444753., 550710036., 1634965500. },
            { 58733535., 356444753., 1261552815. }
        },
        {
            { 708689546., 419139045., 2012018174. },
            { 706488081., 708689546., 1113760995. },
            { 585555005., 706488081., 76092226. }
        },
        {
            { 1293182265., 3168473803., 366230236. },
            { 3319068849., 1293182265., 1085259665. },
            { 1675229290., 3319068849., 3912300371. }
        },
        {
            { 3186089068., 4188864734., 1211781402. },
            { 756122322., 3186089068., 578262892. },
            { 2518961174., 756122322., 1658665581. }
        },
        {
            { 1347291439., 2050427676., 736113023. },
            { 4102191254., 1347291439., 878627148. },
            { 1293500383., 4102191254., 745646810. }
        },
        {
            { 4196897331., 3436564969., 1900167098. },
            { 3108887846., 4196897331., 2697923227. },
            { 1405263476., 3108887846., 314631094. }
        },
        {
            { 958383622., 3694638688., 1150087061. },
            { 3770009830., 958383622., 793326651. },
            { 533700213., 3770009830., 1513734026. }
        },
        {
            { 4119603367., 3479396923., 3534176399. },
            { 3765397477., 4119603367., 1458031003. },
            { 3380901602., 3765397477., 2684083587. }
        },
        {
            { 980937351., 2094378936., 448446028. },
            { 1421333909., 980937351., 3405683645. },
            { 323724368., 1421333909., 338680738. }
        },
        {
            { 2942968846., 4293637338., 3549906544. },
            { 527851489., 2942968846., 3852871282. },
            { 4209198933., 527851489., 1091268872. }
        },
        {
            { 1975983015., 2092556693., 611187071. },
            { 3982652344., 1975983015., 3001736262. },
            { 2055073597., 3982652344., 1875181995. }
        },
        {
            { 2970221269., 880904779., 2447465272. },
            { 2888742196., 2970221269., 3521651749. },
            { 3019977656., 2888742196., 2712717326. }
        },
        {
            { 419134859., 2976059897., 747864206. },
            { 4101695717., 419134859., 4264593116. },
            { 2657991148., 4101695717., 2542621682. }
        },
        {
            { 4043135299., 1612983166., 1149778656. },
            { 1267010518., 4043135299., 3496325546. },
            { 3094232897., 1267010518., 2949176293. }
        },
        {
            { 3949395794., 1774568686., 2123036003. },
            { 2182983404., 3949395794., 2355671350. },
            { 2820933455., 2182983404., 513963325. }
        },
        {
            { 3046911698., 2576744453., 2492729814. },
            { 4277866093., 3046911698., 3146977604. },
            { 2249371766., 4277866093., 3622293976. }
        },
        {
            { 1391529818., 423458502., 2587125255. },
            { 3536237833., 1391529818., 985347517. },
            { 157623850., 3536237833., 1015566287. }
        },
        {
            { 48329260., 2599277669., 821961664. },
            { 902187690., 48329260., 1716556555. },
            { 4019658974., 902187690., 950730510. }
        },
        {
            { 1318489562., 1530977112., 3713577419. },
            { 4270158447., 1318489562., 1654940598. },
            { 2679964938., 4270158447., 1337075195. }
        },
        {
            { 770600793., 3249576224., 3578552768. },
            { 2710443459., 770600793., 2990852339. },
            { 3098163705., 2710443459., 522138188. }
        },
        {
            { 2803285489., 1922250286., 3164022812. },
            { 477609731., 2803285489., 2140252218. },
            { 2252852611., 477609731., 3058519788. }
        },
        {
            { 208329741., 3633562083., 3548346666. },
            { 3892091460., 208329741., 516833304. },
            { 3440632377., 3892091460., 1638833719. }
        },
        {
            { 1816075033., 3570111203., 959489356. },
            { 3482051486., 1816075033., 861657108. },
            { 3119495098., 3482051486., 2576849579. }
        },
        {
            { 4240216888., 2891584407., 2102314945. },
            { 4064489450., 4240216888., 1427441010. },
            { 2441164913., 4064489450., 3558527186. }
        },
        {
            { 2918371295., 65155283., 3469357011. },
            { 3579773554., 2918371295., 3494391959. },
            { 3266584309., 3579773554., 3837485479. }
        },
        {
            { 2959420453., 1365016881., 4082486022. },
            { 236489012., 2959420453., 3802558529. },
            { 2687043642., 236489012., 2547086826. }
        },
        {
            { 4185325422., 2762854843., 3200044912. },
            { 3664909559., 4185325422., 3543921700. },
            { 4240262918., 3664909559., 2853212443. }
        },
        {
            { 2618500928., 4237264351., 1470046497. },
            { 1893990098., 2618500928., 2982567031. },
            { 3017062825., 1893990098., 3195556801. }
        },
        {
            { 1868464655., 3407681142., 1652841784. },
            { 1678569574., 1868464655., 4162480901. },
            { 1477016185., 1678569574., 4145063890. }
        },
        {
            { 792188465., 4251338402., 2219407026. },
            { 3840340879., 792188465., 3493367465. },
            { 2979958414., 3840340879., 2338974139. }
        },
        {
            { 478845700., 2378167062., 882114621. },
            { 1674533845., 478845700., 3572905305. },
            { 3571222880., 1674533845., 1242316901. }
        },
        {
            { 2636090868., 1972761498., 71690719. },
            { 1228103463., 2636090868., 1280685025. },
            { 3741735502., 1228103463., 994061750. }
        },
        {
            { 1156725261., 1100755307., 221922891. },
            { 2892200461., 1156725261., 1505716533. },
            { 2287613563., 2892200461., 3689457190. }
        },
        {
            { 1387244644., 3135090808., 1243609165. },
            { 1724967466., 1387244644., 3296353235. },
            { 1064364031., 1724967466., 2107521044. }
        },
        {
            { 2822471992., 2034317853., 2071407475. },
            { 170903528., 2822471992., 1322162887. },
            { 2524982332., 170903528., 2656231333. }
        },
        {
            { 3653936868., 3893194049., 2484299328. },
            { 1313746234., 3653936868., 1705346273. },
            { 1397638018., 1313746234., 4015529545. }
        },
        {
            { 4129760842., 1671665759., 1677834656. },
            { 3200005334., 4129760842., 3486207172. },
            { 2850728736., 3200005334., 3076201597. }
        }
    };

static double mrg32k3aM2SubSeqHost[56][3][3] = {
        {
            { 1511326704., 3759209742., 1610795712. },
            { 4292754251., 1511326704., 3889917532. },
            { 3859662829., 4292754251., 3708466080. }
        },
        {
            { 972103006., 964807713., 878035866. },
            { 4248550197., 972103006., 1926628839. },
            { 1448629089., 4248550197., 3196114006. }
        },
        {
            { 3497384788., 3174249442., 3182508868. },
            { 3864816447., 3497384788., 3038399593. },
            { 2546884738., 3864816447., 2980208068. }
        },
        {
            { 1776335558., 1189944887., 4095757548. },
            { 3813600746., 1776335558., 789475914. },
            { 4119698302., 3813600746., 2145357457. }
        },
        {
            { 4022832294., 4130146837., 1942923647. },
            { 1675130777., 4022832294., 916677004. },
            { 4089786548., 1675130777., 116540512. }
        },
        {
            { 165639584., 1205513289., 2037453462. },
            { 1444587280., 165639584., 161923120. },
            { 2617085459., 1444587280., 2006913311. }
        },
        {
            { 3458099202., 3062421748., 4052486999. },
            { 1064270720., 3458099202., 230768332. },
            { 4056228301., 1064270720., 2219267779. }
        },
        {
            { 296275263., 3452455838., 2081462173. },
            { 1789143993., 296275263., 3463234943. },
            { 2097389984., 1789143993., 3447191459. }
        },
        {
            { 2828288883., 3866690251., 410553827. },
            { 1587005542., 2828288883., 1469478670. },
            { 2766486018., 1587005542., 2627363449. }
        },
        {
            { 3288027530., 412403981., 2458742268. },
            { 4267121909., 3288027530., 138566505. },
            { 420803572., 4267121909., 4094554844. }
        },
        {
            { 3844599430., 2430152838., 3283485436. },
            { 2486244684., 3844599430., 4252427633. },
            { 3560842909., 2486244684., 3960267499. }
        },
        {
            { 67933059., 1294996291., 2657888382. },
            { 513233413., 67933059., 1379805031. },
            { 44564058., 513233413., 86971645. }
        },
        {
            { 2732588524., 1866530072., 818237694. },
            { 2540507736., 2732588524., 3257104212. },
            { 1164400003., 2540507736., 1124501551. }
        },
        {
            { 4199239222., 3155848463., 2121388468. },
            { 1135554501., 4199239222., 2056492193. },
            { 3251740389., 1135554501., 2343537248. }
        },
        {
            { 550710036., 500329021., 1075236085. },
            { 356444753., 550710036., 1634965500. },
            { 58733535., 356444753., 1261552815. }
        },
        {
            { 708689546., 419139045., 2012018174. },
            { 706488081., 708689546., 1113760995. },
            { 585555005., 706488081., 76092226. }
        },
        {
            { 1293182265., 3168473803., 366230236. },
            { 3319068849., 1293182265., 1085259665. },
            { 1675229290., 3319068849., 3912300371. }
        },
        {
            { 3186089068., 4188864734., 1211781402. },
            { 756122322., 3186089068., 578262892. },
            { 2518961174., 756122322., 1658665581. }
        },
        {
            { 1347291439., 2050427676., 736113023. },
            { 4102191254., 1347291439., 878627148. },
            { 1293500383., 4102191254., 745646810. }
        },
        {
            { 4196897331., 3436564969., 1900167098. },
            { 3108887846., 4196897331., 2697923227. },
            { 1405263476., 3108887846., 314631094. }
        },
        {
            { 958383622., 3694638688., 1150087061. },
            { 3770009830., 958383622., 793326651. },
            { 533700213., 3770009830., 1513734026. }
        },
        {
            { 4119603367., 3479396923., 3534176399. },
            { 3765397477., 4119603367., 1458031003. },
            { 3380901602., 3765397477., 2684083587. }
        },
        {
            { 980937351., 2094378936., 448446028. },
            { 1421333909., 980937351., 3405683645. },
            { 323724368., 1421333909., 338680738. }
        },
        {
            { 2942968846., 4293637338., 3549906544. },
            { 527851489., 2942968846., 3852871282. },
            { 4209198933., 527851489., 1091268872. }
        },
        {
            { 1975983015., 2092556693., 611187071. },
            { 3982652344., 1975983015., 3001736262. },
            { 2055073597., 3982652344., 1875181995. }
        },
        {
            { 2970221269., 880904779., 2447465272. },
            { 2888742196., 2970221269., 3521651749. },
            { 3019977656., 2888742196., 2712717326. }
        },
        {
            { 419134859., 2976059897., 747864206. },
            { 4101695717., 419134859., 4264593116. },
            { 2657991148., 4101695717., 2542621682. }
        },
        {
            { 4043135299., 1612983166., 1149778656. },
            { 1267010518., 4043135299., 3496325546. },
            { 3094232897., 1267010518., 2949176293. }
        },
        {
            { 3949395794., 1774568686., 2123036003. },
            { 2182983404., 3949395794., 2355671350. },
            { 2820933455., 2182983404., 513963325. }
        },
        {
            { 3046911698., 2576744453., 2492729814. },
            { 4277866093., 3046911698., 3146977604. },
            { 2249371766., 4277866093., 3622293976. }
        },
        {
            { 1391529818., 423458502., 2587125255. },
            { 3536237833., 1391529818., 985347517. },
            { 157623850., 3536237833., 1015566287. }
        },
        {
            { 48329260., 2599277669., 821961664. },
            { 902187690., 48329260., 1716556555. },
            { 4019658974., 902187690., 950730510. }
        },
        {
            { 1318489562., 1530977112., 3713577419. },
            { 4270158447., 1318489562., 1654940598. },
            { 2679964938., 4270158447., 1337075195. }
        },
        {
            { 770600793., 3249576224., 3578552768. },
            { 2710443459., 770600793., 2990852339. },
            { 3098163705., 2710443459., 522138188. }
        },
        {
            { 2803285489., 1922250286., 3164022812. },
            { 477609731., 2803285489., 2140252218. },
            { 2252852611., 477609731., 3058519788. }
        },
        {
            { 208329741., 3633562083., 3548346666. },
            { 3892091460., 208329741., 516833304. },
            { 3440632377., 3892091460., 1638833719. }
        },
        {
            { 1816075033., 3570111203., 959489356. },
            { 3482051486., 1816075033., 861657108. },
            { 3119495098., 3482051486., 2576849579. }
        },
        {
            { 4240216888., 2891584407., 2102314945. },
            { 4064489450., 4240216888., 1427441010. },
            { 2441164913., 4064489450., 3558527186. }
        },
        {
            { 2918371295., 65155283., 3469357011. },
            { 3579773554., 2918371295., 3494391959. },
            { 3266584309., 3579773554., 3837485479. }
        },
        {
            { 2959420453., 1365016881., 4082486022. },
            { 236489012., 2959420453., 3802558529. },
            { 2687043642., 236489012., 2547086826. }
        },
        {
            { 4185325422., 2762854843., 3200044912. },
            { 3664909559., 4185325422., 3543921700. },
            { 4240262918., 3664909559., 2853212443. }
        },
        {
            { 2618500928., 4237264351., 1470046497. },
            { 1893990098., 2618500928., 2982567031. },
            { 3017062825., 1893990098., 3195556801. }
        },
        {
            { 1868464655., 3407681142., 1652841784. },
            { 1678569574., 1868464655., 4162480901. },
            { 1477016185., 1678569574., 4145063890. }
        },
        {
            { 792188465., 4251338402., 2219407026. },
            { 3840340879., 792188465., 3493367465. },
            { 2979958414., 3840340879., 2338974139. }
        },
        {
            { 478845700., 2378167062., 882114621. },
            { 1674533845., 478845700., 3572905305. },
            { 3571222880., 1674533845., 1242316901. }
        },
        {
            { 2636090868., 1972761498., 71690719. },
            { 1228103463., 2636090868., 1280685025. },
            { 3741735502., 1228103463., 994061750. }
        },
        {
            { 1156725261., 1100755307., 221922891. },
            { 2892200461., 1156725261., 1505716533. },
            { 2287613563., 2892200461., 3689457190. }
        },
        {
            { 1387244644., 3135090808., 1243609165. },
            { 1724967466., 1387244644., 3296353235. },
            { 1064364031., 1724967466., 2107521044. }
        },
        {
            { 2822471992., 2034317853., 2071407475. },
            { 170903528., 2822471992., 1322162887. },
            { 2524982332., 170903528., 2656231333. }
        },
        {
            { 3653936868., 3893194049., 2484299328. },
            { 1313746234., 3653936868., 1705346273. },
            { 1397638018., 1313746234., 4015529545. }
        },
        {
            { 4129760842., 1671665759., 1677834656. },
            { 3200005334., 4129760842., 3486207172. },
            { 2850728736., 3200005334., 3076201597. }
        }
    };



static __attribute__((device)) double mrg32k3aM1Seq[64][3][3] = {
        {
            { 2427906178., 3580155704., 949770784. },
            { 226153695., 1230515664., 3580155704. },
            { 1988835001., 986791581., 1230515664. }
        },
        {
            { 1774047142., 3199155377., 3106427820. },
            { 1901920839., 4290900039., 3199155377. },
            { 4178980191., 280623348., 4290900039. }
        },
        {
            { 3567524348., 1934119675., 3188270128. },
            { 2997767678., 826363896., 1934119675. },
            { 262952343., 614326610., 826363896. }
        },
        {
            { 1625613062., 4288164505., 2481284279. },
            { 4273461426., 1177260757., 4288164505. },
            { 305959988., 4017252267., 1177260757. }
        },
        {
            { 337929267., 333342539., 418300166. },
            { 2944208672., 379097734., 333342539. },
            { 2084056909., 3625475947., 379097734. }
        },
        {
            { 1189899255., 1307754719., 1214919992. },
            { 3736721708., 3514751918., 1307754719. },
            { 732435953., 2021244538., 3514751918. }
        },
        {
            { 4089172695., 1533534334., 525643282. },
            { 1497577018., 1335684482., 1533534334. },
            { 2079007086., 3977541427., 1335684482. }
        },
        {
            { 3075256652., 2762754934., 3846844247. },
            { 3057872364., 3274545167., 2762754934. },
            { 4028573983., 938934351., 3274545167. }
        },
        {
            { 2597859300., 2880151048., 2523330453. },
            { 1121709186., 175667448., 2880151048. },
            { 4182510911., 1723133625., 175667448. }
        },
        {
            { 484148868., 1404283933., 2982534313. },
            { 3736767353., 3179865161., 1404283933. },
            { 391120388., 3758716888., 3179865161. }
        },
        {
            { 2138867468., 1128973399., 2133702321. },
            { 1613561693., 3622350766., 1128973399. },
            { 1500151924., 3759983985., 3622350766. }
        },
        {
            { 3027706760., 3786576552., 2698781808. },
            { 2810527099., 90498489., 3786576552. },
            { 4220122612., 1855245979., 90498489. }
        },
        {
            { 3739389517., 1110440720., 917457922. },
            { 2163873618., 3707591763., 1110440720. },
            { 2667061910., 2533383962., 3707591763. }
        },
        {
            { 1545226000., 1812182123., 3693349190. },
            { 3422065122., 3291428549., 1812182123. },
            { 1193168720., 2072837757., 3291428549. }
        },
        {
            { 3230096243., 2131723358., 3262178024. },
            { 2882890127., 4088518247., 2131723358. },
            { 3991553306., 1282224087., 4088518247. }
        },
        {
            { 301207261., 1722796810., 3697719854. },
            { 3350228505., 3410986694., 1722796810. },
            { 3684514720., 2846958957., 3410986694. }
        },
        {
            { 1532963114., 4236235786., 3871128158. },
            { 3540401964., 1285250577., 4236235786. },
            { 1105070646., 2764245175., 1285250577. }
        },
        {
            { 210906218., 3068599594., 3034582784. },
            { 340633153., 4004365908., 3068599594. },
            { 4238928187., 2299166464., 4004365908. }
        },
        {
            { 2274701639., 3955606166., 3081246407. },
            { 3199954992., 3948054919., 3955606166. },
            { 2399101442., 3438340286., 3948054919. }
        },
        {
            { 504137100., 1182303684., 201533985. },
            { 4188299661., 3042453580., 1182303684. },
            { 2578519273., 2674782930., 3042453580. }
        },
        {
            { 1382964588., 2578452047., 3140440866. },
            { 261861891., 1076783073., 2578452047. },
            { 1634588989., 164438428., 1076783073. }
        },
        {
            { 2529186343., 526867394., 3102803247. },
            { 2687252475., 2908898908., 526867394. },
            { 1213100579., 86050422., 2908898908. }
        },
        {
            { 2690118316., 538108523., 790337895. },
            { 4193870709., 1053552056., 538108523. },
            { 1635227281., 4002399925., 1053552056. }
        },
        {
            { 2123712957., 4205383007., 1812304090. },
            { 1095349745., 166243972., 4205383007. },
            { 428569070., 2128782357., 166243972. }
        },
        {
            { 1330151766., 3569679412., 4107175982. },
            { 3808641551., 3621125056., 3569679412. },
            { 4262164578., 1927692878., 3621125056. }
        },
        {
            { 3606295184., 2442739556., 3894922338. },
            { 1629626641., 2729678535., 2442739556. },
            { 3379124758., 4279360935., 2729678535. }
        },
        {
            { 1052092278., 4249024666., 919210106. },
            { 3253349463., 3629539480., 4249024666. },
            { 852514024., 4025926501., 3629539480. }
        },
        {
            { 12394571., 1252747620., 2133571953. },
            { 4227339509., 3197545170., 1252747620. },
            { 1884529704., 1976203831., 3197545170. }
        },
        {
            { 2986331025., 2671019282., 2847338542. },
            { 3173738401., 3542657885., 2671019282. },
            { 745203060., 1546667401., 3542657885. }
        },
        {
            { 2613012997., 2311336951., 2911336433. },
            { 1493974713., 92565032., 2311336951. },
            { 2786645250., 257065974., 92565032. }
        },
        {
            { 3424925004., 2776053372., 2204068573. },
            { 3770626858., 2509257810., 2776053372. },
            { 2979919489., 1146336783., 2509257810. }
        },
        {
            { 1474384834., 827894421., 515339473. },
            { 1373055755., 1949809417., 827894421. },
            { 3088339524., 1194193824., 1949809417. }
        },
        {
            { 1825805135., 1289872272., 3700877161. },
            { 3433422861., 4062509844., 1289872272. },
            { 3019008744., 2060641859., 4062509844. }
        },
        {
            { 3842597153., 4253338264., 3424495942. },
            { 698444416., 60268595., 4253338264. },
            { 4096010585., 47309624., 60268595. }
        },
        {
            { 2662288323., 2043518992., 1593435980. },
            { 1330201507., 3618850300., 2043518992. },
            { 2538793204., 271787962., 3618850300. }
        },
        {
            { 741020448., 997594656., 2398808739. },
            { 1160477043., 1522130854., 997594656. },
            { 3036916315., 2847712653., 1522130854. }
        },
        {
            { 2654964886., 1889728930., 53329096. },
            { 2042322941., 1621136330., 1889728930. },
            { 1553642730., 784545882., 1621136330. }
        },
        {
            { 1715219514., 2831829177., 929124824. },
            { 997274536., 404228189., 2831829177. },
            { 1386575385., 4107238699., 404228189. }
        },
        {
            { 3928131551., 2912523524., 1840499723. },
            { 4216003022., 2970489088., 2912523524. },
            { 1158689953., 1425511081., 2970489088. }
        },
        {
            { 2807004452., 2510299562., 271603006. },
            { 2505735035., 2370490899., 2510299562. },
            { 10873814., 2450376936., 2370490899. }
        },
        {
            { 2000734342., 1113679064., 2502160539. },
            { 1475266926., 2787925323., 1113679064. },
            { 1475797635., 3044470744., 2787925323. }
        },
        {
            { 1457157056., 1252556678., 3073232607. },
            { 1926798761., 3639907189., 1252556678. },
            { 2067740348., 2256217204., 3639907189. }
        },
        {
            { 3740999688., 1035400458., 3162437311. },
            { 4126312242., 686702830., 1035400458. },
            { 1699805291., 667792040., 686702830. }
        },
        {
            { 2422495016., 3203768688., 1858240466. },
            { 848719394., 4092709154., 3203768688. },
            { 659945473., 1863075174., 4092709154. }
        },
        {
            { 246817944., 871751352., 2834051003. },
            { 3976202597., 3721214025., 871751352. },
            { 783929942., 745295675., 3721214025. }
        },
        {
            { 3811740424., 3603608092., 2365398362. },
            { 3826150877., 2906557036., 3603608092. },
            { 2300510686., 966815948., 2906557036. }
        },
        {
            { 2816329160., 18201123., 3367710570. },
            { 437309679., 2220769388., 18201123. },
            { 1346863388., 705296543., 2220769388. }
        },
        {
            { 3310028953., 1662315499., 132645114. },
            { 2572908401., 3105849797., 1662315499. },
            { 1937586849., 1735620028., 3105849797. }
        },
        {
            { 461386353., 1359675853., 3599822966. },
            { 106675209., 2044154050., 1359675853. },
            { 1787730088., 1149892630., 2044154050. }
        },
        {
            { 3303902397., 345146034., 1417149696. },
            { 2231869247., 1116882637., 345146034. },
            { 1846832385., 79626976., 1116882637. }
        },
        {
            { 2765049417., 3117782790., 1805260159. },
            { 3796182890., 1101141726., 3117782790. },
            { 224270120., 1004001443., 1101141726. }
        },
        {
            { 89118668., 2494198515., 1356989069. },
            { 2490435731., 997151755., 2494198515. },
            { 1175528637., 3444341166., 997151755. }
        },
        {
            { 2340639019., 510225634., 286119182. },
            { 2045217287., 1194574818., 510225634. },
            { 2662281592., 1728500627., 1194574818. }
        },
        {
            { 210787847., 1189120688., 2848040407. },
            { 1087786165., 2343328484., 1189120688. },
            { 3465141330., 2893041005., 2343328484. }
        },
        {
            { 3438170226., 3236285682., 962036916. },
            { 2873263091., 215280489., 3236285682. },
            { 730413847., 1474823842., 215280489. }
        },
        {
            { 1566461658., 133010024., 2886695328. },
            { 2835827516., 653809404., 133010024. },
            { 3082882924., 3710942807., 653809404. }
        },
        {
            { 4201558916., 1263786956., 326001602. },
            { 762846463., 621546357., 1263786956. },
            { 2697142404., 1156650856., 621546357. }
        },
        {
            { 2655768102., 2339029465., 2430211448. },
            { 2669906627., 403962847., 2339029465. },
            { 1483118807., 639660658., 403962847. }
        },
        {
            { 3508595200., 4228486662., 754946994. },
            { 1913148390., 3500531602., 4228486662. },
            { 24637., 3773159052., 3500531602. }
        },
        {
            { 4024866227., 1143874914., 3205058469. },
            { 2970344133., 2873927273., 1143874914. },
            { 2167114735., 4095476435., 2873927273. }
        },
        {
            { 1479401095., 2958366486., 3027708794. },
            { 2704486034., 3574053987., 2958366486. },
            { 3630964515., 1276667706., 3574053987. }
        },
        {
            { 2035927380., 1363628533., 818363998. },
            { 3023327955., 3968427114., 1363628533. },
            { 1284825950., 2871663372., 3968427114. }
        },
        {
            { 3827747418., 3897287251., 4106993377. },
            { 1527779946., 3221052941., 3897287251. },
            { 4178727866., 4281160673., 3221052941. }
        },
        {
            { 1174358892., 2835476193., 959978619. },
            { 850076464., 3774782533., 2835476193. },
            { 3880910680., 3237990203., 3774782533. }
        }
    };

static double mrg32k3aM1SeqHost[64][3][3] = {
        {
            { 2427906178., 3580155704., 949770784. },
            { 226153695., 1230515664., 3580155704. },
            { 1988835001., 986791581., 1230515664. }
        },
        {
            { 1774047142., 3199155377., 3106427820. },
            { 1901920839., 4290900039., 3199155377. },
            { 4178980191., 280623348., 4290900039. }
        },
        {
            { 3567524348., 1934119675., 3188270128. },
            { 2997767678., 826363896., 1934119675. },
            { 262952343., 614326610., 826363896. }
        },
        {
            { 1625613062., 4288164505., 2481284279. },
            { 4273461426., 1177260757., 4288164505. },
            { 305959988., 4017252267., 1177260757. }
        },
        {
            { 337929267., 333342539., 418300166. },
            { 2944208672., 379097734., 333342539. },
            { 2084056909., 3625475947., 379097734. }
        },
        {
            { 1189899255., 1307754719., 1214919992. },
            { 3736721708., 3514751918., 1307754719. },
            { 732435953., 2021244538., 3514751918. }
        },
        {
            { 4089172695., 1533534334., 525643282. },
            { 1497577018., 1335684482., 1533534334. },
            { 2079007086., 3977541427., 1335684482. }
        },
        {
            { 3075256652., 2762754934., 3846844247. },
            { 3057872364., 3274545167., 2762754934. },
            { 4028573983., 938934351., 3274545167. }
        },
        {
            { 2597859300., 2880151048., 2523330453. },
            { 1121709186., 175667448., 2880151048. },
            { 4182510911., 1723133625., 175667448. }
        },
        {
            { 484148868., 1404283933., 2982534313. },
            { 3736767353., 3179865161., 1404283933. },
            { 391120388., 3758716888., 3179865161. }
        },
        {
            { 2138867468., 1128973399., 2133702321. },
            { 1613561693., 3622350766., 1128973399. },
            { 1500151924., 3759983985., 3622350766. }
        },
        {
            { 3027706760., 3786576552., 2698781808. },
            { 2810527099., 90498489., 3786576552. },
            { 4220122612., 1855245979., 90498489. }
        },
        {
            { 3739389517., 1110440720., 917457922. },
            { 2163873618., 3707591763., 1110440720. },
            { 2667061910., 2533383962., 3707591763. }
        },
        {
            { 1545226000., 1812182123., 3693349190. },
            { 3422065122., 3291428549., 1812182123. },
            { 1193168720., 2072837757., 3291428549. }
        },
        {
            { 3230096243., 2131723358., 3262178024. },
            { 2882890127., 4088518247., 2131723358. },
            { 3991553306., 1282224087., 4088518247. }
        },
        {
            { 301207261., 1722796810., 3697719854. },
            { 3350228505., 3410986694., 1722796810. },
            { 3684514720., 2846958957., 3410986694. }
        },
        {
            { 1532963114., 4236235786., 3871128158. },
            { 3540401964., 1285250577., 4236235786. },
            { 1105070646., 2764245175., 1285250577. }
        },
        {
            { 210906218., 3068599594., 3034582784. },
            { 340633153., 4004365908., 3068599594. },
            { 4238928187., 2299166464., 4004365908. }
        },
        {
            { 2274701639., 3955606166., 3081246407. },
            { 3199954992., 3948054919., 3955606166. },
            { 2399101442., 3438340286., 3948054919. }
        },
        {
            { 504137100., 1182303684., 201533985. },
            { 4188299661., 3042453580., 1182303684. },
            { 2578519273., 2674782930., 3042453580. }
        },
        {
            { 1382964588., 2578452047., 3140440866. },
            { 261861891., 1076783073., 2578452047. },
            { 1634588989., 164438428., 1076783073. }
        },
        {
            { 2529186343., 526867394., 3102803247. },
            { 2687252475., 2908898908., 526867394. },
            { 1213100579., 86050422., 2908898908. }
        },
        {
            { 2690118316., 538108523., 790337895. },
            { 4193870709., 1053552056., 538108523. },
            { 1635227281., 4002399925., 1053552056. }
        },
        {
            { 2123712957., 4205383007., 1812304090. },
            { 1095349745., 166243972., 4205383007. },
            { 428569070., 2128782357., 166243972. }
        },
        {
            { 1330151766., 3569679412., 4107175982. },
            { 3808641551., 3621125056., 3569679412. },
            { 4262164578., 1927692878., 3621125056. }
        },
        {
            { 3606295184., 2442739556., 3894922338. },
            { 1629626641., 2729678535., 2442739556. },
            { 3379124758., 4279360935., 2729678535. }
        },
        {
            { 1052092278., 4249024666., 919210106. },
            { 3253349463., 3629539480., 4249024666. },
            { 852514024., 4025926501., 3629539480. }
        },
        {
            { 12394571., 1252747620., 2133571953. },
            { 4227339509., 3197545170., 1252747620. },
            { 1884529704., 1976203831., 3197545170. }
        },
        {
            { 2986331025., 2671019282., 2847338542. },
            { 3173738401., 3542657885., 2671019282. },
            { 745203060., 1546667401., 3542657885. }
        },
        {
            { 2613012997., 2311336951., 2911336433. },
            { 1493974713., 92565032., 2311336951. },
            { 2786645250., 257065974., 92565032. }
        },
        {
            { 3424925004., 2776053372., 2204068573. },
            { 3770626858., 2509257810., 2776053372. },
            { 2979919489., 1146336783., 2509257810. }
        },
        {
            { 1474384834., 827894421., 515339473. },
            { 1373055755., 1949809417., 827894421. },
            { 3088339524., 1194193824., 1949809417. }
        },
        {
            { 1825805135., 1289872272., 3700877161. },
            { 3433422861., 4062509844., 1289872272. },
            { 3019008744., 2060641859., 4062509844. }
        },
        {
            { 3842597153., 4253338264., 3424495942. },
            { 698444416., 60268595., 4253338264. },
            { 4096010585., 47309624., 60268595. }
        },
        {
            { 2662288323., 2043518992., 1593435980. },
            { 1330201507., 3618850300., 2043518992. },
            { 2538793204., 271787962., 3618850300. }
        },
        {
            { 741020448., 997594656., 2398808739. },
            { 1160477043., 1522130854., 997594656. },
            { 3036916315., 2847712653., 1522130854. }
        },
        {
            { 2654964886., 1889728930., 53329096. },
            { 2042322941., 1621136330., 1889728930. },
            { 1553642730., 784545882., 1621136330. }
        },
        {
            { 1715219514., 2831829177., 929124824. },
            { 997274536., 404228189., 2831829177. },
            { 1386575385., 4107238699., 404228189. }
        },
        {
            { 3928131551., 2912523524., 1840499723. },
            { 4216003022., 2970489088., 2912523524. },
            { 1158689953., 1425511081., 2970489088. }
        },
        {
            { 2807004452., 2510299562., 271603006. },
            { 2505735035., 2370490899., 2510299562. },
            { 10873814., 2450376936., 2370490899. }
        },
        {
            { 2000734342., 1113679064., 2502160539. },
            { 1475266926., 2787925323., 1113679064. },
            { 1475797635., 3044470744., 2787925323. }
        },
        {
            { 1457157056., 1252556678., 3073232607. },
            { 1926798761., 3639907189., 1252556678. },
            { 2067740348., 2256217204., 3639907189. }
        },
        {
            { 3740999688., 1035400458., 3162437311. },
            { 4126312242., 686702830., 1035400458. },
            { 1699805291., 667792040., 686702830. }
        },
        {
            { 2422495016., 3203768688., 1858240466. },
            { 848719394., 4092709154., 3203768688. },
            { 659945473., 1863075174., 4092709154. }
        },
        {
            { 246817944., 871751352., 2834051003. },
            { 3976202597., 3721214025., 871751352. },
            { 783929942., 745295675., 3721214025. }
        },
        {
            { 3811740424., 3603608092., 2365398362. },
            { 3826150877., 2906557036., 3603608092. },
            { 2300510686., 966815948., 2906557036. }
        },
        {
            { 2816329160., 18201123., 3367710570. },
            { 437309679., 2220769388., 18201123. },
            { 1346863388., 705296543., 2220769388. }
        },
        {
            { 3310028953., 1662315499., 132645114. },
            { 2572908401., 3105849797., 1662315499. },
            { 1937586849., 1735620028., 3105849797. }
        },
        {
            { 461386353., 1359675853., 3599822966. },
            { 106675209., 2044154050., 1359675853. },
            { 1787730088., 1149892630., 2044154050. }
        },
        {
            { 3303902397., 345146034., 1417149696. },
            { 2231869247., 1116882637., 345146034. },
            { 1846832385., 79626976., 1116882637. }
        },
        {
            { 2765049417., 3117782790., 1805260159. },
            { 3796182890., 1101141726., 3117782790. },
            { 224270120., 1004001443., 1101141726. }
        },
        {
            { 89118668., 2494198515., 1356989069. },
            { 2490435731., 997151755., 2494198515. },
            { 1175528637., 3444341166., 997151755. }
        },
        {
            { 2340639019., 510225634., 286119182. },
            { 2045217287., 1194574818., 510225634. },
            { 2662281592., 1728500627., 1194574818. }
        },
        {
            { 210787847., 1189120688., 2848040407. },
            { 1087786165., 2343328484., 1189120688. },
            { 3465141330., 2893041005., 2343328484. }
        },
        {
            { 3438170226., 3236285682., 962036916. },
            { 2873263091., 215280489., 3236285682. },
            { 730413847., 1474823842., 215280489. }
        },
        {
            { 1566461658., 133010024., 2886695328. },
            { 2835827516., 653809404., 133010024. },
            { 3082882924., 3710942807., 653809404. }
        },
        {
            { 4201558916., 1263786956., 326001602. },
            { 762846463., 621546357., 1263786956. },
            { 2697142404., 1156650856., 621546357. }
        },
        {
            { 2655768102., 2339029465., 2430211448. },
            { 2669906627., 403962847., 2339029465. },
            { 1483118807., 639660658., 403962847. }
        },
        {
            { 3508595200., 4228486662., 754946994. },
            { 1913148390., 3500531602., 4228486662. },
            { 24637., 3773159052., 3500531602. }
        },
        {
            { 4024866227., 1143874914., 3205058469. },
            { 2970344133., 2873927273., 1143874914. },
            { 2167114735., 4095476435., 2873927273. }
        },
        {
            { 1479401095., 2958366486., 3027708794. },
            { 2704486034., 3574053987., 2958366486. },
            { 3630964515., 1276667706., 3574053987. }
        },
        {
            { 2035927380., 1363628533., 818363998. },
            { 3023327955., 3968427114., 1363628533. },
            { 1284825950., 2871663372., 3968427114. }
        },
        {
            { 3827747418., 3897287251., 4106993377. },
            { 1527779946., 3221052941., 3897287251. },
            { 4178727866., 4281160673., 3221052941. }
        },
        {
            { 1174358892., 2835476193., 959978619. },
            { 850076464., 3774782533., 2835476193. },
            { 3880910680., 3237990203., 3774782533. }
        }
    };

static __attribute__((device)) double mrg32k3aM2Seq[64][3][3] = {
        {
            { 1464411153., 277697599., 1610723613. },
            { 32183930., 1464411153., 1022607788. },
            { 2824425944., 32183930., 2093834863. }
        },
        {
            { 3492361727., 1027004383., 3167429889. },
            { 3674905362., 3492361727., 3572939265. },
            { 4270409313., 3674905362., 698814233. }
        },
        {
            { 880482061., 205175925., 4070445105. },
            { 2208329119., 880482061., 1933248566. },
            { 3741227945., 2208329119., 3962062826. }
        },
        {
            { 4184605179., 1189429800., 567967482. },
            { 107217966., 4184605179., 784865788. },
            { 549462420., 107217966., 3134382704. }
        },
        {
            { 2732536445., 1231107067., 3374588386. },
            { 409954030., 2732536445., 1044831206. },
            { 3398162498., 409954030., 3505648581. }
        },
        {
            { 2169560691., 1076348534., 637306236. },
            { 3704346564., 2169560691., 293694496. },
            { 632453145., 3704346564., 1609425246. }
        },
        {
            { 372115891., 3928812480., 2830541169. },
            { 3056527841., 372115891., 1924239834. },
            { 3044937468., 3056527841., 547142630. }
        },
        {
            { 1660852083., 3635660815., 1389092450. },
            { 1025573319., 1660852083., 3276803366. },
            { 4036331438., 1025573319., 4092197741. }
        },
        {
            { 1360732901., 2887812973., 4101068693. },
            { 52572783., 1360732901., 112458461. },
            { 2636566855., 52572783., 1136777988. }
        },
        {
            { 3455696508., 536919193., 3978804036. },
            { 3094157668., 3455696508., 3821833900. },
            { 2278849016., 3094157668., 2531965909. }
        },
        {
            { 2125991744., 890897326., 3790557569. },
            { 1433592392., 2125991744., 3671109604. },
            { 808215503., 1433592392., 2446306581. }
        },
        {
            { 3524411799., 932865240., 1838275365. },
            { 1789634890., 3524411799., 4130736474. },
            { 2252266098., 1789634890., 3048775967. }
        },
        {
            { 1773339925., 948403862., 1999624391. },
            { 983864203., 1773339925., 3734776305. },
            { 314407045., 983864203., 2648614071. }
        },
        {
            { 321802921., 1099164995., 2112167358. },
            { 3760936985., 321802921., 1003573324. },
            { 3758858458., 3760936985., 4014658840. }
        },
        {
            { 2196438580., 805386227., 4266375092. },
            { 4124675351., 2196438580., 2527961345. },
            { 94452540., 4124675351., 2825656399. }
        },
        {
            { 66735368., 2228005807., 4186703168. },
            { 2624855312., 66735368., 2708679078. },
            { 4098470056., 2624855312., 1773862183. }
        },
        {
            { 3072642883., 2746897053., 2690305546. },
            { 1105106652., 3072642883., 4047666135. },
            { 2862886282., 1105106652., 3597347398. }
        },
        {
            { 232906611., 3873338256., 4051554873. },
            { 3027413363., 232906611., 3159432673. },
            { 3872967050., 3027413363., 987156327. }
        },
        {
            { 1160686753., 3676603152., 1635979789. },
            { 1447386846., 1160686753., 2670438424. },
            { 816212890., 1447386846., 4288868534. }
        },
        {
            { 3825238244., 1445162354., 2362389441. },
            { 3440193648., 3825238244., 3520937545. },
            { 2652790808., 3440193648., 405299994. }
        },
        {
            { 1984094858., 532165989., 2027397575. },
            { 1455977136., 1984094858., 2433255524. },
            { 1039994763., 1455977136., 2069333087. }
        },
        {
            { 3680843319., 2332949611., 3516795313. },
            { 2033851810., 3680843319., 3843367307. },
            { 3686294589., 2033851810., 3912995069. }
        },
        {
            { 967423689., 1724183394., 635932799. },
            { 641380480., 967423689., 2145297779. },
            { 1723000412., 641380480., 455633660. }
        },
        {
            { 2130938335., 1534972306., 2511584766. },
            { 273828453., 2130938335., 3112810093. },
            { 4084843716., 273828453., 1399334152. }
        },
        {
            { 168278549., 541167592., 190177712. },
            { 403188859., 168278549., 2092073970. },
            { 58789558., 403188859., 2777887189. }
        },
        {
            { 634843389., 4082275720., 2092828966. },
            { 351187677., 634843389., 1312056270. },
            { 3347241070., 351187677., 2417192332. }
        },
        {
            { 443276110., 1113643788., 271102234. },
            { 3083745876., 443276110., 3370743767. },
            { 4200577503., 3083745876., 3298601960. }
        },
        {
            { 3533393557., 764977733., 3400275098. },
            { 144639933., 3533393557., 2646475951. },
            { 77963866., 144639933., 3794766611. }
        },
        {
            { 4064854722., 1198665008., 2872196602. },
            { 3274748603., 4064854722., 4164637970. },
            { 4238693771., 3274748603., 1981721347. }
        },
        {
            { 2279220396., 2355957139., 1417574285. },
            { 885864931., 2279220396., 1344421653. },
            { 1895527787., 885864931., 3726919367. }
        },
        {
            { 2898100178., 2427331008., 348923199. },
            { 3175444953., 2898100178., 4290541487. },
            { 246118669., 3175444953., 3410622769. }
        },
        {
            { 284442065., 4064194676., 2295560707. },
            { 4182706556., 284442065., 3696899246. },
            { 1201342255., 4182706556., 1145356382. }
        },
        {
            { 656615546., 442908965., 3724738272. },
            { 1624967553., 656615546., 798014134. },
            { 1157949454., 1624967553., 496247378. }
        },
        {
            { 265689579., 675056541., 3009083380. },
            { 3820679930., 265689579., 2961990151. },
            { 562287964., 3820679930., 1853486796. }
        },
        {
            { 1675739167., 2319843005., 760605578. },
            { 4161492847., 1675739167., 226142150. },
            { 1017447188., 4161492847., 3431158427. }
        },
        {
            { 1759873736., 2334568602., 2154570180. },
            { 1812793060., 1759873736., 2111094408. },
            { 1168460586., 1812793060., 2495653141. }
        },
        {
            { 317621194., 868104288., 664971082. },
            { 2340275074., 317621194., 2168960688. },
            { 725706104., 2340275074., 3532023115. }
        },
        {
            { 3926931954., 2907684453., 615601328. },
            { 1132340715., 3926931954., 676995757. },
            { 1154819290., 1132340715., 1662727700. }
        },
        {
            { 3921782078., 3376494857., 2969567377. },
            { 475345024., 3921782078., 4206379953. },
            { 1795936544., 475345024., 934679595. }
        },
        {
            { 3119292228., 741613041., 2083352304. },
            { 1047885963., 3119292228., 1581078542. },
            { 1065969969., 1047885963., 661718928. }
        },
        {
            { 3643472111., 2870554228., 3995474529. },
            { 3804264051., 3643472111., 1366457944. },
            { 1246805564., 3804264051., 993186530. }
        },
        {
            { 796711791., 3878204845., 3160293932. },
            { 255632881., 796711791., 3778927111. },
            { 3472564181., 255632881., 388382377. }
        },
        {
            { 1776984101., 1742284034., 3449763933. },
            { 1349354417., 1776984101., 1264780832. },
            { 715722511., 1349354417., 1213319489. }
        },
        {
            { 4261866865., 1914382786., 201872335. },
            { 614207188., 4261866865., 1853554849. },
            { 2046042882., 614207188., 3193186353. }
        },
        {
            { 2210205512., 2847073169., 3324925707. },
            { 1251969297., 2210205512., 3491451503. },
            { 470400916., 1251969297., 2184392547. }
        },
        {
            { 1523590942., 2391111113., 68341529. },
            { 295466806., 1523590942., 4143310876. },
            { 3527253079., 295466806., 4059123142. }
        },
        {
            { 1406902110., 3735012720., 1774518130. },
            { 1814959027., 1406902110., 1560544267. },
            { 346472965., 1814959027., 964257199. }
        },
        {
            { 855309653., 4208503105., 1518467541. },
            { 2025248418., 855309653., 4148125749. },
            { 1349947330., 2025248418., 1168504873. }
        },
        {
            { 2375338156., 3629519168., 409696181. },
            { 252401654., 2375338156., 3992097193. },
            { 2793725401., 252401654., 1350184085. }
        },
        {
            { 873141039., 3885583138., 361604799. },
            { 3554143374., 873141039., 894746180. },
            { 1919765327., 3554143374., 876210854. }
        },
        {
            { 246368794., 1703793169., 2317362874. },
            { 2300930144., 246368794., 2560214589. },
            { 2016163623., 2300930144., 1504276775. }
        },
        {
            { 1574610921., 2147546631., 4103450226. },
            { 107416526., 1574610921., 1773803959. },
            { 1402542742., 107416526., 550063800. }
        },
        {
            { 363388665., 592194244., 1746615522. },
            { 2637234667., 363388665., 4031408742. },
            { 2895130475., 2637234667., 296510335. }
        },
        {
            { 3997368560., 3047771871., 3178383826. },
            { 1160174754., 3997368560., 4027094919. },
            { 1234984211., 1160174754., 4226264344. }
        },
        {
            { 3303179301., 4243968063., 3235964171. },
            { 1776841674., 3303179301., 2867287469. },
            { 1500495759., 1776841674., 1708226553. }
        },
        {
            { 1482944153., 3192311574., 354466071. },
            { 3932773012., 1482944153., 389193591. },
            { 3350181058., 3932773012., 3398059015. }
        },
        {
            { 640968550., 3226860971., 922372912. },
            { 1254989667., 640968550., 2383815228. },
            { 2027371896., 1254989667., 2925300409. }
        },
        {
            { 2313146046., 3910187183., 1377591475. },
            { 1689291784., 2313146046., 4255405993. },
            { 1650609719., 1689291784., 1897624297. }
        },
        {
            { 3656310954., 882924050., 2702189958. },
            { 3185020283., 3656310954., 1923190496. },
            { 2449669145., 3185020283., 4235849984. }
        },
        {
            { 377232416., 1498446142., 4229103619. },
            { 3926377906., 377232416., 600268838. },
            { 511317726., 3926377906., 216160452. }
        },
        {
            { 1969399344., 3273966859., 4220943579. },
            { 3952111894., 1969399344., 575096961. },
            { 3815277103., 3952111894., 792177412. }
        },
        {
            { 2957238169., 1410010554., 1523740068. },
            { 3949237584., 2957238169., 74149658. },
            { 2564746147., 3949237584., 2557663578. }
        },
        {
            { 3377318569., 1927835240., 2556102508. },
            { 3022040116., 3377318569., 2549406364. },
            { 2387074241., 3022040116., 1477293711. }
        },
        {
            { 257306870., 1748489735., 547809226. },
            { 3708493374., 257306870., 4183546362. },
            { 4435502., 3708493374., 1607696753. }
        }
    };

static double mrg32k3aM2SeqHost[64][3][3] = {
        {
            { 1464411153., 277697599., 1610723613. },
            { 32183930., 1464411153., 1022607788. },
            { 2824425944., 32183930., 2093834863. }
        },
        {
            { 3492361727., 1027004383., 3167429889. },
            { 3674905362., 3492361727., 3572939265. },
            { 4270409313., 3674905362., 698814233. }
        },
        {
            { 880482061., 205175925., 4070445105. },
            { 2208329119., 880482061., 1933248566. },
            { 3741227945., 2208329119., 3962062826. }
        },
        {
            { 4184605179., 1189429800., 567967482. },
            { 107217966., 4184605179., 784865788. },
            { 549462420., 107217966., 3134382704. }
        },
        {
            { 2732536445., 1231107067., 3374588386. },
            { 409954030., 2732536445., 1044831206. },
            { 3398162498., 409954030., 3505648581. }
        },
        {
            { 2169560691., 1076348534., 637306236. },
            { 3704346564., 2169560691., 293694496. },
            { 632453145., 3704346564., 1609425246. }
        },
        {
            { 372115891., 3928812480., 2830541169. },
            { 3056527841., 372115891., 1924239834. },
            { 3044937468., 3056527841., 547142630. }
        },
        {
            { 1660852083., 3635660815., 1389092450. },
            { 1025573319., 1660852083., 3276803366. },
            { 4036331438., 1025573319., 4092197741. }
        },
        {
            { 1360732901., 2887812973., 4101068693. },
            { 52572783., 1360732901., 112458461. },
            { 2636566855., 52572783., 1136777988. }
        },
        {
            { 3455696508., 536919193., 3978804036. },
            { 3094157668., 3455696508., 3821833900. },
            { 2278849016., 3094157668., 2531965909. }
        },
        {
            { 2125991744., 890897326., 3790557569. },
            { 1433592392., 2125991744., 3671109604. },
            { 808215503., 1433592392., 2446306581. }
        },
        {
            { 3524411799., 932865240., 1838275365. },
            { 1789634890., 3524411799., 4130736474. },
            { 2252266098., 1789634890., 3048775967. }
        },
        {
            { 1773339925., 948403862., 1999624391. },
            { 983864203., 1773339925., 3734776305. },
            { 314407045., 983864203., 2648614071. }
        },
        {
            { 321802921., 1099164995., 2112167358. },
            { 3760936985., 321802921., 1003573324. },
            { 3758858458., 3760936985., 4014658840. }
        },
        {
            { 2196438580., 805386227., 4266375092. },
            { 4124675351., 2196438580., 2527961345. },
            { 94452540., 4124675351., 2825656399. }
        },
        {
            { 66735368., 2228005807., 4186703168. },
            { 2624855312., 66735368., 2708679078. },
            { 4098470056., 2624855312., 1773862183. }
        },
        {
            { 3072642883., 2746897053., 2690305546. },
            { 1105106652., 3072642883., 4047666135. },
            { 2862886282., 1105106652., 3597347398. }
        },
        {
            { 232906611., 3873338256., 4051554873. },
            { 3027413363., 232906611., 3159432673. },
            { 3872967050., 3027413363., 987156327. }
        },
        {
            { 1160686753., 3676603152., 1635979789. },
            { 1447386846., 1160686753., 2670438424. },
            { 816212890., 1447386846., 4288868534. }
        },
        {
            { 3825238244., 1445162354., 2362389441. },
            { 3440193648., 3825238244., 3520937545. },
            { 2652790808., 3440193648., 405299994. }
        },
        {
            { 1984094858., 532165989., 2027397575. },
            { 1455977136., 1984094858., 2433255524. },
            { 1039994763., 1455977136., 2069333087. }
        },
        {
            { 3680843319., 2332949611., 3516795313. },
            { 2033851810., 3680843319., 3843367307. },
            { 3686294589., 2033851810., 3912995069. }
        },
        {
            { 967423689., 1724183394., 635932799. },
            { 641380480., 967423689., 2145297779. },
            { 1723000412., 641380480., 455633660. }
        },
        {
            { 2130938335., 1534972306., 2511584766. },
            { 273828453., 2130938335., 3112810093. },
            { 4084843716., 273828453., 1399334152. }
        },
        {
            { 168278549., 541167592., 190177712. },
            { 403188859., 168278549., 2092073970. },
            { 58789558., 403188859., 2777887189. }
        },
        {
            { 634843389., 4082275720., 2092828966. },
            { 351187677., 634843389., 1312056270. },
            { 3347241070., 351187677., 2417192332. }
        },
        {
            { 443276110., 1113643788., 271102234. },
            { 3083745876., 443276110., 3370743767. },
            { 4200577503., 3083745876., 3298601960. }
        },
        {
            { 3533393557., 764977733., 3400275098. },
            { 144639933., 3533393557., 2646475951. },
            { 77963866., 144639933., 3794766611. }
        },
        {
            { 4064854722., 1198665008., 2872196602. },
            { 3274748603., 4064854722., 4164637970. },
            { 4238693771., 3274748603., 1981721347. }
        },
        {
            { 2279220396., 2355957139., 1417574285. },
            { 885864931., 2279220396., 1344421653. },
            { 1895527787., 885864931., 3726919367. }
        },
        {
            { 2898100178., 2427331008., 348923199. },
            { 3175444953., 2898100178., 4290541487. },
            { 246118669., 3175444953., 3410622769. }
        },
        {
            { 284442065., 4064194676., 2295560707. },
            { 4182706556., 284442065., 3696899246. },
            { 1201342255., 4182706556., 1145356382. }
        },
        {
            { 656615546., 442908965., 3724738272. },
            { 1624967553., 656615546., 798014134. },
            { 1157949454., 1624967553., 496247378. }
        },
        {
            { 265689579., 675056541., 3009083380. },
            { 3820679930., 265689579., 2961990151. },
            { 562287964., 3820679930., 1853486796. }
        },
        {
            { 1675739167., 2319843005., 760605578. },
            { 4161492847., 1675739167., 226142150. },
            { 1017447188., 4161492847., 3431158427. }
        },
        {
            { 1759873736., 2334568602., 2154570180. },
            { 1812793060., 1759873736., 2111094408. },
            { 1168460586., 1812793060., 2495653141. }
        },
        {
            { 317621194., 868104288., 664971082. },
            { 2340275074., 317621194., 2168960688. },
            { 725706104., 2340275074., 3532023115. }
        },
        {
            { 3926931954., 2907684453., 615601328. },
            { 1132340715., 3926931954., 676995757. },
            { 1154819290., 1132340715., 1662727700. }
        },
        {
            { 3921782078., 3376494857., 2969567377. },
            { 475345024., 3921782078., 4206379953. },
            { 1795936544., 475345024., 934679595. }
        },
        {
            { 3119292228., 741613041., 2083352304. },
            { 1047885963., 3119292228., 1581078542. },
            { 1065969969., 1047885963., 661718928. }
        },
        {
            { 3643472111., 2870554228., 3995474529. },
            { 3804264051., 3643472111., 1366457944. },
            { 1246805564., 3804264051., 993186530. }
        },
        {
            { 796711791., 3878204845., 3160293932. },
            { 255632881., 796711791., 3778927111. },
            { 3472564181., 255632881., 388382377. }
        },
        {
            { 1776984101., 1742284034., 3449763933. },
            { 1349354417., 1776984101., 1264780832. },
            { 715722511., 1349354417., 1213319489. }
        },
        {
            { 4261866865., 1914382786., 201872335. },
            { 614207188., 4261866865., 1853554849. },
            { 2046042882., 614207188., 3193186353. }
        },
        {
            { 2210205512., 2847073169., 3324925707. },
            { 1251969297., 2210205512., 3491451503. },
            { 470400916., 1251969297., 2184392547. }
        },
        {
            { 1523590942., 2391111113., 68341529. },
            { 295466806., 1523590942., 4143310876. },
            { 3527253079., 295466806., 4059123142. }
        },
        {
            { 1406902110., 3735012720., 1774518130. },
            { 1814959027., 1406902110., 1560544267. },
            { 346472965., 1814959027., 964257199. }
        },
        {
            { 855309653., 4208503105., 1518467541. },
            { 2025248418., 855309653., 4148125749. },
            { 1349947330., 2025248418., 1168504873. }
        },
        {
            { 2375338156., 3629519168., 409696181. },
            { 252401654., 2375338156., 3992097193. },
            { 2793725401., 252401654., 1350184085. }
        },
        {
            { 873141039., 3885583138., 361604799. },
            { 3554143374., 873141039., 894746180. },
            { 1919765327., 3554143374., 876210854. }
        },
        {
            { 246368794., 1703793169., 2317362874. },
            { 2300930144., 246368794., 2560214589. },
            { 2016163623., 2300930144., 1504276775. }
        },
        {
            { 1574610921., 2147546631., 4103450226. },
            { 107416526., 1574610921., 1773803959. },
            { 1402542742., 107416526., 550063800. }
        },
        {
            { 363388665., 592194244., 1746615522. },
            { 2637234667., 363388665., 4031408742. },
            { 2895130475., 2637234667., 296510335. }
        },
        {
            { 3997368560., 3047771871., 3178383826. },
            { 1160174754., 3997368560., 4027094919. },
            { 1234984211., 1160174754., 4226264344. }
        },
        {
            { 3303179301., 4243968063., 3235964171. },
            { 1776841674., 3303179301., 2867287469. },
            { 1500495759., 1776841674., 1708226553. }
        },
        {
            { 1482944153., 3192311574., 354466071. },
            { 3932773012., 1482944153., 389193591. },
            { 3350181058., 3932773012., 3398059015. }
        },
        {
            { 640968550., 3226860971., 922372912. },
            { 1254989667., 640968550., 2383815228. },
            { 2027371896., 1254989667., 2925300409. }
        },
        {
            { 2313146046., 3910187183., 1377591475. },
            { 1689291784., 2313146046., 4255405993. },
            { 1650609719., 1689291784., 1897624297. }
        },
        {
            { 3656310954., 882924050., 2702189958. },
            { 3185020283., 3656310954., 1923190496. },
            { 2449669145., 3185020283., 4235849984. }
        },
        {
            { 377232416., 1498446142., 4229103619. },
            { 3926377906., 377232416., 600268838. },
            { 511317726., 3926377906., 216160452. }
        },
        {
            { 1969399344., 3273966859., 4220943579. },
            { 3952111894., 1969399344., 575096961. },
            { 3815277103., 3952111894., 792177412. }
        },
        {
            { 2957238169., 1410010554., 1523740068. },
            { 3949237584., 2957238169., 74149658. },
            { 2564746147., 3949237584., 2557663578. }
        },
        {
            { 3377318569., 1927835240., 2556102508. },
            { 3022040116., 3377318569., 2549406364. },
            { 2387074241., 3022040116., 1477293711. }
        },
        {
            { 257306870., 1748489735., 547809226. },
            { 3708493374., 257306870., 4183546362. },
            { 4435502., 3708493374., 1607696753. }
        }
    };
# 67 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h" 1
# 108 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h"
# 1 "/usr/include/memory.h" 1 3 4
# 109 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h" 2


# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32.h" 1
# 139 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32.h"
struct mtgp32_params_fast;

struct mtgp32_params_fast {
    int mexp;
    int pos;
    int sh1;
    int sh2;
    unsigned int tbl[16];
    unsigned int tmp_tbl[16];
    unsigned int flt_tmp_tbl[16];

    unsigned int mask;
    unsigned char poly_sha1[21];
};


typedef struct mtgp32_params_fast mtgp32_params_fast_t;





struct mtgp32_kernel_params;
struct mtgp32_kernel_params {
    unsigned int pos_tbl[200];
    unsigned int param_tbl[200][16];
    unsigned int temper_tbl[200][16];
    unsigned int single_temper_tbl[200][16];
    unsigned int sh1_tbl[200];
    unsigned int sh2_tbl[200];
    unsigned int mask[1];
};


typedef struct mtgp32_kernel_params mtgp32_kernel_params_t;
# 192 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32.h"
struct curandStateMtgp32;

struct curandStateMtgp32 {
    unsigned int s[1024];
    int offset;
    int pIdx;
    mtgp32_kernel_params_t * k;
    int precise_double_flag;
};





typedef struct curandStateMtgp32 curandStateMtgp32_t;
# 112 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h" 2
# 135 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int para_rec(mtgp32_kernel_params_t * k,unsigned int X1, unsigned int X2, unsigned int Y, int bid) {
    unsigned int X = (X1 & k->mask[0]) ^ X2;
    unsigned int MAT;

    X ^= X << k->sh1_tbl[bid];
    Y = X ^ (Y >> k->sh2_tbl[bid]);
    MAT = k->param_tbl[bid][Y & 0x0f];
    return Y ^ MAT;
}
# 153 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int temper(mtgp32_kernel_params_t * k,unsigned int V, unsigned int T, int bid) {
    unsigned int MAT;

    T ^= T >> 16;
    T ^= T >> 8;
    MAT = k->temper_tbl[bid][T & 0x0f];
    return V ^ MAT;
}
# 172 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int temper_single(mtgp32_kernel_params_t * k,unsigned int V, unsigned int T, int bid) {
    unsigned int MAT;
    unsigned int r;

    T ^= T >> 16;
    T ^= T >> 8;
    MAT = k->single_temper_tbl[bid][T & 0x0f];
    r = (V >> 9) ^ MAT;
    return r;
}
# 194 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int curand(curandStateMtgp32_t *state)
{
    unsigned int t;
    unsigned int d;
    int pos = state->k->pos_tbl[state->pIdx];
    unsigned int r;
    unsigned int o;

    d = blockDim.z * blockDim.y * blockDim.x;

    t = (blockDim.z * blockDim.y * threadIdx.z) + (blockDim.x * threadIdx.y) + threadIdx.x;
    r = para_rec(state->k, state->s[(t + state->offset) & 1023],
             state->s[(t + state->offset + 1) & 1023],
             state->s[(t + state->offset + pos) & 1023],
             state->pIdx);

    state->s[(t + state->offset + 351) & 1023] = r;
    o = temper(state->k, r,
           state->s[(t + state->offset + pos -1) & 1023],
           state->pIdx);

    __syncthreads();

    if (t == 0)
    {
        state->offset = (state->offset + d) & 1023;
    }

    __syncthreads();

    return o;

}
# 245 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) unsigned int curand_mtgp32_specific(curandStateMtgp32_t *state, unsigned char index, unsigned char n)
{
    unsigned int t;
    int pos = state->k->pos_tbl[state->pIdx];
    unsigned int r;
    unsigned int o;

    t = index;
    r = para_rec(state->k, state->s[(t + state->offset) & 1023],
             state->s[(t + state->offset + 1) & 1023],
             state->s[(t + state->offset + pos) & 1023],
             state->pIdx);

    state->s[(t + state->offset + 351) & 1023] = r;
    o = temper(state->k, r,
           state->s[(t + state->offset + pos -1) & 1023],
           state->pIdx);

    __syncthreads();

    if (index == 0)
    {
        state->offset = (state->offset + n) & 1023;
    }

    __syncthreads();

    return o;
}
# 289 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) float curand_mtgp32_single(curandStateMtgp32_t *state)
{
    unsigned int t;
    unsigned int d;
    int pos = state->k->pos_tbl[state->pIdx];
    unsigned int r;
    union mtgp32_u_to_f {
        unsigned int u;
        float f;
    }o;


    t = blockDim.z * blockDim.y;
    d = t * blockDim.x;

    t += threadIdx.x;
    r = para_rec(state->k, state->s[(t + state->offset) & 1023],
             state->s[(t + state->offset + 1) & 1023],
             state->s[(t + state->offset + pos) & 1023],
             state->pIdx);

    state->s[t] = r;
    o.u = temper_single(state->k, r,
                        state->s[(t + state->offset + pos -1) & 1023],
                        state->pIdx);

    __syncthreads();

    if (threadIdx.x == 0)
    {
        state->offset = (state->offset + d) & 1023;
    }

    __syncthreads();

    return o.f;
}
# 351 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) __attribute__((host)) float curand_mtgp32_single_specific(curandStateMtgp32_t *state, unsigned char index, unsigned char n)
{
    unsigned int t;
    int pos = state->k->pos_tbl[state->pIdx];
    unsigned int r;
    union mtgp32_u_to_f {
        unsigned int u;
        float f;
    }o;


    t = index;
    r = para_rec(state->k, state->s[(t + state->offset) & 1023],
             state->s[(t + state->offset + 1) & 1023],
             state->s[(t + state->offset + pos) & 1023],
             state->pIdx);

    state->s[t] = r;
    o.u = temper_single(state->k, r,
                        state->s[(t + state->offset + pos -1) & 1023],
                        state->pIdx);

    __syncthreads();

    if (threadIdx.x == 0)
    {
        state->offset = (state->offset + n) & 1023;
    }

    __syncthreads();

    return o.f;
}
# 68 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2


# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_philox4x32_x.h" 1
# 92 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_philox4x32_x.h"
struct curandStatePhilox4_32_10 {
 uint4 ctr;
 uint4 output;
    uint2 key;
 unsigned int STATE;
 int boxmuller_flag;
 int boxmuller_flag_double;
 float boxmuller_extra;
 double boxmuller_extra_double;
};

typedef struct curandStatePhilox4_32_10 curandStatePhilox4_32_10_t;


static __inline__ __attribute__((always_inline)) __attribute__((device)) void Philox_State_Incr(curandStatePhilox4_32_10_t* s, unsigned long long n)
{
 unsigned int nlo = (unsigned int)(n);
    unsigned int nhi = (unsigned int)(n>>32);

 s->ctr.x += nlo;
    if( s->ctr.x < nlo )
        nhi++;

    s->ctr.y += nhi;
    if(nhi <= s->ctr.y)
        return;
 if(++s->ctr.z) return;
 ++s->ctr.w;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void Philox_State_Incr_hi(curandStatePhilox4_32_10_t* s, unsigned long long n)
{
 unsigned int nlo = (unsigned int)(n);
    unsigned int nhi = (unsigned int)(n>>32);

 s->ctr.z += nlo;
    if( s->ctr.z < nlo )
        nhi++;

    s->ctr.w += nhi;
}



static __inline__ __attribute__((always_inline)) __attribute__((device)) void Philox_State_Incr(curandStatePhilox4_32_10_t* s)
{
 if(++s->ctr.x) return;
 if(++s->ctr.y) return;
 if(++s->ctr.z) return;
 ++s->ctr.w;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int mulhilo32(unsigned int a, unsigned int b, unsigned int* hip)
{







    *hip = __umulhi(a,b);
    return a*b;

}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 _philox4x32round(uint4 ctr, uint2 key)
{
 unsigned int hi0;
 unsigned int hi1;
 unsigned int lo0 = mulhilo32((0xD2511F53), ctr.x, &hi0);
 unsigned int lo1 = mulhilo32((0xCD9E8D57), ctr.z, &hi1);

    uint4 ret = {hi1^ctr.y^key.x, lo1, hi0^ctr.w^key.y, lo0};
    return ret;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand_Philox4x32_10( uint4 c, uint2 k)
{
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    c = _philox4x32round(c, k);
    k.x += (0x9E3779B9); k.y += (0xBB67AE85);
    return _philox4x32round(c, k);
}
# 71 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_globals.h" 1
# 73 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_globals.h"
struct normal_args_st {
    float mean;
    float stddev;
};

typedef struct normal_args_st normal_args_t;

struct normal_args_double_st {
    double mean;
    double stddev;
};

typedef struct normal_args_double_st normal_args_double_t;
# 72 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 82 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
struct curandStateTest {
    unsigned int v;
};


typedef struct curandStateTest curandStateTest_t;
# 105 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
struct curandStateXORWOW;



struct curandStateXORWOW {
    unsigned int d, v[5];
    int boxmuller_flag;
    int boxmuller_flag_double;
    float boxmuller_extra;
    double boxmuller_extra_double;
};





typedef struct curandStateXORWOW curandStateXORWOW_t;
# 170 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
struct curandStateMRG32k3a;


struct curandStateMRG32k3a {
    double s1[3];
    double s2[3];
    int boxmuller_flag;
    int boxmuller_flag_double;
    float boxmuller_extra;
    double boxmuller_extra_double;
};





typedef struct curandStateMRG32k3a curandStateMRG32k3a_t;






struct curandStateSobol32;


struct curandStateSobol32 {
    unsigned int i, x, c;
    unsigned int direction_vectors[32];
};





typedef struct curandStateSobol32 curandStateSobol32_t;





struct curandStateScrambledSobol32;


struct curandStateScrambledSobol32 {
    unsigned int i, x, c;
    unsigned int direction_vectors[32];
};





typedef struct curandStateScrambledSobol32 curandStateScrambledSobol32_t;





struct curandStateSobol64;


struct curandStateSobol64 {
    unsigned long long i, x, c;
    unsigned long long direction_vectors[64];
};





typedef struct curandStateSobol64 curandStateSobol64_t;





struct curandStateScrambledSobol64;


struct curandStateScrambledSobol64 {
    unsigned long long i, x, c;
    unsigned long long direction_vectors[64];
};





typedef struct curandStateScrambledSobol64 curandStateScrambledSobol64_t;






typedef struct curandStateXORWOW curandState_t;
typedef struct curandStateXORWOW curandState;
# 280 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void __curand_matvec(unsigned int *vector, unsigned int *matrix,
                                unsigned int *result, int n)
{
    for(int i = 0; i < n; i++) {
        result[i] = 0;
    }
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < 32; j++) {
            if(vector[i] & (1 << j)) {
                for(int k = 0; k < n; k++) {
                    result[k] ^= matrix[n * (i * 32 + j) + k];
                }
            }
        }
    }
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void __curand_matidentity(unsigned int *matrix, int n)
{
    int r;
    for(int i = 0; i < n * 32; i++) {
        for(int j = 0; j < n; j++) {
            r = i & 31;
            if(i / 32 == j) {
                matrix[i * n + j] = (1 << r);
            } else {
                matrix[i * n + j] = 0;
            }
        }
    }
}



static __inline__ __attribute__((always_inline)) __attribute__((device)) void __curand_matmat(unsigned int *matrixA, unsigned int *matrixB, int n)
{
    unsigned int result[(5)];
    for(int i = 0; i < n * 32; i++) {
        __curand_matvec(matrixA + i * n, matrixB, result, n);
        for(int j = 0; j < n; j++) {
            matrixA[i * n + j] = result[j];
        }
    }
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void __curand_veccopy(unsigned int *vector, unsigned int *vectorA, int n)
{
    for(int i = 0; i < n; i++) {
        vector[i] = vectorA[i];
    }
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void __curand_matcopy(unsigned int *matrix, unsigned int *matrixA, int n)
{
    for(int i = 0; i < n * n * 32; i++) {
        matrix[i] = matrixA[i];
    }
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void __curand_matpow(unsigned int *matrix, unsigned int *matrixA,
                                unsigned long long p, int n)
{
    unsigned int matrixR[(5) * (5) * 32];
    unsigned int matrixS[(5) * (5) * 32];
    __curand_matidentity(matrix, n);
    __curand_matcopy(matrixR, matrixA, n);
    while(p) {
        if(p & 1) {
            __curand_matmat(matrix, matrixR, n);
        }
        __curand_matcopy(matrixS, matrixR, n);
        __curand_matmat(matrixR, matrixS, n);
        p >>= 1;
    }
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) float __curand_uint32AsFloat (unsigned int i)
{
    union {
        float f;
        unsigned int i;
    } xx;
    xx.i = i;
    return xx.f;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) double __curand_hilouint32AsDouble (unsigned int hi, unsigned int lo)
{
    union {
        double f;
        unsigned int hi;
        unsigned int lo;
    } xx;
    xx.hi = hi;
    xx.lo = lo;
    return xx.f;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) float __curand_uint32_as_float(unsigned int x)
{

    return __int_as_float(x);



}
# 414 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_MRGmod(double i, double m)
{
    double quo;
    double rem;
    quo = floor(i/m);
    rem = i - (quo*m);
    if (rem < 0.0) rem += m;
    return rem;
}




static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_MRGmodMul(double i, double j, double m)
{
    double tempHi;
    double tempLo;

    tempHi = floor(i/131072.0);
    tempLo = i - (tempHi*131072.0);
    tempLo = curand_MRGmod( curand_MRGmod( (tempHi * j), m) * 131072.0 + curand_MRGmod(tempLo * j, m),m);

    if (tempLo < 0.0) tempLo += m;
    return tempLo;
}



static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_MRGmatMul3x3(double i1[][3],double i2[][3],double o[][3],double m)
{
    int i,j;
    double temp[3][3];
    for (i=0; i<3; i++){
        for (j=0; j<3; j++){
            temp[i][j] = ( curand_MRGmodMul(i1[i][0], i2[0][j], m) +
                           curand_MRGmodMul(i1[i][1], i2[1][j], m) +
                           curand_MRGmodMul(i1[i][2], i2[2][j], m));
            temp[i][j] = curand_MRGmod( temp[i][j], m );
        }
    }
    for (i=0; i<3; i++){
        for (j=0; j<3; j++){
            o[i][j] = temp[i][j];
        }
    }
}



static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_MRGmatVecMul3x3( double i[][3], double v[], double m)
{
    int k;
    double t[3];
    for (k = 0; k < 3; k++) {
        t[k] = ( curand_MRGmodMul(i[k][0], v[0], m) +
                 curand_MRGmodMul(i[k][1], v[1], m) +
                 curand_MRGmodMul(i[k][2], v[2], m) );
        t[k] = curand_MRGmod( t[k], m );
    }
    for (k = 0; k < 3; k++) {
        v[k] = t[k];
    }

}





static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_MRGmatPow3x3( double in[][3][3], double o[][3], double m, unsigned long long pow )
{
    int i,j;
    for ( i = 0; i < 3; i++ ) {
        for ( j = 0; j < 3; j++ ) {
            o[i][j] = 0;
            if ( i == j ) o[i][j] = 1;
        }
    }
    i = 0;
    curand_MRGmatVecMul3x3(o,o[0],m);
    while (pow) {
        if ( pow & 1ll ) {
             curand_MRGmatMul3x3(in[i], o, o, m);
        }
        i++;
        pow >>= 1;
    }
}




static __inline__ __attribute__((always_inline)) __attribute__((device)) void curnand_MRGmatPow2Pow3x3( double in[][3], double o[][3], double m, unsigned long pow )
{
    double temp[3][3];
    int i,j;
    pow = pow % 191;
    for ( i = 0; i < 3; i++ ) {
        for ( j = 0; j < 3; j++ ) {
            temp[i][j] = in[i][j];
        }
    }
    while (pow) {
        curand_MRGmatMul3x3(temp, temp, temp, m);
        pow--;
    }
    for ( i = 0; i < 3; i++ ) {
        for ( j = 0; j < 3; j++ ) {
            o[i][j] = temp[i][j];
        }
    }
}
# 535 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_init(unsigned long long seed,
                                            unsigned long long subsequence,
                                            unsigned long long offset,
                                            curandStateTest_t *state)
{
    state->v = (unsigned int)(seed * 3) + (unsigned int)(subsequence * 31337) +
                     (unsigned int)offset;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand(curandStateTest_t *state)
{
    unsigned int r = state->v++;
    return r;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead(unsigned long long n, curandStateTest_t *state)
{
    state->v += (unsigned int)n;
}



template <typename T, int n>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void __curand_generate_skipahead_matrix_xor(unsigned int matrix[])
{
    T state;



    for(int i = 0; i < 32 * n; i++) {
        state.d = 0;
        for(int j = 0; j < n; j++) {
            state.v[j] = 0;
        }
        state.v[i / 32] = (1 << (i & 31));
        curand(&state);
        for(int j = 0; j < n; j++) {
            matrix[i * n + j] = state.v[j];
        }
    }
}

template <typename T, int n>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void _skipahead_scratch(unsigned long long x, T *state, unsigned int *scratch)
{

    unsigned int *matrix = scratch;

    unsigned int *matrixA = scratch + (n * n * 32);

    unsigned int *vector = scratch + (n * n * 32) + (n * n * 32);

    unsigned int *result = scratch + (n * n * 32) + (n * n * 32) + n;
    unsigned long long p = x;
    for(int i = 0; i < n; i++) {
        vector[i] = state->v[i];
    }
    int matrix_num = 0;
    while(p && (matrix_num < (8) - 1)) {
        for(unsigned int t = 0; t < (p & ((1<<(2))-1)); t++) {

            __curand_matvec(vector, precalc_xorwow_offset_matrix[matrix_num], result, n);



            __curand_veccopy(vector, result, n);
        }
        p >>= (2);
        matrix_num++;
    }
    if(p) {

        __curand_matcopy(matrix, precalc_xorwow_offset_matrix[(8) - 1], n);
        __curand_matcopy(matrixA, precalc_xorwow_offset_matrix[(8) - 1], n);




    }
    while(p) {
        for(unsigned int t = 0; t < (p & ((1<<(4))-1)); t++) {
            __curand_matvec(vector, matrixA, result, n);
            __curand_veccopy(vector, result, n);
        }
        p >>= (4);
        if(p) {
            for(int i = 0; i < (4); i++) {
                __curand_matmat(matrix, matrixA, n);
                __curand_matcopy(matrixA, matrix, n);
            }
        }
    }
    for(int i = 0; i < n; i++) {
        state->v[i] = vector[i];
    }
    state->d += 362437 * (unsigned int)x;
}

template <typename T, int n>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void _skipahead_sequence_scratch(unsigned long long x, T *state, unsigned int *scratch)
{

    unsigned int *matrix = scratch;

    unsigned int *matrixA = scratch + (n * n * 32);

    unsigned int *vector = scratch + (n * n * 32) + (n * n * 32);

    unsigned int *result = scratch + (n * n * 32) + (n * n * 32) + n;
    unsigned long long p = x;
    for(int i = 0; i < n; i++) {
        vector[i] = state->v[i];
    }
    int matrix_num = 0;
    while(p && matrix_num < (8) - 1) {
        for(unsigned int t = 0; t < (p & ((1<<(2))-1)); t++) {

            __curand_matvec(vector, precalc_xorwow_matrix[matrix_num], result, n);



            __curand_veccopy(vector, result, n);
        }
        p >>= (2);
        matrix_num++;
    }
    if(p) {

        __curand_matcopy(matrix, precalc_xorwow_matrix[(8) - 1], n);
        __curand_matcopy(matrixA, precalc_xorwow_matrix[(8) - 1], n);




    }
    while(p) {
        for(unsigned int t = 0; t < (p & ((1<<(4))-1)); t++) {
            __curand_matvec(vector, matrixA, result, n);
            __curand_veccopy(vector, result, n);
        }
        p >>= (4);
        if(p) {
            for(int i = 0; i < (4); i++) {
                __curand_matmat(matrix, matrixA, n);
                __curand_matcopy(matrixA, matrix, n);
            }
        }
    }
    for(int i = 0; i < n; i++) {
        state->v[i] = vector[i];
    }

}
# 701 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead(unsigned long long n, curandStateXORWOW_t *state)
{
    unsigned int scratch[5 * 5 * 32 * 2 + 5 * 2];
    _skipahead_scratch<curandStateXORWOW_t, 5>(n, state, (unsigned int *)scratch);
}
# 720 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead_sequence(unsigned long long n, curandStateXORWOW_t *state)
{
    unsigned int scratch[5 * 5 * 32 * 2 + 5 * 2];
    _skipahead_sequence_scratch<curandStateXORWOW_t, 5>(n, state, (unsigned int *)scratch);
}



static __inline__ __attribute__((always_inline)) __attribute__((device)) void _curand_init_scratch(unsigned long long seed,
                                     unsigned long long subsequence,
                                     unsigned long long offset,
                                     curandStateXORWOW_t *state,
                                     unsigned int *scratch)
{


    unsigned int s0 = ((unsigned int)seed) ^ 0xaad26b49UL;
    unsigned int s1 = (unsigned int)(seed >> 32) ^ 0xf7dcefddUL;


    unsigned int t0 = 1099087573UL * s0;
    unsigned int t1 = 2591861531UL * s1;
    state->d = 6615241 + t1 + t0;
    state->v[0] = 123456789UL + t0;
    state->v[1] = 362436069UL ^ t0;
    state->v[2] = 521288629UL + t1;
    state->v[3] = 88675123UL ^ t1;
    state->v[4] = 5783321UL + t0;
    _skipahead_sequence_scratch<curandStateXORWOW_t, 5>(subsequence, state, scratch);
    _skipahead_scratch<curandStateXORWOW_t, 5>(offset, state, scratch);
    state->boxmuller_flag = 0;
    state->boxmuller_flag_double = 0;
}
# 772 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_init(unsigned long long seed,
                            unsigned long long subsequence,
                            unsigned long long offset,
                            curandStateXORWOW_t *state)
{
    unsigned int scratch[5 * 5 * 32 * 2 + 5 * 2];
    _curand_init_scratch(seed, subsequence, offset, state, (unsigned int*)scratch);
}
# 791 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand(curandStateXORWOW_t *state)
{
    unsigned int t;
    t = (state->v[0] ^ (state->v[0] >> 2));
    state->v[0] = state->v[1];
    state->v[1] = state->v[2];
    state->v[2] = state->v[3];
    state->v[3] = state->v[4];
    state->v[4] = (state->v[4] ^ (state->v[4] <<4)) ^ (t ^ (t << 1));
    state->d += 362437;
    return state->v[4] + state->d;
}
# 816 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand(curandStatePhilox4_32_10_t *state)
{


    unsigned ret = (&state->output.x)[state->STATE++];
    if(state->STATE == 4){
        Philox_State_Incr(state);
        state->output = curand_Philox4x32_10(state->ctr,state->key);
        state->STATE = 0;
    }
    return ret;
}
# 840 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand4(curandStatePhilox4_32_10_t *state)
{
    uint4 r;

    uint4 tmp = state->output;
    Philox_State_Incr(state);
    state->output= curand_Philox4x32_10(state->ctr,state->key);
    switch(state->STATE){
    case 0:
        return tmp;
    case 1:
        r.x = tmp.y;
        r.y = tmp.z;
        r.z = tmp.w;
        r.w = state->output.x;
        break;
    case 2:
        r.x = tmp.z;
        r.y = tmp.w;
        r.z = state->output.x;
        r.w = state->output.y;
        break;
    case 3:
        r.x = tmp.w;
        r.y = state->output.x;
        r.z = state->output.y;
        r.w = state->output.z;
        break;
    default:

        return tmp;
    }
    return r;
}
# 885 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead(unsigned long long n, curandStatePhilox4_32_10_t *state)
{
    state->STATE += (n & 3);
    n /= 4;
    if( state->STATE > 3 ){
        n += 1;
        state->STATE -= 4;
    }
    Philox_State_Incr(state, n);
    state->output = curand_Philox4x32_10(state->ctr,state->key);
}
# 909 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead_sequence(unsigned long long n, curandStatePhilox4_32_10_t *state)
{
    Philox_State_Incr_hi(state, n);
    state->output = curand_Philox4x32_10(state->ctr,state->key);
}
# 936 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_init(unsigned long long seed,
                                 unsigned long long subsequence,
                                 unsigned long long offset,
                                 curandStatePhilox4_32_10_t *state)
{
    state->ctr = make_uint4(0, 0, 0, 0);
    state->key.x = (unsigned int)seed;
    state->key.y = (unsigned int)(seed>>32);
    state->STATE = 0;
    state->boxmuller_flag = 0;
    state->boxmuller_flag_double = 0;
    skipahead_sequence(subsequence, state);
    skipahead(offset, state);
}
# 961 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_MRG32k3a (curandStateMRG32k3a_t *state)
{
    const double m1 = 4294967087.;
    const double m2 = 4294944443.;
    const double a12 = 1403580.;
    const double a13n = 810728.;
    const double a21 = 527612.;
    const double a23n = 1370589.;

    const double rh1 = 2.3283065498378290e-010;
    const double rl1 = -1.7354913086174288e-026;
    const double rh2 = 2.3283188252407387e-010;
    const double rl2 = 2.4081018096503646e-026;

    double q, p1, p2;
    p1 = a12 * state->s1[1] - a13n * state->s1[0];
    q = trunc (fma (p1, rh1, p1 * rl1));
    p1 -= q * m1;
    if (p1 < 0.0) p1 += m1;
    state->s1[0] = state->s1[1]; state->s1[1] = state->s1[2]; state->s1[2] = p1;
    p2 = a21 * state->s2[2] - a23n * state->s2[0];
    q = trunc (fma (p2, rh2, p2 * rl2));
    p2 -= q * m2;
    if (p2 < 0.0) p2 += m2;
    state->s2[0] = state->s2[1]; state->s2[1] = state->s2[2]; state->s2[2] = p2;
    if (p1 <= p2) return (p1 - p2 + m1);
    else return (p1 - p2);
}
# 1023 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand(curandStateMRG32k3a_t *state)
{
    double dRet;
    dRet = (double)curand_MRG32k3a(state)*(double)1.000000048662;
    return (unsigned int)dRet;
}
# 1043 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead(unsigned long long n, curandStateMRG32k3a_t *state)
{
    double t[3][3];

    curand_MRGmatPow3x3( mrg32k3aM1, t, 4294967087., n);
    curand_MRGmatVecMul3x3( t, state->s1, 4294967087.);
    curand_MRGmatPow3x3(mrg32k3aM2, t, 4294944443., n);
    curand_MRGmatVecMul3x3( t, state->s2, 4294944443.);






}
# 1073 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead_subsequence(unsigned long long n, curandStateMRG32k3a_t *state)
{
    double t[3][3];

    curand_MRGmatPow3x3( mrg32k3aM1SubSeq, t, 4294967087., n);
    curand_MRGmatVecMul3x3( t, state->s1, 4294967087.);
    curand_MRGmatPow3x3( mrg32k3aM2SubSeq, t, 4294944443., n);
    curand_MRGmatVecMul3x3( t, state->s2, 4294944443.);






}
# 1102 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead_sequence(unsigned long long n, curandStateMRG32k3a_t *state)
{
    double t[3][3];

    curand_MRGmatPow3x3( mrg32k3aM1Seq, t, 4294967087., n);
    curand_MRGmatVecMul3x3( t, state->s1, 4294967087.);
    curand_MRGmatPow3x3( mrg32k3aM2Seq, t, 4294944443., n);
    curand_MRGmatVecMul3x3( t, state->s2, 4294944443.);






}
# 1136 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_init(unsigned long long seed,
                            unsigned long long subsequence,
                            unsigned long long offset,
                            curandStateMRG32k3a_t *state)
{
    int i;
    for ( i=0; i<3; i++ ) {
        state->s1[i] = 12345.;
        state->s2[i] = 12345.;
    }
    if (seed != 0ull) {
        unsigned int x1 = ((unsigned int)seed) ^ 0x55555555UL;
        unsigned int x2 = (unsigned int)((seed >> 32) ^ 0xAAAAAAAAUL);
        state->s1[0] = curand_MRGmodMul(x1, state->s1[0], 4294967087.);
        state->s1[1] = curand_MRGmodMul(x2, state->s1[1], 4294967087.);
        state->s1[2] = curand_MRGmodMul(x1, state->s1[2], 4294967087.);
        state->s2[0] = curand_MRGmodMul(x2, state->s2[0], 4294944443.);
        state->s2[1] = curand_MRGmodMul(x1, state->s2[1], 4294944443.);
        state->s2[2] = curand_MRGmodMul(x2, state->s2[2], 4294944443.);
    }
    skipahead_subsequence( subsequence, state );
    skipahead( offset, state );
    state->boxmuller_flag = 0;
    state->boxmuller_flag_double = 0;
}
# 1172 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead(unsigned int n, T state)
{
    unsigned int i_gray;
    state->x = state->c;
    state->i += n;

    i_gray = state->i ^ (state->i >> 1);
    for(unsigned int k = 0; k < 32; k++) {
        if(i_gray & (1 << k)) {
            state->x ^= state->direction_vectors[k];
        }
    }
    return;
}
# 1198 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void skipahead(unsigned long long n, T state)
{
    unsigned long long i_gray;
    state->x = state->c;
    state->i += n;

    i_gray = state->i ^ (state->i >> 1);
    for(unsigned k = 0; k < 64; k++) {
        if(i_gray & (1ULL << k)) {
            state->x ^= state->direction_vectors[k];
        }
    }
    return;
}
# 1228 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_init(curandDirectionVectors32_t direction_vectors,
                                            unsigned int offset,
                                            curandStateSobol32_t *state)
{
    state->i = 0;
    state->c = 0;
    for(int i = 0; i < 32; i++) {
        state->direction_vectors[i] = direction_vectors[i];
    }
    state->x = 0;
    skipahead<curandStateSobol32_t *>(offset, state);
}
# 1255 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_init(curandDirectionVectors32_t direction_vectors,
                                            unsigned int scramble_c,
                                            unsigned int offset,
                                            curandStateScrambledSobol32_t *state)
{
    state->i = 0;
    state->c = scramble_c;
    for(int i = 0; i < 32; i++) {
        state->direction_vectors[i] = direction_vectors[i];
    }
    state->x = state->c;
    skipahead<curandStateScrambledSobol32_t *>(offset, state);
}

template<typename XT>
static __inline__ __attribute__((always_inline)) __attribute__((device)) int __curand_find_trailing_zero(XT x)
{

    unsigned long long z = x;
    int y = __ffsll(~z);
    if (y)
        return y-1;
    return 64;
# 1287 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
}
# 1302 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_init(curandDirectionVectors64_t direction_vectors,
                                            unsigned long long offset,
                                            curandStateSobol64_t *state)
{
    state->i = 0;
    state->c = 0;
    for(int i = 0; i < 64; i++) {
        state->direction_vectors[i] = direction_vectors[i];
    }
    state->x = 0;
    skipahead<curandStateSobol64_t *>(offset, state);
}

template<typename PT>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void _skipahead_stride(int n_log2, PT state)
{

    unsigned int shifted_i = state->i >> n_log2;
    state->x ^= state->direction_vectors[n_log2 - 1];
    state->x ^= state->direction_vectors[
        __curand_find_trailing_zero(shifted_i) + n_log2];
    state->i += 1 << n_log2;

}
# 1341 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void curand_init(curandDirectionVectors64_t direction_vectors,
                                            unsigned long long scramble_c,
                                            unsigned long long offset,
                                            curandStateScrambledSobol64_t *state)
{
    state->i = 0;
    state->c = scramble_c;
    for(int i = 0; i < 64; i++) {
        state->direction_vectors[i] = direction_vectors[i];
    }
    state->x = state->c;
    skipahead<curandStateScrambledSobol64_t *>(offset, state);
}
# 1366 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand(curandStateSobol32_t * state)
{



    unsigned int res = state->x;
    state->x ^= state->direction_vectors[__curand_find_trailing_zero(state->i)];
    state->i ++;
    return res;
}
# 1388 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand(curandStateScrambledSobol32_t * state)
{



    unsigned int res = state->x;
    state->x ^= state->direction_vectors[__curand_find_trailing_zero(state->i)];
    state->i ++;
    return res;
}
# 1410 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long curand(curandStateSobol64_t * state)
{



    unsigned long long res = state->x;
    state->x ^= state->direction_vectors[__curand_find_trailing_zero(state->i)];
    state->i ++;
    return res;
}
# 1432 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long curand(curandStateScrambledSobol64_t * state)
{



    unsigned long long res = state->x;
    state->x ^= state->direction_vectors[__curand_find_trailing_zero(state->i)];
    state->i ++;
    return res;
}

# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h" 2





static __inline__ __attribute__((always_inline)) __attribute__((device)) float _curand_uniform(unsigned int x)
{
    return x * (2.3283064e-10f) + ((2.3283064e-10f)/2.0f);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 _curand_uniform4(uint4 x)
{
    float4 y;
    y.x = x.x * (2.3283064e-10f) + ((2.3283064e-10f)/2.0f);
    y.y = x.y * (2.3283064e-10f) + ((2.3283064e-10f)/2.0f);
    y.z = x.z * (2.3283064e-10f) + ((2.3283064e-10f)/2.0f);
    y.w = x.w * (2.3283064e-10f) + ((2.3283064e-10f)/2.0f);
    return y;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float _curand_uniform(unsigned long long x)
{
    unsigned int t;
    t = (unsigned int)(x >> 32);
    return t * (2.3283064e-10f) + ((2.3283064e-10f)/2.0f);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double _curand_uniform_double(unsigned int x)
{
    return x * (2.3283064365386963e-10) + ((2.3283064365386963e-10)/2.0);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double _curand_uniform_double(unsigned long long x)
{
    return (x >> 11) * (1.1102230246251565e-16) + ((1.1102230246251565e-16)/2.0);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double4 _curand_uniform4_double(uint4 x)
{
    double4 result;
    result.x = (x.x>>11) * (2.3283064365386963e-10) + ((2.3283064365386963e-10)/2.0);
    result.y = (x.y>>11) * (2.3283064365386963e-10) + ((2.3283064365386963e-10)/2.0);
    result.z = (x.z>>11) * (2.3283064365386963e-10) + ((2.3283064365386963e-10)/2.0);
    result.w = (x.w>>11) * (2.3283064365386963e-10) + ((2.3283064365386963e-10)/2.0);
    return result;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double _curand_uniform_double_hq(unsigned int x, unsigned int y)
{
    unsigned long long z = (unsigned long long)x ^
        ((unsigned long long)y << (53 - 32));
    return z * (1.1102230246251565e-16) + ((1.1102230246251565e-16)/2.0);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStateTest_t *state)
{
    return _curand_uniform(curand(state));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStateTest_t *state)
{
    return _curand_uniform_double(curand(state));
}
# 142 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStateXORWOW_t *state)
{
    return _curand_uniform(curand(state));
}
# 163 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStateXORWOW_t *state)
{
    unsigned int x, y;
    x = curand(state);
    y = curand(state);
    return _curand_uniform_double_hq(x, y);
}
# 185 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStateMRG32k3a_t *state)
{
    return ((float)(curand_MRG32k3a(state)*2.328306549295728e-10));
}
# 205 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStateMRG32k3a_t *state)
{
    return curand_MRG32k3a(state)*2.328306549295728e-10;
}
# 225 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_uniform2_double(curandStatePhilox4_32_10_t *state)
{
    uint4 _x;
    double2 result;
    _x = curand4(state);
    result.x = _curand_uniform_double_hq(_x.x,_x.y);
    result.y = _curand_uniform_double_hq(_x.z,_x.w);
    return result;
}



static __inline__ __attribute__((always_inline)) __attribute__((device)) double4 curand_uniform4_double(curandStatePhilox4_32_10_t *state)
{
    uint4 _x, _y;
    double4 result;
    _x = curand4(state);
    _y = curand4(state);
    result.x = _curand_uniform_double_hq(_x.x,_x.y);
    result.y = _curand_uniform_double_hq(_x.z,_x.w);
    result.z = _curand_uniform_double_hq(_y.x,_y.y);
    result.w = _curand_uniform_double_hq(_y.z,_y.w);
    return result;
}
# 263 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStatePhilox4_32_10_t *state)
{
   return _curand_uniform(curand(state));
}
# 282 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 curand_uniform4(curandStatePhilox4_32_10_t *state)
{
   return _curand_uniform4(curand4(state));
}
# 299 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStateMtgp32_t *state)
{
    return _curand_uniform(curand(state));
}
# 315 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStateMtgp32_t *state)
{
    return _curand_uniform_double(curand(state));
}
# 333 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStatePhilox4_32_10_t *state)
{
    return _curand_uniform_double(curand(state));
}
# 353 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStateSobol32_t *state)
{
    return _curand_uniform(curand(state));
}
# 373 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStateSobol32_t *state)
{
    return _curand_uniform_double(curand(state));
}
# 391 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStateScrambledSobol32_t *state)
{
    return _curand_uniform(curand(state));
}
# 411 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStateScrambledSobol32_t *state)
{
    return _curand_uniform_double(curand(state));
}
# 429 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStateSobol64_t *state)
{
    return _curand_uniform(curand(state));
}
# 449 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStateSobol64_t *state)
{
    return _curand_uniform_double(curand(state));
}
# 467 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_uniform(curandStateScrambledSobol64_t *state)
{
    return _curand_uniform(curand(state));
}
# 487 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_uniform.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_uniform_double(curandStateScrambledSobol64_t *state)
{
    return _curand_uniform_double(curand(state));
}
# 1444 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h" 2



# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal_static.h" 1
# 53 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal_static.h"
__attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) float _curand_normal_icdf(unsigned int x)
{

    float s = (-1.4142135f);

    if(x > 0x80000000UL) {
        x = 0xffffffffUL - x;
        s = -s;
    }
    float p = x * (2.3283064e-10f) + ((2.3283064e-10f)/2.0f);

    return s * erfcinvf(2.0f * p);




}

__attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) float _curand_normal_icdf(unsigned long long x)
{

    unsigned int t = (unsigned int)(x >> 32);
    float s = (-1.4142135f);

    if(t > 0x80000000UL) {
        t = 0xffffffffUL - t;
        s = -s;
    }
    float p = t * (2.3283064e-10f) + ((2.3283064e-10f)/2.0f);

    return s * erfcinvf(2.0f * p);




}

__attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) double _curand_normal_icdf_double(unsigned int x)
{

    double s = (-1.4142135623730951);

    if(x > 0x80000000UL) {
        x = 0xffffffffUL - x;
        s = -s;
    }
    double p = x * (2.3283064365386963e-10) + ((2.3283064365386963e-10)/2.0);

    return s * erfcinv(2.0 * p);




}

__attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) double _curand_normal_icdf_double(unsigned long long x)
{

    double s = (-1.4142135623730951);
    x >>= 11;

    if(x > 0x10000000000000UL) {
        x = 0x1fffffffffffffUL - x;
        s = -s;
    }
    double p = x * (1.1102230246251565e-16) + ((1.1102230246251565e-16)/2.0);

    return s * erfcinv(2.0 * p);




}
# 66 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h" 2

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 _curand_box_muller(unsigned int x, unsigned int y)
{
    float2 result;
    float u = x * (2.3283064e-10f) + ((2.3283064e-10f)/2);
    float v = y * (2.3283064e-10f * 6.2831855f) + ((2.3283064e-10f * 6.2831855f)/2);

    float s = sqrtf(-2.0f * logf(u));
    __sincosf(v, &result.x, &result.y);





    result.x *= s;
    result.y *= s;
    return result;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 curand_box_muller_mrg(curandStateMRG32k3a_t * state)
{
    float x, y;
    x = curand_uniform(state);
    y = curand_uniform(state) * (6.2831855f);
    float2 result;

    float s = sqrtf(-2.0f * logf(x));
    __sincosf(y, &result.x, &result.y);





    result.x *= s;
    result.y *= s;
    return result;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double2
_curand_box_muller_double(unsigned int x0, unsigned int x1,
                          unsigned int y0, unsigned int y1)
{
    double2 result;
    unsigned long long zx = (unsigned long long)x0 ^
        ((unsigned long long)x1 << (53 - 32));
    double u = zx * (1.1102230246251565e-16) + ((1.1102230246251565e-16)/2.0);
    unsigned long long zy = (unsigned long long)y0 ^
        ((unsigned long long)y1 << (53 - 32));
    double v = zy * ((1.1102230246251565e-16)*2.0) + (1.1102230246251565e-16);
    double s = sqrt(-2.0 * log(u));


    sincospi(v, &result.x, &result.y);




    result.x *= s;
    result.y *= s;

    return result;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double2
curand_box_muller_mrg_double(curandStateMRG32k3a_t * state)
{
    double x, y;
    double2 result;
    x = curand_uniform_double(state);
    y = curand_uniform_double(state) * 2.0;

    double s = sqrt(-2.0 * log(x));

    sincospi(y, &result.x, &result.y);




    result.x *= s;
    result.y *= s;
    return result;
}

template <typename R>
static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 curand_box_muller(R *state)
{
    float2 result;
    unsigned int x = curand(state);
    unsigned int y = curand(state);
    result = _curand_box_muller(x, y);
    return result;
}

template <typename R>
static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 curand_box_muller4(R *state)
{
    float4 result;
    float2 _result;
    uint4 x = curand4(state);

    _result = _curand_box_muller(x.x, x.y);
    result.x = _result.x;
    result.y = _result.y;
    _result = _curand_box_muller(x.z, x.w);
    result.z = _result.x;
    result.w = _result.y;
    return result;
}

template <typename R>
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_box_muller_double(R *state)
{
    double2 result;
    unsigned int x0 = curand(state);
    unsigned int x1 = curand(state);
    unsigned int y0 = curand(state);
    unsigned int y1 = curand(state);
    result = _curand_box_muller_double(x0, x1, y0, y1);
    return result;
}

template <typename R>
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_box_muller2_double(R *state)
{
    double2 result;
    uint4 _x;
    _x = curand4(state);
    result = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w);
    return result;
}


template <typename R>
static __inline__ __attribute__((always_inline)) __attribute__((device)) double4 curand_box_muller4_double(R *state)
{
    double4 result;
    double2 _res1;
    double2 _res2;
    uint4 _x;
    uint4 _y;
    _x = curand4(state);
    _y = curand4(state);
    _res1 = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w);
    _res2 = _curand_box_muller_double(_y.x, _y.y, _y.z, _y.w);
    result.x = _res1.x;
    result.y = _res1.y;
    result.z = _res2.x;
    result.w = _res2.y;
    return result;
}
# 308 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_normal(curandStateXORWOW_t *state)
{
    if(state->boxmuller_flag != 0x00000001) {
        unsigned int x, y;
        x = curand(state);
        y = curand(state);
        float2 v = _curand_box_muller(x, y);
        state->boxmuller_extra = v.y;
        state->boxmuller_flag = 0x00000001;
        return v.x;
    }
    state->boxmuller_flag = 0;
    return state->boxmuller_extra;
}
# 340 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_normal(curandStatePhilox4_32_10_t *state)
{
    if(state->boxmuller_flag != 0x00000001) {
        unsigned int x, y;
        x = curand(state);
        y = curand(state);
        float2 v = _curand_box_muller(x, y);
        state->boxmuller_extra = v.y;
        state->boxmuller_flag = 0x00000001;
        return v.x;
    }
    state->boxmuller_flag = 0;
    return state->boxmuller_extra;
}
# 373 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_normal(curandStateMRG32k3a_t *state)
{
    if(state->boxmuller_flag != 0x00000001) {
        float2 v = curand_box_muller_mrg(state);
        state->boxmuller_extra = v.y;
        state->boxmuller_flag = 0x00000001;
        return v.x;
    }
    state->boxmuller_flag = 0;
    return state->boxmuller_extra;
}
# 400 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 curand_normal2(curandStateXORWOW_t *state)
{
    return curand_box_muller(state);
}
# 419 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 curand_normal2(curandStatePhilox4_32_10_t *state)
{
    return curand_box_muller(state);
}
# 439 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 curand_normal4(curandStatePhilox4_32_10_t *state)
{
    return curand_box_muller4(state);
}
# 461 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 curand_normal2(curandStateMRG32k3a_t *state)
{
    return curand_box_muller_mrg(state);
}
# 480 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_normal(curandStateMtgp32_t *state)
{
    return _curand_normal_icdf(curand(state));
}
# 498 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_normal(curandStateSobol32_t *state)
{
    return _curand_normal_icdf(curand(state));
}
# 517 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_normal(curandStateScrambledSobol32_t *state)
{
    return _curand_normal_icdf(curand(state));
}
# 536 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_normal(curandStateSobol64_t *state)
{
    return _curand_normal_icdf(curand(state));
}
# 555 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_normal(curandStateScrambledSobol64_t *state)
{
    return _curand_normal_icdf(curand(state));
}
# 576 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_normal_double(curandStateXORWOW_t *state)
{
    if(state->boxmuller_flag_double != 0x00000001) {
        unsigned int x0, x1, y0, y1;
        x0 = curand(state);
        x1 = curand(state);
        y0 = curand(state);
        y1 = curand(state);
        double2 v = _curand_box_muller_double(x0, x1, y0, y1);
        state->boxmuller_extra_double = v.y;
        state->boxmuller_flag_double = 0x00000001;
        return v.x;
    }
    state->boxmuller_flag_double = 0;
    return state->boxmuller_extra_double;
}
# 610 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_normal_double(curandStatePhilox4_32_10_t *state)
{
    if(state->boxmuller_flag_double != 0x00000001) {
        uint4 _x;
        _x = curand4(state);
        double2 v = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w);
        state->boxmuller_extra_double = v.y;
        state->boxmuller_flag_double = 0x00000001;
        return v.x;
    }
    state->boxmuller_flag_double = 0;
    return state->boxmuller_extra_double;
}
# 641 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_normal_double(curandStateMRG32k3a_t *state)
{
    if(state->boxmuller_flag_double != 0x00000001) {
        double2 v = curand_box_muller_mrg_double(state);
        state->boxmuller_extra_double = v.y;
        state->boxmuller_flag_double = 0x00000001;
        return v.x;
    }
    state->boxmuller_flag_double = 0;
    return state->boxmuller_extra_double;
}
# 668 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_normal2_double(curandStateXORWOW_t *state)
{
    return curand_box_muller_double(state);
}
# 688 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_normal2_double(curandStatePhilox4_32_10_t *state)
{
    uint4 _x;
    double2 result;

    _x = curand4(state);
    double2 v1 = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w);
    result.x = v1.x;
    result.y = v1.y;

    return result;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) double4 curand_normal4_double(curandStatePhilox4_32_10_t *state)
{
    uint4 _x;
    uint4 _y;
    double4 result;

    _x = curand4(state);
    _y = curand4(state);
    double2 v1 = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w);
    double2 v2 = _curand_box_muller_double(_y.x, _y.y, _y.z, _y.w);
    result.x = v1.x;
    result.y = v1.y;
    result.z = v2.x;
    result.w = v2.y;

    return result;
}
# 736 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_normal2_double(curandStateMRG32k3a_t *state)
{
    return curand_box_muller_mrg_double(state);
}
# 755 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_normal_double(curandStateMtgp32_t *state)
{
    return _curand_normal_icdf_double(curand(state));
}
# 774 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_normal_double(curandStateSobol32_t *state)
{
    return _curand_normal_icdf_double(curand(state));
}
# 793 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_normal_double(curandStateScrambledSobol32_t *state)
{
    return _curand_normal_icdf_double(curand(state));
}
# 812 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_normal_double(curandStateSobol64_t *state)
{
    return _curand_normal_icdf_double(curand(state));
}
# 831 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_normal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_normal_double(curandStateScrambledSobol64_t *state)
{
    return _curand_normal_icdf_double(curand(state));
}
# 1445 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h" 2
# 87 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_log_normal(curandStateXORWOW_t *state, float mean, float stddev)
{
    if(state->boxmuller_flag != 0x00000002) {
        unsigned int x, y;
        x = curand(state);
        y = curand(state);
        float2 v = _curand_box_muller(x, y);
        state->boxmuller_extra = expf(mean + (stddev * v.y));
        state->boxmuller_flag = 0x00000002;
        return expf(mean + (stddev * v.x));
    }
    state->boxmuller_flag = 0;
    return state->boxmuller_extra;
}
# 123 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_log_normal(curandStatePhilox4_32_10_t *state, float mean, float stddev)
{
    if(state->boxmuller_flag != 0x00000002) {
        unsigned int x, y;
        x = curand(state);
        y = curand(state);
        float2 v = _curand_box_muller(x, y);
        state->boxmuller_extra = expf(mean + (stddev * v.y));
        state->boxmuller_flag = 0x00000002;
        return expf(mean + (stddev * v.x));
    }
    state->boxmuller_flag = 0;
    return state->boxmuller_extra;
}
# 156 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 curand_log_normal2(curandStateXORWOW_t *state, float mean, float stddev)
{
    float2 v = curand_box_muller(state);
    v.x = expf(mean + (stddev * v.x));
    v.y = expf(mean + (stddev * v.y));
    return v;
}
# 182 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 curand_log_normal2(curandStatePhilox4_32_10_t *state, float mean, float stddev)
{
    float2 v = curand_box_muller(state);
    v.x = expf(mean + (stddev * v.x));
    v.y = expf(mean + (stddev * v.y));
    return v;
}
# 207 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 curand_log_normal4(curandStatePhilox4_32_10_t *state, float mean, float stddev)
{
    float4 v = curand_box_muller4(state);
    v.x = expf(mean + (stddev * v.x));
    v.y = expf(mean + (stddev * v.y));
    v.z = expf(mean + (stddev * v.z));
    v.w = expf(mean + (stddev * v.w));
    return v;
}
# 237 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_log_normal(curandStateMRG32k3a_t *state, float mean, float stddev)
{
    if(state->boxmuller_flag != 0x00000002) {
        float2 v = curand_box_muller_mrg(state);
        state->boxmuller_extra = expf(mean + (stddev * v.y));
        state->boxmuller_flag = 0x00000002;
        return expf(mean + (stddev * v.x));
    }
    state->boxmuller_flag = 0;
    return state->boxmuller_extra;
}
# 267 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 curand_log_normal2(curandStateMRG32k3a_t *state, float mean, float stddev)
{
    float2 v = curand_box_muller_mrg(state);
    v.x = expf(mean + (stddev * v.x));
    v.y = expf(mean + (stddev * v.y));
    return v;
}
# 293 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_log_normal(curandStateMtgp32_t *state, float mean, float stddev)
{
    return expf(mean + (stddev * _curand_normal_icdf(curand(state))));
}
# 316 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_log_normal(curandStateSobol32_t *state, float mean, float stddev)
{
    return expf(mean + (stddev * _curand_normal_icdf(curand(state))));
}
# 338 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_log_normal(curandStateScrambledSobol32_t *state, float mean, float stddev)
{
    return expf(mean + (stddev * _curand_normal_icdf(curand(state))));
}
# 361 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_log_normal(curandStateSobol64_t *state, float mean, float stddev)
{
    return expf(mean + (stddev * _curand_normal_icdf(curand(state))));
}
# 384 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float curand_log_normal(curandStateScrambledSobol64_t *state, float mean, float stddev)
{
    return expf(mean + (stddev * _curand_normal_icdf(curand(state))));
}
# 410 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_log_normal_double(curandStateXORWOW_t *state, double mean, double stddev)
{
    if(state->boxmuller_flag_double != 0x00000002) {
        unsigned int x0, x1, y0, y1;
        x0 = curand(state);
        x1 = curand(state);
        y0 = curand(state);
        y1 = curand(state);
        double2 v = _curand_box_muller_double(x0, x1, y0, y1);
        state->boxmuller_extra_double = exp(mean + (stddev * v.y));
        state->boxmuller_flag_double = 0x00000002;
        return exp(mean + (stddev * v.x));
    }
    state->boxmuller_flag_double = 0;
    return state->boxmuller_extra_double;
}
# 448 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_log_normal_double(curandStatePhilox4_32_10_t *state, double mean, double stddev)
{
    if(state->boxmuller_flag_double != 0x00000002) {
        uint4 _x;
        _x = curand4(state);
        double2 v = _curand_box_muller_double(_x.x, _x.y, _x.z, _x.w);
        state->boxmuller_extra_double = exp(mean + (stddev * v.y));
        state->boxmuller_flag_double = 0x00000002;
        return exp(mean + (stddev * v.x));
    }
    state->boxmuller_flag_double = 0;
    return state->boxmuller_extra_double;
}
# 481 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_log_normal2_double(curandStateXORWOW_t *state, double mean, double stddev)
{
    double2 v = curand_box_muller_double(state);
    v.x = exp(mean + (stddev * v.x));
    v.y = exp(mean + (stddev * v.y));
    return v;
}
# 507 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_log_normal2_double(curandStatePhilox4_32_10_t *state, double mean, double stddev)
{
    double2 v = curand_box_muller2_double(state);
    v.x = exp(mean + (stddev * v.x));
    v.y = exp(mean + (stddev * v.y));
    return v;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double4 curand_log_normal4_double(curandStatePhilox4_32_10_t *state, double mean, double stddev)
{
    double4 v = curand_box_muller4_double(state);
    v.x = exp(mean + (stddev * v.x));
    v.y = exp(mean + (stddev * v.y));
    v.z = exp(mean + (stddev * v.z));
    v.w = exp(mean + (stddev * v.w));
    return v;
}
# 545 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_log_normal_double(curandStateMRG32k3a_t *state, double mean, double stddev)
{
    if(state->boxmuller_flag_double != 0x00000002) {
        double2 v = curand_box_muller_mrg_double(state);
        state->boxmuller_extra_double = exp(mean + (stddev * v.y));
        state->boxmuller_flag_double = 0x00000002;
        return exp(mean + (stddev * v.x));
    }
    state->boxmuller_flag_double = 0;
    return state->boxmuller_extra_double;
}
# 575 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double2 curand_log_normal2_double(curandStateMRG32k3a_t *state, double mean, double stddev)
{
    double2 v = curand_box_muller_mrg_double(state);
    v.x = exp(mean + (stddev * v.x));
    v.y = exp(mean + (stddev * v.y));
    return v;
}
# 601 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_log_normal_double(curandStateMtgp32_t *state, double mean, double stddev)
{
    return exp(mean + (stddev * _curand_normal_icdf_double(curand(state))));
}
# 624 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_log_normal_double(curandStateSobol32_t *state, double mean, double stddev)
{
    return exp(mean + (stddev * _curand_normal_icdf_double(curand(state))));
}
# 647 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_log_normal_double(curandStateScrambledSobol32_t *state, double mean, double stddev)
{
    return exp(mean + (stddev * _curand_normal_icdf_double(curand(state))));
}
# 669 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_log_normal_double(curandStateSobol64_t *state, double mean, double stddev)
{
    return exp(mean + (stddev * _curand_normal_icdf_double(curand(state))));
}
# 691 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_lognormal.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) double curand_log_normal_double(curandStateScrambledSobol64_t *state, double mean, double stddev)
{
    return exp(mean + (stddev * _curand_normal_icdf_double(curand(state))));
}
# 1446 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h" 2
# 70 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) int __cr_isnan(double a)
{
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 > 0xffe0000000000000ull;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) int __cr_isinf(double a)
{
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 == 0xffe0000000000000ull;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) double __cr_copysign(double a, double b)
{
  volatile union {
    double d;
    unsigned long long int l;
  } cvta, cvtb;

  cvta.d = a;
  cvtb.d = b;
  cvta.l = (cvta.l & 0x7fffffffffffffffULL) | (cvtb.l & 0x8000000000000000ULL);
  return cvta.d;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double __cr_rint(double a)
{
  double fa = fabs(a);
  double u = 4503599627370496.0 + fa;
  if (fa >= 4503599627370496.0) {
    u = a;
  } else {
    u = u - 4503599627370496.0;
    u = __cr_copysign (u, a);
  }
  return u;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float __cr_rsqrt(float a)
{

    asm ("rsqrt.approx.f32.ftz %0, %1;" : "=f"(a) : "f"(a));



    return a;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float __cr_exp (float a)
{

    a = a * 1.4426950408889634074;
    asm ("ex2.approx.f32.ftz %0, %1;" : "=f"(a) : "f"(a));



    return a;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float __cr_log (float a)
{

    asm ("lg2.approx.f32.ftz %0, %1;" : "=f"(a) : "f"(a));
    a = a * 0.69314718055994530942;



    return a;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float __cr_rcp (float a)
{

    asm ("rcp.approx.f32.ftz %0, %1;" : "=f"(a) : "f"(a));



    return a;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) float __cr_pgammainc (float a, float x)
{
    float t, alpha, beta;


    float ma1 = 1.43248035075540910f,
          ma2 = 0.12400979329415655f,
          ma3 = 0.00025361074907033f,
          mb1 = 0.21096734870196546f,
          mb2 = 1.97381164089999420f,
          mb3 = 0.94201734077887530f;



    alpha = __cr_rsqrt (a - ma2);
    alpha = ma1 * alpha + ma3;
    beta = __cr_rsqrt (a - mb2);
    beta = mb1 * beta + mb3;



    t = a - x;
    t = alpha * t - beta;
    t = 1.0f + __cr_exp (t);
    t = t * t;
    t = __cr_rcp (t);




    return t;
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) float __cr_pgammaincinv (float a, float y)
{
    float t, alpha, beta;



    float ma1 = 1.43248035075540910f,
          ma2 = 0.12400979329415655f,
          ma3 = 0.00025361074907033f,
          mb1 = 0.21096734870196546f,
          mb2 = 1.97381164089999420f,
          mb3 = 0.94201734077887530f;



    alpha = __cr_rsqrt (a - ma2);
    alpha = ma1 * alpha + ma3;
    beta = __cr_rsqrt (a - mb2);
    beta = mb1 * beta + mb3;



    t = __cr_rsqrt (y) - 1.0f;
    t = __cr_log (t);
    t = beta + t;
    t = - t * __cr_rcp (alpha) + a;


    return t;
}

static __attribute__((constant)) double __cr_lgamma_table [] = { 0.000000000000000000e-1,
    0.000000000000000000e-1,
    6.931471805599453094e-1,
    1.791759469228055001e0,
    3.178053830347945620e0,
    4.787491742782045994e0,
    6.579251212010100995e0,
    8.525161361065414300e0,
    1.060460290274525023e1};


static __inline__ __attribute__((always_inline)) __attribute__((device)) double __cr_lgamma_integer(int a)
{
    double s;
    double t;
    double fa = fabs((float)a);
    double sum;

    if (a > 8) {



        s = 1.0 / fa;
        t = s * s;
        sum = -0.1633436431e-2;
        sum = sum * t + 0.83645878922e-3;
        sum = sum * t - 0.5951896861197e-3;
        sum = sum * t + 0.793650576493454e-3;
        sum = sum * t - 0.277777777735865004e-2;
        sum = sum * t + 0.833333333333331018375e-1;
        sum = sum * s + 0.918938533204672;
        s = 0.5 * log (fa);
        t = fa - 0.5;
        s = s * t;
        t = s - fa;
        s = s + sum;
        t = t + s;
        return t;
    } else {

        return __cr_lgamma_table [(int) fa-1];
# 284 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
    }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) double __cr_lgamma(double a)
{
  double s;
  double t;
  double i;
  double fa;
  double sum;
  long long int quot;

  if (__cr_isnan(a) || __cr_isinf(a)) {
    return a * a;
  }
  fa = fabs(a);
  if (fa >= 3.0) {
    if (fa >= 8.0) {



      s = 1.0 / fa;
      t = s * s;
      sum = -0.1633436431e-2;
      sum = sum * t + 0.83645878922e-3;
      sum = sum * t - 0.5951896861197e-3;
      sum = sum * t + 0.793650576493454e-3;
      sum = sum * t - 0.277777777735865004e-2;
      sum = sum * t + 0.833333333333331018375e-1;
      sum = sum * s + 0.918938533204672;
      s = 0.5 * log (fa);
      t = fa - 0.5;
      s = s * t;
      t = s - fa;
      s = s + sum;
      t = t + s;
    } else {
      i = fa - 3.0;
      s = -4.02412642744125560E+003;
      s = s * i - 2.97693796998962000E+005;
      s = s * i - 6.38367087682528790E+006;
      s = s * i - 5.57807214576539320E+007;
      s = s * i - 2.24585140671479230E+008;
      s = s * i - 4.70690608529125090E+008;
      s = s * i - 7.62587065363263010E+008;
      s = s * i - 9.71405112477113250E+008;
      t = i - 1.02277248359873170E+003;
      t = t * i - 1.34815350617954480E+005;
      t = t * i - 4.64321188814343610E+006;
      t = t * i - 6.48011106025542540E+007;
      t = t * i - 4.19763847787431360E+008;
      t = t * i - 1.25629926018000720E+009;
      t = t * i - 1.40144133846491690E+009;
      t = s / t;
      t = t + i;
    }
  } else if (fa >= 1.5) {
    i = fa - 2.0;
    t = 9.84839283076310610E-009;
    t = t * i - 6.69743850483466500E-008;
    t = t * i + 2.16565148880011450E-007;
    t = t * i - 4.86170275781575260E-007;
    t = t * i + 9.77962097401114400E-007;
    t = t * i - 2.03041287574791810E-006;
    t = t * i + 4.36119725805364580E-006;
    t = t * i - 9.43829310866446590E-006;
    t = t * i + 2.05106878496644220E-005;
    t = t * i - 4.49271383742108440E-005;
    t = t * i + 9.94570466342226000E-005;
    t = t * i - 2.23154589559238440E-004;
    t = t * i + 5.09669559149637430E-004;
    t = t * i - 1.19275392649162300E-003;
    t = t * i + 2.89051032936815490E-003;
    t = t * i - 7.38555102806811700E-003;
    t = t * i + 2.05808084278121250E-002;
    t = t * i - 6.73523010532073720E-002;
    t = t * i + 3.22467033424113040E-001;
    t = t * i + 4.22784335098467190E-001;
    t = t * i;
  } else if (fa >= 0.7) {
    i = 1.0 - fa;
    t = 1.17786911519331130E-002;
    t = t * i + 3.89046747413522300E-002;
    t = t * i + 5.90045711362049900E-002;
    t = t * i + 6.02143305254344420E-002;
    t = t * i + 5.61652708964839180E-002;
    t = t * i + 5.75052755193461370E-002;
    t = t * i + 6.21061973447320710E-002;
    t = t * i + 6.67614724532521880E-002;
    t = t * i + 7.14856037245421020E-002;
    t = t * i + 7.69311251313347100E-002;
    t = t * i + 8.33503129714946310E-002;
    t = t * i + 9.09538288991182800E-002;
    t = t * i + 1.00099591546322310E-001;
    t = t * i + 1.11334278141734510E-001;
    t = t * i + 1.25509666613462880E-001;
    t = t * i + 1.44049896457704160E-001;
    t = t * i + 1.69557177031481600E-001;
    t = t * i + 2.07385551032182120E-001;
    t = t * i + 2.70580808427600350E-001;
    t = t * i + 4.00685634386517050E-001;
    t = t * i + 8.22467033424113540E-001;
    t = t * i + 5.77215664901532870E-001;
    t = t * i;
  } else {
    t = -9.04051686831357990E-008;
    t = t * fa + 7.06814224969349250E-007;
    t = t * fa - 3.80702154637902830E-007;
    t = t * fa - 2.12880892189316100E-005;
    t = t * fa + 1.29108470307156190E-004;
    t = t * fa - 2.15932815215386580E-004;
    t = t * fa - 1.16484324388538480E-003;
    t = t * fa + 7.21883433044470670E-003;
    t = t * fa - 9.62194579514229560E-003;
    t = t * fa - 4.21977386992884450E-002;
    t = t * fa + 1.66538611813682460E-001;
    t = t * fa - 4.20026350606819980E-002;
    t = t * fa - 6.55878071519427450E-001;
    t = t * fa + 5.77215664901523870E-001;
    t = t * fa;
    t = t * fa + fa;
    t = -log (t);
  }
  if (a >= 0.0) return t;
  if (fa < 1e-19) return -log(fa);

  i = floor(fa);

  if (fa == i) return 1.0 / (fa - i);

  i = __cr_rint (2.0 * fa);
  quot = (long long int)i;
  i = fa - 0.5 * i;
  i = i * 3.1415926535897931e+0;
  if (quot & 1) {
    i = cos(i);
  } else {
    i = sin(i);
  }
  i = fabs(i);
  t = log(3.1415926535897931e+0 / (i * fa)) - t;
  return t;
}


template <typename T>

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson_knuth(T *state, float lambda)
{
  unsigned int k = 0;
  float p = expf(lambda);
  do{
      k++;
      p *= curand_uniform(state);
  }while (p > 1.0);
  return k-1;
}

template <typename T>

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand_poisson_knuth4(T *state, float lambda)
{
  uint4 k = {0,0,0,0};
  float exp_lambda = expf(lambda);
  float4 p={ exp_lambda,exp_lambda,exp_lambda,exp_lambda };
  do{
      k.x++;
      p.x *= curand_uniform(state);
  }while (p.x > 1.0);
  do{
      k.y++;
      p.y *= curand_uniform(state);
  }while (p.y > 1.0);
  do{
      k.z++;
      p.z *= curand_uniform(state);
  }while (p.z > 1.0);
  do{
      k.w++;
      p.w *= curand_uniform(state);
  }while (p.w > 1.0);

  k.x--;
  k.y--;
  k.z--;
  k.w--;
  return k;
}

template <typename T>

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int _curand_M2_double(T x, curandDistributionM2Shift_t distributionM2)
{
    double u = _curand_uniform_double(x);
    int j = (int) floor(distributionM2->length*u);






    double histogramVj = distributionM2->histogram->V[j];
    unsigned int histogramKj = distributionM2->histogram->K[j];



    if (u < histogramVj) return distributionM2->shift + j;
    return distributionM2->shift + histogramKj;
}

template <typename T>

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 _curand_M2_double4(T x, curandDistributionM2Shift_t distributionM2)
{
    double4 u;
    uint4 result = {0,0,0,0};
    int4 flag = {1,1,1,1};

    u.x = _curand_uniform_double(x.x);
    u.y = _curand_uniform_double(x.y);
    u.z = _curand_uniform_double(x.z);
    u.w = _curand_uniform_double(x.w);

    int4 j;
    j.x = (int) floor(distributionM2->length*u.x);
    j.y = (int) floor(distributionM2->length*u.y);
    j.z = (int) floor(distributionM2->length*u.z);
    j.w = (int) floor(distributionM2->length*u.w);
# 525 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
    double histogramVjx = distributionM2->histogram->V[j.x];
    double histogramVjy = distributionM2->histogram->V[j.y];
    double histogramVjz = distributionM2->histogram->V[j.z];
    double histogramVjw = distributionM2->histogram->V[j.w];

    unsigned int histogramKjx = distributionM2->histogram->K[j.x];
    unsigned int histogramKjy = distributionM2->histogram->K[j.y];
    unsigned int histogramKjz = distributionM2->histogram->K[j.z];
    unsigned int histogramKjw = distributionM2->histogram->K[j.w];


    if (u.x < histogramVjx){ result.x = distributionM2->shift + j.x; flag.x = 0; }
    if (u.y < histogramVjy){ result.y = distributionM2->shift + j.y; flag.y = 0; }
    if (u.z < histogramVjz){ result.z = distributionM2->shift + j.z; flag.z = 0; }
    if (u.w < histogramVjw){ result.w = distributionM2->shift + j.w; flag.w = 0; }


    if(flag.x) result.x = distributionM2->shift + histogramKjx;
    if(flag.y) result.y = distributionM2->shift + histogramKjy;
    if(flag.z) result.z = distributionM2->shift + histogramKjz;
    if(flag.w) result.w = distributionM2->shift + histogramKjw;

    return result;
}

template <typename STATE>
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_M2_double(STATE *state, curandDistributionM2Shift_t distributionM2)
{
    return _curand_M2_double(curand(state), distributionM2);
}

template <typename STATE>
static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand_M2_double4(STATE *state, curandDistributionM2Shift_t distributionM2)
{
    return _curand_M2_double4(curand4(state), distributionM2);
}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int _curand_binary_search_double(T x, curandDistributionShift_t distribution)
{
    double u = _curand_uniform_double(x);
    int min = 0;
    int max = distribution->length-1;
    do{
        int mid = (max + min)/2;



        double probability_mid = distribution->probability[mid];

        if (u <= probability_mid){
            max = mid;
        }else{
            min = mid+1;
        }
    }while (min < max);
    return distribution->shift + min;
}

template <typename STATE>
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_binary_search_double(STATE *state, curandDistributionShift_t distribution)
{
    return _curand_binary_search_double(curand(state), distribution);
}



template <typename T>

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int _curand_poisson_ITR_double(T x, double lambda)
{
  double L,p = 1.0;
  double q = 1.0;
  unsigned int k = 0;
  int pow=0;
  double u = _curand_uniform_double(x);
  do{
      if (lambda > (double)(pow+500.0)){
          L = exp(-500.0);
      }else{
          L = exp((double)(pow - lambda));
      }
      p *= L;
      q *= L;
      pow += (int) 500.0;
      while (u > q){
        k++;
        p *= ((double)lambda / (double) k);
        q += p;
      }
  }while((double)pow < lambda);
  return k;
}

template <typename T>

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson_gammainc(T state, float lambda){
    float y, x, t, z,v;
    float logl = __cr_log (lambda);
    while (true) {
        y = curand_uniform (state);
        x = __cr_pgammaincinv (lambda, y);
        x = floorf (x);
        z = curand_uniform (state);
        v = (__cr_pgammainc (lambda, x + 1.0f) - __cr_pgammainc (lambda, x)) * 1.3f;
        z = z*v;
        t = (float)__cr_exp (-lambda + x * logl - (float)__cr_lgamma_integer ((int)(1.0f + x)));
        if ((z < t) && (v>=1e-20))
            break;
    }
    return (unsigned int)x;
}

template <typename T>

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand_poisson_gammainc4(T state, float lambda){
    uint4 result;
    float y, x, t, z,v;
    float logl = __cr_log (lambda);
    while (true) {
        y = curand_uniform(state);
        x = __cr_pgammaincinv (lambda, y);
        x = floorf (x);
        z = curand_uniform (state);
        v = (__cr_pgammainc (lambda, x + 1.0f) - __cr_pgammainc (lambda, x)) * 1.3f;
        z = z*v;
        t = (float)__cr_exp (-lambda + x * logl - (float)__cr_lgamma_integer ((int)(1.0f + x)));
        if ((z < t) && (v>=1e-20))
            break;
    }
    result.x = (unsigned int)x;

    while (true) {
        y = curand_uniform(state);
        x = __cr_pgammaincinv (lambda, y);
        x = floorf (x);
        z = curand_uniform (state);
        v = (__cr_pgammainc (lambda, x + 1.0f) - __cr_pgammainc (lambda, x)) * 1.3f;
        z = z*v;
        t = (float)__cr_exp (-lambda + x * logl - (float)__cr_lgamma_integer ((int)(1.0f + x)));
        if ((z < t) && (v>=1e-20))
            break;
    }
    result.y = (unsigned int)x;

    while (true) {
        y = curand_uniform(state);
        x = __cr_pgammaincinv (lambda, y);
        x = floorf (x);
        z = curand_uniform (state);
        v = (__cr_pgammainc (lambda, x + 1.0f) - __cr_pgammainc (lambda, x)) * 1.3f;
        z = z*v;
        t = (float)__cr_exp (-lambda + x * logl - (float)__cr_lgamma_integer ((int)(1.0f + x)));
        if ((z < t) && (v>=1e-20))
            break;
    }
    result.z = (unsigned int)x;

    while (true) {
        y = curand_uniform(state);
        x = __cr_pgammaincinv (lambda, y);
        x = floorf (x);
        z = curand_uniform (state);
        v = (__cr_pgammainc (lambda, x + 1.0f) - __cr_pgammainc (lambda, x)) * 1.3f;
        z = z*v;
        t = (float)__cr_exp (-lambda + x * logl - (float)__cr_lgamma_integer ((int)(1.0f + x)));
        if ((z < t) && (v>=1e-20))
            break;
    }
    result.w = (unsigned int)x;

    return result;
}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int _curand_poisson(T x, double lambda)
{
    if (lambda < 1000)
        return _curand_poisson_ITR_double(x, lambda);
    return (unsigned int)((sqrt(lambda) * _curand_normal_icdf_double(x)) + lambda + 0.5);
}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int _curand_poisson_from_normal(T x, double lambda)
{
    return (unsigned int)((sqrt(lambda) * _curand_normal_icdf(x)) + lambda + 0.5);
}

template <typename STATE>
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson_from_normal(STATE state, double lambda)
{
    return (unsigned int)((sqrt(lambda) * curand_normal(state)) + lambda + 0.5);
}

template <typename STATE>
static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand_poisson_from_normal4(STATE state, double lambda)
{
   uint4 result;
   float4 _res;

   _res = curand_normal4(state);

   result.x = (unsigned int)((sqrt(lambda) * _res.x) + lambda + 0.5);
   result.y = (unsigned int)((sqrt(lambda) * _res.y) + lambda + 0.5);
   result.z = (unsigned int)((sqrt(lambda) * _res.z) + lambda + 0.5);
   result.w = (unsigned int)((sqrt(lambda) * _res.w) + lambda + 0.5);
   return result;
}
# 750 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson(curandStateXORWOW_t *state, double lambda)
{
    if (lambda < 64)
        return curand_poisson_knuth(state, (float)lambda);
    if (lambda > 4000)
        return (unsigned int)((sqrt(lambda) * curand_normal_double(state)) + lambda + 0.5);
    return curand_poisson_gammainc(state, (float)lambda);
}
# 772 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson(curandStatePhilox4_32_10_t *state, double lambda)
{
    if (lambda < 64)
        return curand_poisson_knuth(state, (float)lambda);
    if (lambda > 4000)
        return (unsigned int)((sqrt(lambda) * curand_normal_double(state)) + lambda + 0.5);
    return curand_poisson_gammainc(state, (float)lambda);
}
# 793 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand_poisson4(curandStatePhilox4_32_10_t *state, double lambda)
{
    uint4 result;
    double4 _res;
    if (lambda < 64)
        return curand_poisson_knuth4(state, (float)lambda);
    if (lambda > 4000) {
        _res = curand_normal4_double(state);
        result.x = (unsigned int)((sqrt(lambda) * _res.x) + lambda + 0.5);
        result.y = (unsigned int)((sqrt(lambda) * _res.y) + lambda + 0.5);
        result.z = (unsigned int)((sqrt(lambda) * _res.z) + lambda + 0.5);
        result.w = (unsigned int)((sqrt(lambda) * _res.w) + lambda + 0.5);
     return result;
    }
    return curand_poisson_gammainc4(state, (float)lambda);
}
# 825 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson(curandStateMRG32k3a_t *state, double lambda)
{
    if (lambda < 64)
        return curand_poisson_knuth(state, (float)lambda);
    if (lambda > 4000)
        return (unsigned int)((sqrt(lambda) * curand_normal_double(state)) + lambda + 0.5);
    return curand_poisson_gammainc(state, (float)lambda);
}
# 846 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson(curandStateMtgp32_t *state, double lambda)
{
    return _curand_poisson(curand(state), lambda);
}
# 864 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson(curandStateSobol32_t *state, double lambda)
{
    return _curand_poisson(curand(state), lambda);
}
# 881 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson(curandStateScrambledSobol32_t *state, double lambda)
{
    return _curand_poisson(curand(state), lambda);
}
# 898 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson(curandStateSobol64_t *state, double lambda)
{
    return _curand_poisson(curand(state), lambda);
}
# 915 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_poisson.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_poisson(curandStateScrambledSobol64_t *state, double lambda)
{
    return _curand_poisson(curand(state), lambda);
}
# 1447 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h" 1
# 61 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
# 1 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_mtgp32_kernel.h" 1
# 62 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h" 2





template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int _curand_discrete(T x, curandDiscreteDistribution_t discrete_distribution){
    if (discrete_distribution->method == CURAND_M2){
        return _curand_M2_double(x, discrete_distribution->M2);
    }
    return (unsigned int)((discrete_distribution->stddev * _curand_normal_icdf_double(x)) + discrete_distribution->mean + 0.5);
}


template <typename STATE>
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand__discrete(STATE state, curandDiscreteDistribution_t discrete_distribution){
    if (discrete_distribution->method == CURAND_M2){
        return curand_M2_double(state, discrete_distribution->M2);
    }
    return (unsigned int)((discrete_distribution->stddev * curand_normal_double(state)) + discrete_distribution->mean + 0.5);
}

template <typename STATE>
static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand__discrete4(STATE state, curandDiscreteDistribution_t discrete_distribution){
    if (discrete_distribution->method == CURAND_M2){
        return curand_M2_double4(state, discrete_distribution->M2);
    }
    double4 _res;
    uint4 result;
    _res = curand_normal4_double(state);
    result.x = (unsigned int)((discrete_distribution->stddev * _res.x) + discrete_distribution->mean + 0.5);
    result.y = (unsigned int)((discrete_distribution->stddev * _res.y) + discrete_distribution->mean + 0.5);
    result.z = (unsigned int)((discrete_distribution->stddev * _res.z) + discrete_distribution->mean + 0.5);
    result.w = (unsigned int)((discrete_distribution->stddev * _res.w) + discrete_distribution->mean + 0.5);
    return result;
}
# 111 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_discrete(curandStateXORWOW_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete(state, discrete_distribution);
}
# 128 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_discrete(curandStatePhilox4_32_10_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete(state, discrete_distribution);
}
# 145 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 curand_discrete4(curandStatePhilox4_32_10_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete4(state, discrete_distribution);
}
# 161 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_discrete(curandStateMRG32k3a_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete(state, discrete_distribution);
}
# 178 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_discrete(curandStateMtgp32_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete(state, discrete_distribution);
}
# 195 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_discrete(curandStateSobol32_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete(state, discrete_distribution);
}
# 212 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_discrete(curandStateScrambledSobol32_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete(state, discrete_distribution);
}
# 229 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_discrete(curandStateSobol64_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete(state, discrete_distribution);
}
# 246 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_discrete2.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int curand_discrete(curandStateScrambledSobol64_t *state, curandDiscreteDistribution_t discrete_distribution)
{
    return curand__discrete(state, discrete_distribution);
}
# 1448 "/usr/local/cuda/bin/../targets/x86_64-linux/include/curand_kernel.h" 2

__attribute__((device)) static inline unsigned int *__get_precalculated_matrix(int n)
{
    if(n == 0) {
        return precalc_xorwow_matrix[n];
    }
    if(n == 2) {
        return precalc_xorwow_offset_matrix[n];
    }
    return precalc_xorwow_matrix[n];
}

__attribute__((host)) static inline unsigned int *__get_precalculated_matrix_host(int n)
{
    if(n == 1) {
        return precalc_xorwow_matrix_host[n];
    }
    if(n == 3) {
        return precalc_xorwow_offset_matrix_host[n];
    }
    return precalc_xorwow_matrix_host[n];
}

__attribute__((device)) static inline double *__get_mrg32k3a_matrix(int n)
{
    if(n == 0) {
        return mrg32k3aM1[n][0];
    }
    if(n == 2) {
        return mrg32k3aM2[n][0];
    }
    if(n == 4) {
        return mrg32k3aM1SubSeq[n][0];
    }
    if(n == 6) {
        return mrg32k3aM2SubSeq[n][0];
    }
    if(n == 8) {
        return mrg32k3aM1Seq[n][0];
    }
    if(n == 10) {
        return mrg32k3aM2Seq[n][0];
    }
    return mrg32k3aM1[n][0];
}

__attribute__((host)) static inline double *__get_mrg32k3a_matrix_host(int n)
{
    if(n == 1) {
        return mrg32k3aM1Host[n][0];
    }
    if(n == 3) {
        return mrg32k3aM2Host[n][0];
    }
    if(n == 5) {
        return mrg32k3aM1SubSeqHost[n][0];
    }
    if(n == 7) {
        return mrg32k3aM2SubSeqHost[n][0];
    }
    if(n == 9) {
        return mrg32k3aM1SeqHost[n][0];
    }
    if(n == 11) {
        return mrg32k3aM2SeqHost[n][0];
    }
    return mrg32k3aM1Host[n][0];
}

__attribute__((host)) static inline double *__get__cr_lgamma_table_host(void) {
    return __cr_lgamma_table;
}
# 8 "neutron-omp.cu" 2

# 1 "/usr/include/c++/5/ctime" 1 3
# 39 "/usr/include/c++/5/ctime" 3
       
# 40 "/usr/include/c++/5/ctime" 3
# 58 "/usr/include/c++/5/ctime" 3

# 58 "/usr/include/c++/5/ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 10 "neutron-omp.cu" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/omp.h" 1 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include/omp.h" 3 4
typedef struct
{
  unsigned char _x[4]
    __attribute__((__aligned__(4)));
} omp_lock_t;

typedef struct
{

  unsigned char _x[8 + sizeof (void *)]
    __attribute__((__aligned__(sizeof (void *))));




} omp_nest_lock_t;


typedef enum omp_sched_t
{
  omp_sched_static = 1,
  omp_sched_dynamic = 2,
  omp_sched_guided = 3,
  omp_sched_auto = 4
} omp_sched_t;

typedef enum omp_proc_bind_t
{
  omp_proc_bind_false = 0,
  omp_proc_bind_true = 1,
  omp_proc_bind_master = 2,
  omp_proc_bind_close = 3,
  omp_proc_bind_spread = 4
} omp_proc_bind_t;


extern "C" {





extern void omp_set_num_threads (int) throw ();
extern int omp_get_num_threads (void) throw ();
extern int omp_get_max_threads (void) throw ();
extern int omp_get_thread_num (void) throw ();
extern int omp_get_num_procs (void) throw ();

extern int omp_in_parallel (void) throw ();

extern void omp_set_dynamic (int) throw ();
extern int omp_get_dynamic (void) throw ();

extern void omp_set_nested (int) throw ();
extern int omp_get_nested (void) throw ();

extern void omp_init_lock (omp_lock_t *) throw ();
extern void omp_destroy_lock (omp_lock_t *) throw ();
extern void omp_set_lock (omp_lock_t *) throw ();
extern void omp_unset_lock (omp_lock_t *) throw ();
extern int omp_test_lock (omp_lock_t *) throw ();

extern void omp_init_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_destroy_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_set_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_unset_nest_lock (omp_nest_lock_t *) throw ();
extern int omp_test_nest_lock (omp_nest_lock_t *) throw ();

extern double omp_get_wtime (void) throw ();
extern double omp_get_wtick (void) throw ();

extern void omp_set_schedule (omp_sched_t, int) throw ();
extern void omp_get_schedule (omp_sched_t *, int *) throw ();
extern int omp_get_thread_limit (void) throw ();
extern void omp_set_max_active_levels (int) throw ();
extern int omp_get_max_active_levels (void) throw ();
extern int omp_get_level (void) throw ();
extern int omp_get_ancestor_thread_num (int) throw ();
extern int omp_get_team_size (int) throw ();
extern int omp_get_active_level (void) throw ();

extern int omp_in_final (void) throw ();

extern int omp_get_cancellation (void) throw ();
extern omp_proc_bind_t omp_get_proc_bind (void) throw ();

extern void omp_set_default_device (int) throw ();
extern int omp_get_default_device (void) throw ();
extern int omp_get_num_devices (void) throw ();
extern int omp_get_num_teams (void) throw ();
extern int omp_get_team_num (void) throw ();

extern int omp_is_initial_device (void) throw ();


}
# 11 "neutron-omp.cu" 2



# 13 "neutron-omp.cu"
char info[] = "Usage:\n    neutron-seq H Nb C_c C_s\n\n    H  : épaisseur de la plaque\n    Nb : nombre d'échantillons\n    C_c: composante absorbante\n    C_s: componente diffusante\n\nExemple d'execution : \n    neutron-seq 1.0 500000000 0.5 0.5\n";
# 29 "neutron-omp.cu"
double my_gettimeofday(){
  struct timeval tmp_time;
  gettimeofday(&tmp_time, 
# 31 "neutron-omp.cu" 3 4
                         __null
# 31 "neutron-omp.cu"
                             );
  return tmp_time.tv_sec + (tmp_time.tv_usec * 1.0e-6L);
}


__attribute__((global)) void setup_kernel(curandState *state)
{
    int id = threadIdx.x + blockIdx.x * 64;


    curand_init(1234, id, 0, &state[id]);
}


__attribute__((global)) void generate_kernel(curandState *state,
                                int step, unsigned int nbThread, dim3 TailleGrille, unsigned int N, float c, float c_c,float h, int* R, int* B,int* T,float* absorbed)
{
 int id = threadIdx.x + blockIdx.x *TailleGrille.x;


    curandState localState = state[id];

    float u;

    int r=0;
    int b=0;
    int t=0;
    float d, x, L;

   int debut_for = id*step ;
   int fin_for = (id+1)*step;

   if(id == nbThread) fin_for = N;

#pragma omp parallel for private(x, u, d, L) reduction(+:t,r,b)
  for (int i = debut_for; i < fin_for; i++) {
    d = 0.0;
    x = 0.0;

    while (1) {

      u = curand_uniform(&localState);
      L = -(1 / c) * log(u);
      x = x + L * cos(d);
      if (x < 0) {
 r++;
 break;
      } else if (x >= h) {
 t++;
 break;
      } else if ((u = curand_uniform(&localState)) < c_c / c) {
 b++;
 absorbed[i] = x;
 break;
      } else {
 u = curand_uniform(&localState);
 d = u * 
# 87 "neutron-omp.cu" 3 4
        3.14159265358979323846
# 87 "neutron-omp.cu"
            ;
      }
    }
  }

  state[id] = localState;
  r=atomicAdd(R,r);
  b=atomicAdd(B,b);
  t=atomicAdd(T,t);
}



int main(int argc, char *argv[]) {


  float c, c_c, c_s;

  float h;

  int n;

  int r, b, t;

  double start, finish;
  int j = 0;

  if( argc == 1)
    fprintf( 
# 115 "neutron-omp.cu" 3 4
            stderr
# 115 "neutron-omp.cu"
                  , "%s\n", info);


  h = 1.0;
  n = 500000000;
  c_c = 0.5;
  c_s = 0.5;


  if (argc > 1)
    h = atof(argv[1]);
  if (argc > 2)
    n = atoi(argv[2]);
  if (argc > 3)
    c_c = atof(argv[3]);
  if (argc > 4)
    c_s = atof(argv[4]);
  r = b = t = 0;
  c = c_c + c_s;


    printf("Épaisseur de la plaque : %4.g\n", h);
    printf("Nombre d'échantillons  : %d\n", n);
    printf("C_c : %g\n", c_c);
    printf("C_s : %g\n", c_s);

    float *absorbed;
    absorbed = (float *) calloc(n, sizeof(float));
    dim3 TailleGrille, ThreadparBlock;

 ThreadparBlock.x = 1024;
 ThreadparBlock.y = 1;
 ThreadparBlock.z = 1;

 TailleGrille.x = 1024;
 TailleGrille.y = 1;
 TailleGrille.z = 1;


int nbThread = TailleGrille.x*ThreadparBlock.x;

int step = n/nbThread;

  start = my_gettimeofday();




  finish = my_gettimeofday();

  printf("\nPourcentage des neutrons refléchis : %4.2g\n", (float) r / (float) n);
  printf("Pourcentage des neutrons absorbés : %4.2g\n", (float) b / (float) n);
  printf("Pourcentage des neutrons transmis : %4.2g\n", (float) t / (float) n);

  printf("\nTemps total de calcul: %.8g sec\n", finish - start);
  printf("Millions de neutrons /s: %.2g\n", (double) n / ((finish - start)*1e6));


  FILE *f_handle = fopen("/tmp/absorbed.dat", "w");
  if (!f_handle) {
    fprintf(
# 175 "neutron-omp.cu" 3 4
           stderr
# 175 "neutron-omp.cu"
                 , "Cannot open " "/tmp/absorbed.dat" "\n");
    exit(
# 176 "neutron-omp.cu" 3 4
        1
# 176 "neutron-omp.cu"
                    );
  }

  for (j = 0; j < b; j++)
    fprintf(f_handle, "%f\n", absorbed[j]);


  fclose(f_handle);
  printf("Result written in " "/tmp/absorbed.dat" "\n");

  free(absorbed);
}
